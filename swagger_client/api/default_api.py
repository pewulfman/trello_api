# coding: utf-8

"""
    Trello Api

    Trello Api generated from the online documentation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def actions_id_action_reactions_get(self, id_action, **kwargs):  # noqa: E501
        """List reactions for an action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.actions_id_action_reactions_get(id_action, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id_action: The ID of the action (required)
        :param str member: Whether to load the member as a nested resource. See Members Nested Resource
        :param str emoji: Whether to load the emoji as a nested resource.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.actions_id_action_reactions_get_with_http_info(id_action, **kwargs)  # noqa: E501
        else:
            (data) = self.actions_id_action_reactions_get_with_http_info(id_action, **kwargs)  # noqa: E501
            return data

    def actions_id_action_reactions_get_with_http_info(self, id_action, **kwargs):  # noqa: E501
        """List reactions for an action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.actions_id_action_reactions_get_with_http_info(id_action, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id_action: The ID of the action (required)
        :param str member: Whether to load the member as a nested resource. See Members Nested Resource
        :param str emoji: Whether to load the emoji as a nested resource.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_action', 'member', 'emoji']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actions_id_action_reactions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_action' is set
        if ('id_action' not in params or
                params['id_action'] is None):
            raise ValueError("Missing the required parameter `id_action` when calling `actions_id_action_reactions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_action' in params:
            path_params['idAction'] = params['id_action']  # noqa: E501

        query_params = []
        if 'member' in params:
            query_params.append(('member', params['member']))  # noqa: E501
        if 'emoji' in params:
            query_params.append(('emoji', params['emoji']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/actions/{idAction}/reactions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def actions_id_action_reactions_id_delete(self, id_action, id, **kwargs):  # noqa: E501
        """Deletes a reaction  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.actions_id_action_reactions_id_delete(id_action, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id_action: The ID of the action (required)
        :param str id: The ID of the reaction (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.actions_id_action_reactions_id_delete_with_http_info(id_action, id, **kwargs)  # noqa: E501
        else:
            (data) = self.actions_id_action_reactions_id_delete_with_http_info(id_action, id, **kwargs)  # noqa: E501
            return data

    def actions_id_action_reactions_id_delete_with_http_info(self, id_action, id, **kwargs):  # noqa: E501
        """Deletes a reaction  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.actions_id_action_reactions_id_delete_with_http_info(id_action, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id_action: The ID of the action (required)
        :param str id: The ID of the reaction (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_action', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actions_id_action_reactions_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_action' is set
        if ('id_action' not in params or
                params['id_action'] is None):
            raise ValueError("Missing the required parameter `id_action` when calling `actions_id_action_reactions_id_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `actions_id_action_reactions_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_action' in params:
            path_params['idAction'] = params['id_action']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/actions/{idAction}/reactions/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def actions_id_action_reactions_id_get(self, id_action, id, **kwargs):  # noqa: E501
        """Get information for a reaction  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.actions_id_action_reactions_id_get(id_action, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id_action: The ID of the action (required)
        :param str id: The ID of the reaction (required)
        :param str member: Whether to load the member as a nested resource. See Members Nested Resource
        :param str emoji: Whether to load the emoji as a nested resource.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.actions_id_action_reactions_id_get_with_http_info(id_action, id, **kwargs)  # noqa: E501
        else:
            (data) = self.actions_id_action_reactions_id_get_with_http_info(id_action, id, **kwargs)  # noqa: E501
            return data

    def actions_id_action_reactions_id_get_with_http_info(self, id_action, id, **kwargs):  # noqa: E501
        """Get information for a reaction  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.actions_id_action_reactions_id_get_with_http_info(id_action, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id_action: The ID of the action (required)
        :param str id: The ID of the reaction (required)
        :param str member: Whether to load the member as a nested resource. See Members Nested Resource
        :param str emoji: Whether to load the emoji as a nested resource.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_action', 'id', 'member', 'emoji']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actions_id_action_reactions_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_action' is set
        if ('id_action' not in params or
                params['id_action'] is None):
            raise ValueError("Missing the required parameter `id_action` when calling `actions_id_action_reactions_id_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `actions_id_action_reactions_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_action' in params:
            path_params['idAction'] = params['id_action']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'member' in params:
            query_params.append(('member', params['member']))  # noqa: E501
        if 'emoji' in params:
            query_params.append(('emoji', params['emoji']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/actions/{idAction}/reactions/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def actions_id_action_reactions_post(self, id_action, **kwargs):  # noqa: E501
        """Adds a new reaction to an action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.actions_id_action_reactions_post(id_action, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id_action: The ID of the action (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.actions_id_action_reactions_post_with_http_info(id_action, **kwargs)  # noqa: E501
        else:
            (data) = self.actions_id_action_reactions_post_with_http_info(id_action, **kwargs)  # noqa: E501
            return data

    def actions_id_action_reactions_post_with_http_info(self, id_action, **kwargs):  # noqa: E501
        """Adds a new reaction to an action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.actions_id_action_reactions_post_with_http_info(id_action, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id_action: The ID of the action (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_action']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actions_id_action_reactions_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_action' is set
        if ('id_action' not in params or
                params['id_action'] is None):
            raise ValueError("Missing the required parameter `id_action` when calling `actions_id_action_reactions_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_action' in params:
            path_params['idAction'] = params['id_action']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/actions/{idAction}/reactions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def actions_id_action_reactions_summary_get(self, id_action, **kwargs):  # noqa: E501
        """List a summary of all reactions for an action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.actions_id_action_reactions_summary_get(id_action, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id_action: The ID of the action (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.actions_id_action_reactions_summary_get_with_http_info(id_action, **kwargs)  # noqa: E501
        else:
            (data) = self.actions_id_action_reactions_summary_get_with_http_info(id_action, **kwargs)  # noqa: E501
            return data

    def actions_id_action_reactions_summary_get_with_http_info(self, id_action, **kwargs):  # noqa: E501
        """List a summary of all reactions for an action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.actions_id_action_reactions_summary_get_with_http_info(id_action, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id_action: The ID of the action (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_action']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actions_id_action_reactions_summary_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_action' is set
        if ('id_action' not in params or
                params['id_action'] is None):
            raise ValueError("Missing the required parameter `id_action` when calling `actions_id_action_reactions_summary_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_action' in params:
            path_params['idAction'] = params['id_action']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/actions/{idAction}/reactionsSummary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def actions_id_board_get(self, id, **kwargs):  # noqa: E501
        """Get the board for an action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.actions_id_board_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the action (required)
        :param str fields: all or a comma-separated list of board fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.actions_id_board_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.actions_id_board_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def actions_id_board_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the board for an action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.actions_id_board_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the action (required)
        :param str fields: all or a comma-separated list of board fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actions_id_board_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `actions_id_board_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/actions/{id}/board', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def actions_id_card_get(self, id, **kwargs):  # noqa: E501
        """Get the card for an action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.actions_id_card_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the action (required)
        :param str fields: all or a comma-separated list of card fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.actions_id_card_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.actions_id_card_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def actions_id_card_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the card for an action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.actions_id_card_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the action (required)
        :param str fields: all or a comma-separated list of card fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actions_id_card_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `actions_id_card_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/actions/{id}/card', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def actions_id_delete(self, id, **kwargs):  # noqa: E501
        """Delete a comment action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.actions_id_delete(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the commentCard action to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.actions_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.actions_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def actions_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a comment action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.actions_id_delete_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the commentCard action to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actions_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `actions_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/actions/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def actions_id_display_get(self, id, **kwargs):  # noqa: E501
        """Get the display information for an action.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.actions_id_display_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the action (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.actions_id_display_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.actions_id_display_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def actions_id_display_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the display information for an action.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.actions_id_display_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the action (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actions_id_display_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `actions_id_display_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/actions/{id}/display', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def actions_id_field_get(self, id, field, **kwargs):  # noqa: E501
        """Get a specific property of an action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.actions_id_field_get(id, field, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the action (required)
        :param str field: An action field (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.actions_id_field_get_with_http_info(id, field, **kwargs)  # noqa: E501
        else:
            (data) = self.actions_id_field_get_with_http_info(id, field, **kwargs)  # noqa: E501
            return data

    def actions_id_field_get_with_http_info(self, id, field, **kwargs):  # noqa: E501
        """Get a specific property of an action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.actions_id_field_get_with_http_info(id, field, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the action (required)
        :param str field: An action field (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'field']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actions_id_field_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `actions_id_field_get`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `actions_id_field_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'field' in params:
            path_params['field'] = params['field']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/actions/{id}/{field}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def actions_id_get(self, id, **kwargs):  # noqa: E501
        """Get information about an action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.actions_id_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the action (required)
        :param str display:
        :param str entities:
        :param str fields: all or a comma-separated list of action fields
        :param str member:
        :param str member_fields: all or a comma-separated list of member fields
        :param str member_creator: Whether to include the member object for the creator of the action
        :param str member_creator_fields: all or a comma-separated list of member fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.actions_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.actions_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def actions_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get information about an action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.actions_id_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the action (required)
        :param str display:
        :param str entities:
        :param str fields: all or a comma-separated list of action fields
        :param str member:
        :param str member_fields: all or a comma-separated list of member fields
        :param str member_creator: Whether to include the member object for the creator of the action
        :param str member_creator_fields: all or a comma-separated list of member fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'display', 'entities', 'fields', 'member', 'member_fields', 'member_creator', 'member_creator_fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actions_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `actions_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'display' in params:
            query_params.append(('display', params['display']))  # noqa: E501
        if 'entities' in params:
            query_params.append(('entities', params['entities']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'member' in params:
            query_params.append(('member', params['member']))  # noqa: E501
        if 'member_fields' in params:
            query_params.append(('member_fields', params['member_fields']))  # noqa: E501
        if 'member_creator' in params:
            query_params.append(('memberCreator', params['member_creator']))  # noqa: E501
        if 'member_creator_fields' in params:
            query_params.append(('memberCreator_fields', params['member_creator_fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/actions/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def actions_id_list_get(self, id, **kwargs):  # noqa: E501
        """Get the list for an action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.actions_id_list_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the action (required)
        :param str fields: all or a comma-separated list of list fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.actions_id_list_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.actions_id_list_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def actions_id_list_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the list for an action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.actions_id_list_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the action (required)
        :param str fields: all or a comma-separated list of list fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actions_id_list_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `actions_id_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/actions/{id}/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def actions_id_member_creator_get(self, id, **kwargs):  # noqa: E501
        """Gets the member who created the action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.actions_id_member_creator_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the action (required)
        :param str fields: all or a comma-separated list of member fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.actions_id_member_creator_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.actions_id_member_creator_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def actions_id_member_creator_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Gets the member who created the action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.actions_id_member_creator_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the action (required)
        :param str fields: all or a comma-separated list of member fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actions_id_member_creator_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `actions_id_member_creator_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/actions/{id}/memberCreator', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def actions_id_member_get(self, id, **kwargs):  # noqa: E501
        """Gets the member of an action (not the creator)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.actions_id_member_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the action (required)
        :param str fields: all or a comma-separated list of member fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.actions_id_member_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.actions_id_member_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def actions_id_member_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Gets the member of an action (not the creator)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.actions_id_member_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the action (required)
        :param str fields: all or a comma-separated list of member fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actions_id_member_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `actions_id_member_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/actions/{id}/member', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def actions_id_organization_get(self, id, **kwargs):  # noqa: E501
        """Get the organization of an action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.actions_id_organization_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the action (required)
        :param str fields: all or a comma-separated list of organization fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.actions_id_organization_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.actions_id_organization_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def actions_id_organization_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the organization of an action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.actions_id_organization_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the action (required)
        :param str fields: all or a comma-separated list of organization fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actions_id_organization_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `actions_id_organization_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/actions/{id}/organization', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def actions_id_put(self, id, text, **kwargs):  # noqa: E501
        """Update a comment action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.actions_id_put(id, text, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the action to update (required)
        :param str text: The new text for the comment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.actions_id_put_with_http_info(id, text, **kwargs)  # noqa: E501
        else:
            (data) = self.actions_id_put_with_http_info(id, text, **kwargs)  # noqa: E501
            return data

    def actions_id_put_with_http_info(self, id, text, **kwargs):  # noqa: E501
        """Update a comment action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.actions_id_put_with_http_info(id, text, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the action to update (required)
        :param str text: The new text for the comment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'text']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actions_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `actions_id_put`")  # noqa: E501
        # verify the required parameter 'text' is set
        if ('text' not in params or
                params['text'] is None):
            raise ValueError("Missing the required parameter `text` when calling `actions_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'text' in params:
            query_params.append(('text', params['text']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/actions/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def actions_id_text_put(self, id, value, **kwargs):  # noqa: E501
        """Update a comment action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.actions_id_text_put(id, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the action to update (required)
        :param str value: The new text for the comment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.actions_id_text_put_with_http_info(id, value, **kwargs)  # noqa: E501
        else:
            (data) = self.actions_id_text_put_with_http_info(id, value, **kwargs)  # noqa: E501
            return data

    def actions_id_text_put_with_http_info(self, id, value, **kwargs):  # noqa: E501
        """Update a comment action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.actions_id_text_put_with_http_info(id, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the action to update (required)
        :param str value: The new text for the comment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actions_id_text_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `actions_id_text_put`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `actions_id_text_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/actions/{id}/text', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def batch_get(self, urls, **kwargs):  # noqa: E501
        """batch_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.batch_get(urls, async=True)
        >>> result = thread.get()

        :param async bool
        :param str urls: A list of API routes. Maximum of 10 routes allowed. The routes should begin with a forward slash and should not include the API version number - e.g. \"urls=/members/trello,/cards/[cardId]\" (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.batch_get_with_http_info(urls, **kwargs)  # noqa: E501
        else:
            (data) = self.batch_get_with_http_info(urls, **kwargs)  # noqa: E501
            return data

    def batch_get_with_http_info(self, urls, **kwargs):  # noqa: E501
        """batch_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.batch_get_with_http_info(urls, async=True)
        >>> result = thread.get()

        :param async bool
        :param str urls: A list of API routes. Maximum of 10 routes allowed. The routes should begin with a forward slash and should not include the API version number - e.g. \"urls=/members/trello,/cards/[cardId]\" (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['urls']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'urls' is set
        if ('urls' not in params or
                params['urls'] is None):
            raise ValueError("Missing the required parameter `urls` when calling `batch_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'urls' in params:
            query_params.append(('urls', params['urls']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/batch', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_actions_get(self, board_id, **kwargs):  # noqa: E501
        """boards_id_actions_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_actions_get(board_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str board_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_actions_get_with_http_info(board_id, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_actions_get_with_http_info(board_id, **kwargs)  # noqa: E501
            return data

    def boards_id_actions_get_with_http_info(self, board_id, **kwargs):  # noqa: E501
        """boards_id_actions_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_actions_get_with_http_info(board_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str board_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['board_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_actions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'board_id' is set
        if ('board_id' not in params or
                params['board_id'] is None):
            raise ValueError("Missing the required parameter `board_id` when calling `boards_id_actions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'board_id' in params:
            path_params['boardId'] = params['board_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/actions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_board_plugins_get(self, id, **kwargs):  # noqa: E501
        """Get the enabled Power-Ups on a board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_board_plugins_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the board (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_board_plugins_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_board_plugins_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def boards_id_board_plugins_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the enabled Power-Ups on a board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_board_plugins_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the board (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_board_plugins_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_board_plugins_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/boardPlugins', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_board_plugins_id_plugin_delete(self, id, id_plugin, **kwargs):  # noqa: E501
        """Disable a Power-Up on a board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_board_plugins_id_plugin_delete(id, id_plugin, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the board (required)
        :param str id_plugin: The ID of the Power-Up to disable (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_board_plugins_id_plugin_delete_with_http_info(id, id_plugin, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_board_plugins_id_plugin_delete_with_http_info(id, id_plugin, **kwargs)  # noqa: E501
            return data

    def boards_id_board_plugins_id_plugin_delete_with_http_info(self, id, id_plugin, **kwargs):  # noqa: E501
        """Disable a Power-Up on a board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_board_plugins_id_plugin_delete_with_http_info(id, id_plugin, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the board (required)
        :param str id_plugin: The ID of the Power-Up to disable (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_plugin']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_board_plugins_id_plugin_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_board_plugins_id_plugin_delete`")  # noqa: E501
        # verify the required parameter 'id_plugin' is set
        if ('id_plugin' not in params or
                params['id_plugin'] is None):
            raise ValueError("Missing the required parameter `id_plugin` when calling `boards_id_board_plugins_id_plugin_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_plugin' in params:
            path_params['idPlugin'] = params['id_plugin']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/boardPlugins/{idPlugin}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_board_plugins_post(self, id, **kwargs):  # noqa: E501
        """Enable a Power-Up on a board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_board_plugins_post(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the board (required)
        :param str id_plugin: The ID of the Power-Up to enable
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_board_plugins_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_board_plugins_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def boards_id_board_plugins_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """Enable a Power-Up on a board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_board_plugins_post_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the board (required)
        :param str id_plugin: The ID of the Power-Up to enable
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_plugin']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_board_plugins_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_board_plugins_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id_plugin' in params:
            query_params.append(('idPlugin', params['id_plugin']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/boardPlugins', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_board_stars_get(self, board_id, filter, **kwargs):  # noqa: E501
        """boards_id_board_stars_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_board_stars_get(board_id, filter, async=True)
        >>> result = thread.get()

        :param async bool
        :param str board_id: (required)
        :param str filter: Valid values: mine, none (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_board_stars_get_with_http_info(board_id, filter, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_board_stars_get_with_http_info(board_id, filter, **kwargs)  # noqa: E501
            return data

    def boards_id_board_stars_get_with_http_info(self, board_id, filter, **kwargs):  # noqa: E501
        """boards_id_board_stars_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_board_stars_get_with_http_info(board_id, filter, async=True)
        >>> result = thread.get()

        :param async bool
        :param str board_id: (required)
        :param str filter: Valid values: mine, none (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['board_id', 'filter']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_board_stars_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'board_id' is set
        if ('board_id' not in params or
                params['board_id'] is None):
            raise ValueError("Missing the required parameter `board_id` when calling `boards_id_board_stars_get`")  # noqa: E501
        # verify the required parameter 'filter' is set
        if ('filter' not in params or
                params['filter'] is None):
            raise ValueError("Missing the required parameter `filter` when calling `boards_id_board_stars_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'board_id' in params:
            path_params['boardId'] = params['board_id']  # noqa: E501
        if 'filter' in params:
            path_params['filter'] = params['filter']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/boardStars', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_calendar_key_generate_post(self, id, **kwargs):  # noqa: E501
        """Create a new board.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_calendar_key_generate_post(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_calendar_key_generate_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_calendar_key_generate_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def boards_id_calendar_key_generate_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """Create a new board.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_calendar_key_generate_post_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_calendar_key_generate_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_calendar_key_generate_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/calendarKey/generate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_cards_card_id_get(self, id, id_card, **kwargs):  # noqa: E501
        """boards_id_cards_card_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_cards_card_id_get(id, id_card, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the board (required)
        :param str id_card: The id the card to retrieve. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_cards_card_id_get_with_http_info(id, id_card, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_cards_card_id_get_with_http_info(id, id_card, **kwargs)  # noqa: E501
            return data

    def boards_id_cards_card_id_get_with_http_info(self, id, id_card, **kwargs):  # noqa: E501
        """boards_id_cards_card_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_cards_card_id_get_with_http_info(id, id_card, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the board (required)
        :param str id_card: The id the card to retrieve. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_card']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_cards_card_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_cards_card_id_get`")  # noqa: E501
        # verify the required parameter 'id_card' is set
        if ('id_card' not in params or
                params['id_card'] is None):
            raise ValueError("Missing the required parameter `id_card` when calling `boards_id_cards_card_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_card' in params:
            path_params['idCard'] = params['id_card']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/cards/{cardId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_cards_filter_get(self, board_id, filter, **kwargs):  # noqa: E501
        """boards_id_cards_filter_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_cards_filter_get(board_id, filter, async=True)
        >>> result = thread.get()

        :param async bool
        :param str board_id: (required)
        :param str filter: Valid Values: all, closed, none, open, visible. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_cards_filter_get_with_http_info(board_id, filter, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_cards_filter_get_with_http_info(board_id, filter, **kwargs)  # noqa: E501
            return data

    def boards_id_cards_filter_get_with_http_info(self, board_id, filter, **kwargs):  # noqa: E501
        """boards_id_cards_filter_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_cards_filter_get_with_http_info(board_id, filter, async=True)
        >>> result = thread.get()

        :param async bool
        :param str board_id: (required)
        :param str filter: Valid Values: all, closed, none, open, visible. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['board_id', 'filter']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_cards_filter_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'board_id' is set
        if ('board_id' not in params or
                params['board_id'] is None):
            raise ValueError("Missing the required parameter `board_id` when calling `boards_id_cards_filter_get`")  # noqa: E501
        # verify the required parameter 'filter' is set
        if ('filter' not in params or
                params['filter'] is None):
            raise ValueError("Missing the required parameter `filter` when calling `boards_id_cards_filter_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'board_id' in params:
            path_params['boardId'] = params['board_id']  # noqa: E501
        if 'filter' in params:
            path_params['filter'] = params['filter']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/cards/{filter}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_cards_get(self, id, **kwargs):  # noqa: E501
        """boards_id_cards_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_cards_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_cards_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_cards_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def boards_id_cards_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """boards_id_cards_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_cards_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_cards_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_cards_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/cards', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_checklists_get(self, id, **kwargs):  # noqa: E501
        """boards_id_checklists_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_checklists_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the board (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_checklists_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_checklists_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def boards_id_checklists_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """boards_id_checklists_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_checklists_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the board (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_checklists_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_checklists_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/checklists', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_checklists_post(self, id, **kwargs):  # noqa: E501
        """Create a new checklist.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_checklists_post(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_checklists_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_checklists_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def boards_id_checklists_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """Create a new checklist.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_checklists_post_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_checklists_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_checklists_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/checklists', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_custom_fields_get(self, id, **kwargs):  # noqa: E501
        """Get the Custom Field Definitions that exist on a board.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_custom_fields_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the board (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_custom_fields_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_custom_fields_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def boards_id_custom_fields_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the Custom Field Definitions that exist on a board.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_custom_fields_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the board (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_custom_fields_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_custom_fields_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/customFields', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_delete(self, id, **kwargs):  # noqa: E501
        """Delete a board.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_delete(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def boards_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a board.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_delete_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_email_key_generate_post(self, id, **kwargs):  # noqa: E501
        """boards_id_email_key_generate_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_email_key_generate_post(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_email_key_generate_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_email_key_generate_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def boards_id_email_key_generate_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """boards_id_email_key_generate_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_email_key_generate_post_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_email_key_generate_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_email_key_generate_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/emailKey/generate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_field_get(self, id, field, **kwargs):  # noqa: E501
        """boards_id_field_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_field_get(id, field, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the board. (required)
        :param str field: The field you'd like to receive. Valid values: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed, url. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_field_get_with_http_info(id, field, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_field_get_with_http_info(id, field, **kwargs)  # noqa: E501
            return data

    def boards_id_field_get_with_http_info(self, id, field, **kwargs):  # noqa: E501
        """boards_id_field_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_field_get_with_http_info(id, field, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the board. (required)
        :param str field: The field you'd like to receive. Valid values: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed, url. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'field']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_field_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_field_get`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `boards_id_field_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'field' in params:
            path_params['field'] = params['field']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/{field}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_get(self, id, **kwargs):  # noqa: E501
        """Request a single board.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str actions: This is a nested resource. Read more about actions as nested resources here.
        :param str board_stars: Valid values are one of: mine or none.
        :param str cards: This is a nested resource. Read more about cards as nested resources here.
        :param str card_plugin_data: Use with the cards param to include card pluginData with the response
        :param str checklists: This is a nested resource. Read more about checklists as nested resources here.
        :param str custom_fields: This is a nested resource. Read more about custom fields as nested resources here.
        :param str fields: The fields of the board to be included in the response. Valid values: all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed, url
        :param str labels: This is a nested resource. Read more about labels as nested resources here.
        :param str lists: This is a nested resource. Read more about lists as nested resources here.
        :param str members: This is a nested resource. Read more about members as nested resources here.
        :param str memberships: This is a nested resource. Read more about memberships as nested resources here.
        :param str members_invited: Returns a list of member objects representing members who been invited to be a member of the board. One of: admins, all, none, normal, owners
        :param str members_invited_fields: The member fields to be included in the membersInvited response. Valid values: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url, username
        :param str plugin_data: Determines whether the pluginData for this board should be returned. Valid values: true or false.
        :param str organization: This is a nested resource. Read more about organizations as nested resources here.
        :param str organization_plugin_data: Use with the organization param to include organization pluginData with the response
        :param str my_prefs:
        :param str tags: Also known as collections, tags, refer to the collection(s) that a Board belongs to.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def boards_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Request a single board.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str actions: This is a nested resource. Read more about actions as nested resources here.
        :param str board_stars: Valid values are one of: mine or none.
        :param str cards: This is a nested resource. Read more about cards as nested resources here.
        :param str card_plugin_data: Use with the cards param to include card pluginData with the response
        :param str checklists: This is a nested resource. Read more about checklists as nested resources here.
        :param str custom_fields: This is a nested resource. Read more about custom fields as nested resources here.
        :param str fields: The fields of the board to be included in the response. Valid values: all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed, url
        :param str labels: This is a nested resource. Read more about labels as nested resources here.
        :param str lists: This is a nested resource. Read more about lists as nested resources here.
        :param str members: This is a nested resource. Read more about members as nested resources here.
        :param str memberships: This is a nested resource. Read more about memberships as nested resources here.
        :param str members_invited: Returns a list of member objects representing members who been invited to be a member of the board. One of: admins, all, none, normal, owners
        :param str members_invited_fields: The member fields to be included in the membersInvited response. Valid values: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url, username
        :param str plugin_data: Determines whether the pluginData for this board should be returned. Valid values: true or false.
        :param str organization: This is a nested resource. Read more about organizations as nested resources here.
        :param str organization_plugin_data: Use with the organization param to include organization pluginData with the response
        :param str my_prefs:
        :param str tags: Also known as collections, tags, refer to the collection(s) that a Board belongs to.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'actions', 'board_stars', 'cards', 'card_plugin_data', 'checklists', 'custom_fields', 'fields', 'labels', 'lists', 'members', 'memberships', 'members_invited', 'members_invited_fields', 'plugin_data', 'organization', 'organization_plugin_data', 'my_prefs', 'tags']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'actions' in params:
            query_params.append(('actions', params['actions']))  # noqa: E501
        if 'board_stars' in params:
            query_params.append(('boardStars', params['board_stars']))  # noqa: E501
        if 'cards' in params:
            query_params.append(('cards', params['cards']))  # noqa: E501
        if 'card_plugin_data' in params:
            query_params.append(('card_pluginData', params['card_plugin_data']))  # noqa: E501
        if 'checklists' in params:
            query_params.append(('checklists', params['checklists']))  # noqa: E501
        if 'custom_fields' in params:
            query_params.append(('customFields', params['custom_fields']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'labels' in params:
            query_params.append(('labels', params['labels']))  # noqa: E501
        if 'lists' in params:
            query_params.append(('lists', params['lists']))  # noqa: E501
        if 'members' in params:
            query_params.append(('members', params['members']))  # noqa: E501
        if 'memberships' in params:
            query_params.append(('memberships', params['memberships']))  # noqa: E501
        if 'members_invited' in params:
            query_params.append(('membersInvited', params['members_invited']))  # noqa: E501
        if 'members_invited_fields' in params:
            query_params.append(('membersInvited_fields', params['members_invited_fields']))  # noqa: E501
        if 'plugin_data' in params:
            query_params.append(('pluginData', params['plugin_data']))  # noqa: E501
        if 'organization' in params:
            query_params.append(('organization', params['organization']))  # noqa: E501
        if 'organization_plugin_data' in params:
            query_params.append(('organization_pluginData', params['organization_plugin_data']))  # noqa: E501
        if 'my_prefs' in params:
            query_params.append(('myPrefs', params['my_prefs']))  # noqa: E501
        if 'tags' in params:
            query_params.append(('tags', params['tags']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_id_tags_post(self, id, value, **kwargs):  # noqa: E501
        """boards_id_id_tags_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_id_tags_post(id, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :param str value: The id of a tag from the organization to which this board belongs. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_id_tags_post_with_http_info(id, value, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_id_tags_post_with_http_info(id, value, **kwargs)  # noqa: E501
            return data

    def boards_id_id_tags_post_with_http_info(self, id, value, **kwargs):  # noqa: E501
        """boards_id_id_tags_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_id_tags_post_with_http_info(id, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :param str value: The id of a tag from the organization to which this board belongs. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_id_tags_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_id_tags_post`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `boards_id_id_tags_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/idTags', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_labels_get(self, id, **kwargs):  # noqa: E501
        """boards_id_labels_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_labels_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the board (required)
        :param str fields: all or a comma-separated list of label fields
        :param str limit: 0 to 1000
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_labels_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_labels_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def boards_id_labels_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """boards_id_labels_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_labels_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the board (required)
        :param str fields: all or a comma-separated list of label fields
        :param str limit: 0 to 1000
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields', 'limit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_labels_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_labels_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/labels', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_labels_post(self, id, name, color, **kwargs):  # noqa: E501
        """boards_id_labels_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_labels_post(id, name, color, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :param str name: The name of the label to be created. 1 to 16384 characters long. (required)
        :param str color: Sets the color of the new label. Valid values are a label color or null. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_labels_post_with_http_info(id, name, color, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_labels_post_with_http_info(id, name, color, **kwargs)  # noqa: E501
            return data

    def boards_id_labels_post_with_http_info(self, id, name, color, **kwargs):  # noqa: E501
        """boards_id_labels_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_labels_post_with_http_info(id, name, color, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :param str name: The name of the label to be created. 1 to 16384 characters long. (required)
        :param str color: Sets the color of the new label. Valid values are a label color or null. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'color']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_labels_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_labels_post`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `boards_id_labels_post`")  # noqa: E501
        # verify the required parameter 'color' is set
        if ('color' not in params or
                params['color'] is None):
            raise ValueError("Missing the required parameter `color` when calling `boards_id_labels_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'color' in params:
            query_params.append(('color', params['color']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/labels', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_lists_filter_get(self, id, filter, **kwargs):  # noqa: E501
        """boards_id_lists_filter_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_lists_filter_get(id, filter, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the board (required)
        :param str filter: One of all, closed, none, open (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_lists_filter_get_with_http_info(id, filter, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_lists_filter_get_with_http_info(id, filter, **kwargs)  # noqa: E501
            return data

    def boards_id_lists_filter_get_with_http_info(self, id, filter, **kwargs):  # noqa: E501
        """boards_id_lists_filter_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_lists_filter_get_with_http_info(id, filter, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the board (required)
        :param str filter: One of all, closed, none, open (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_lists_filter_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_lists_filter_get`")  # noqa: E501
        # verify the required parameter 'filter' is set
        if ('filter' not in params or
                params['filter'] is None):
            raise ValueError("Missing the required parameter `filter` when calling `boards_id_lists_filter_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'filter' in params:
            path_params['filter'] = params['filter']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/lists/{filter}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_lists_get(self, id, **kwargs):  # noqa: E501
        """boards_id_lists_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_lists_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the board (required)
        :param str cards: One of: all, closed, none, open
        :param str card_fields: all or a comma-separated list of card fields
        :param str filter: One of all, closed, none, open
        :param str fields: all or a comma-separated list of list fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_lists_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_lists_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def boards_id_lists_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """boards_id_lists_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_lists_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the board (required)
        :param str cards: One of: all, closed, none, open
        :param str card_fields: all or a comma-separated list of card fields
        :param str filter: One of all, closed, none, open
        :param str fields: all or a comma-separated list of list fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'cards', 'card_fields', 'filter', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_lists_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_lists_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'cards' in params:
            query_params.append(('cards', params['cards']))  # noqa: E501
        if 'card_fields' in params:
            query_params.append(('card_fields', params['card_fields']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/lists', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_lists_post(self, id, name, **kwargs):  # noqa: E501
        """boards_id_lists_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_lists_post(id, name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :param str name: The name of the list to be created. 1 to 16384 characters long. (required)
        :param str pos: Determines the position of the list. Valid values: top, bottom, or a positive number.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_lists_post_with_http_info(id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_lists_post_with_http_info(id, name, **kwargs)  # noqa: E501
            return data

    def boards_id_lists_post_with_http_info(self, id, name, **kwargs):  # noqa: E501
        """boards_id_lists_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_lists_post_with_http_info(id, name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :param str name: The name of the list to be created. 1 to 16384 characters long. (required)
        :param str pos: Determines the position of the list. Valid values: top, bottom, or a positive number.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'pos']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_lists_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_lists_post`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `boards_id_lists_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'pos' in params:
            query_params.append(('pos', params['pos']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/lists', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_marked_as_viewed_post(self, id, **kwargs):  # noqa: E501
        """boards_id_marked_as_viewed_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_marked_as_viewed_post(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_marked_as_viewed_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_marked_as_viewed_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def boards_id_marked_as_viewed_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """boards_id_marked_as_viewed_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_marked_as_viewed_post_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_marked_as_viewed_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_marked_as_viewed_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/markedAsViewed', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_members_get(self, id, **kwargs):  # noqa: E501
        """Get the members for a board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_members_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the board (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_members_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_members_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def boards_id_members_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the members for a board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_members_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the board (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_members_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_members_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_members_id_member_delete(self, id, id_member, **kwargs):  # noqa: E501
        """boards_id_members_id_member_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_members_id_member_delete(id, id_member, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :param str id_member: The id, username, or organization name of the user to be removed from the board. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_members_id_member_delete_with_http_info(id, id_member, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_members_id_member_delete_with_http_info(id, id_member, **kwargs)  # noqa: E501
            return data

    def boards_id_members_id_member_delete_with_http_info(self, id, id_member, **kwargs):  # noqa: E501
        """boards_id_members_id_member_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_members_id_member_delete_with_http_info(id, id_member, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :param str id_member: The id, username, or organization name of the user to be removed from the board. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_member']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_members_id_member_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_members_id_member_delete`")  # noqa: E501
        # verify the required parameter 'id_member' is set
        if ('id_member' not in params or
                params['id_member'] is None):
            raise ValueError("Missing the required parameter `id_member` when calling `boards_id_members_id_member_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_member' in params:
            path_params['idMember'] = params['id_member']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/members/{idMember}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_members_id_member_put(self, id, id_member, type, **kwargs):  # noqa: E501
        """Add a member to the board.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_members_id_member_put(id, id_member, type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :param str id_member: The id of the member to add to the board. (required)
        :param str type: One of: admin, normal, observer. Determines the type of member this user will be on the board. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_members_id_member_put_with_http_info(id, id_member, type, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_members_id_member_put_with_http_info(id, id_member, type, **kwargs)  # noqa: E501
            return data

    def boards_id_members_id_member_put_with_http_info(self, id, id_member, type, **kwargs):  # noqa: E501
        """Add a member to the board.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_members_id_member_put_with_http_info(id, id_member, type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :param str id_member: The id of the member to add to the board. (required)
        :param str type: One of: admin, normal, observer. Determines the type of member this user will be on the board. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_member', 'type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_members_id_member_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_members_id_member_put`")  # noqa: E501
        # verify the required parameter 'id_member' is set
        if ('id_member' not in params or
                params['id_member'] is None):
            raise ValueError("Missing the required parameter `id_member` when calling `boards_id_members_id_member_put`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `boards_id_members_id_member_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_member' in params:
            path_params['idMember'] = params['id_member']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/members/{idMember}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_members_put(self, id, email, **kwargs):  # noqa: E501
        """Update an existing board by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_members_put(id, email, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :param str email: The email address of a user to add as a member of the board. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_members_put_with_http_info(id, email, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_members_put_with_http_info(id, email, **kwargs)  # noqa: E501
            return data

    def boards_id_members_put_with_http_info(self, id, email, **kwargs):  # noqa: E501
        """Update an existing board by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_members_put_with_http_info(id, email, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :param str email: The email address of a user to add as a member of the board. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'email']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_members_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_members_put`")  # noqa: E501
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `boards_id_members_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/members', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_memberships_get(self, id, **kwargs):  # noqa: E501
        """Get information about the memberships users have to the board.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_memberships_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the board (required)
        :param str filter: One of admins, all, none, normal
        :param str activity: Works for premium organizations only.
        :param str org_member_type: Shows the type of member to the org the user is. For instance, an org admin will have a orgMemberType of admin.
        :param str member: Determines whether to include a nester member object.
        :param str member_fields: Fields to show if member=true. Valid values: nested member resource fields.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_memberships_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_memberships_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def boards_id_memberships_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get information about the memberships users have to the board.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_memberships_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the board (required)
        :param str filter: One of admins, all, none, normal
        :param str activity: Works for premium organizations only.
        :param str org_member_type: Shows the type of member to the org the user is. For instance, an org admin will have a orgMemberType of admin.
        :param str member: Determines whether to include a nester member object.
        :param str member_fields: Fields to show if member=true. Valid values: nested member resource fields.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter', 'activity', 'org_member_type', 'member', 'member_fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_memberships_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_memberships_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'activity' in params:
            query_params.append(('activity', params['activity']))  # noqa: E501
        if 'org_member_type' in params:
            query_params.append(('orgMemberType', params['org_member_type']))  # noqa: E501
        if 'member' in params:
            query_params.append(('member', params['member']))  # noqa: E501
        if 'member_fields' in params:
            query_params.append(('member_fields', params['member_fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/memberships', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_memberships_id_membership_put(self, id, id_membership, type, **kwargs):  # noqa: E501
        """Update an existing board by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_memberships_id_membership_put(id, id_membership, type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :param str id_membership: The id of a membership that should be added to this board. (required)
        :param str type: One of: admin, normal, observer. Determines the type of member that this membership will be to this board. (required)
        :param str member_fields: Valid values: all, avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url, username
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_memberships_id_membership_put_with_http_info(id, id_membership, type, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_memberships_id_membership_put_with_http_info(id, id_membership, type, **kwargs)  # noqa: E501
            return data

    def boards_id_memberships_id_membership_put_with_http_info(self, id, id_membership, type, **kwargs):  # noqa: E501
        """Update an existing board by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_memberships_id_membership_put_with_http_info(id, id_membership, type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :param str id_membership: The id of a membership that should be added to this board. (required)
        :param str type: One of: admin, normal, observer. Determines the type of member that this membership will be to this board. (required)
        :param str member_fields: Valid values: all, avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url, username
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_membership', 'type', 'member_fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_memberships_id_membership_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_memberships_id_membership_put`")  # noqa: E501
        # verify the required parameter 'id_membership' is set
        if ('id_membership' not in params or
                params['id_membership'] is None):
            raise ValueError("Missing the required parameter `id_membership` when calling `boards_id_memberships_id_membership_put`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `boards_id_memberships_id_membership_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id_membership' in params:
            query_params.append(('idMembership', params['id_membership']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'member_fields' in params:
            query_params.append(('member_fields', params['member_fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/memberships/{idMembership}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_my_prefs_email_position_put(self, id, value, **kwargs):  # noqa: E501
        """Update an existing board by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_my_prefs_email_position_put(id, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :param str value: Valid values: bottom, top. Determines the position of the email address. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_my_prefs_email_position_put_with_http_info(id, value, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_my_prefs_email_position_put_with_http_info(id, value, **kwargs)  # noqa: E501
            return data

    def boards_id_my_prefs_email_position_put_with_http_info(self, id, value, **kwargs):  # noqa: E501
        """Update an existing board by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_my_prefs_email_position_put_with_http_info(id, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :param str value: Valid values: bottom, top. Determines the position of the email address. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_my_prefs_email_position_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_my_prefs_email_position_put`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `boards_id_my_prefs_email_position_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/myPrefs/emailPosition', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_my_prefs_id_email_list_put(self, id, value, **kwargs):  # noqa: E501
        """Update an existing board by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_my_prefs_id_email_list_put(id, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :param str value: The id of an email list. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_my_prefs_id_email_list_put_with_http_info(id, value, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_my_prefs_id_email_list_put_with_http_info(id, value, **kwargs)  # noqa: E501
            return data

    def boards_id_my_prefs_id_email_list_put_with_http_info(self, id, value, **kwargs):  # noqa: E501
        """Update an existing board by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_my_prefs_id_email_list_put_with_http_info(id, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :param str value: The id of an email list. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_my_prefs_id_email_list_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_my_prefs_id_email_list_put`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `boards_id_my_prefs_id_email_list_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/myPrefs/idEmailList', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_my_prefs_show_list_guide_put(self, id, value, **kwargs):  # noqa: E501
        """Update an existing board by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_my_prefs_show_list_guide_put(id, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :param str value: Determines whether to show the list guide. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_my_prefs_show_list_guide_put_with_http_info(id, value, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_my_prefs_show_list_guide_put_with_http_info(id, value, **kwargs)  # noqa: E501
            return data

    def boards_id_my_prefs_show_list_guide_put_with_http_info(self, id, value, **kwargs):  # noqa: E501
        """Update an existing board by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_my_prefs_show_list_guide_put_with_http_info(id, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :param str value: Determines whether to show the list guide. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_my_prefs_show_list_guide_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_my_prefs_show_list_guide_put`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `boards_id_my_prefs_show_list_guide_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/myPrefs/showListGuide', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_my_prefs_show_sidebar_activity_put(self, id, value, **kwargs):  # noqa: E501
        """Update an existing board by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_my_prefs_show_sidebar_activity_put(id, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :param str value: Determines whether to show sidebar activity. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_my_prefs_show_sidebar_activity_put_with_http_info(id, value, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_my_prefs_show_sidebar_activity_put_with_http_info(id, value, **kwargs)  # noqa: E501
            return data

    def boards_id_my_prefs_show_sidebar_activity_put_with_http_info(self, id, value, **kwargs):  # noqa: E501
        """Update an existing board by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_my_prefs_show_sidebar_activity_put_with_http_info(id, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :param str value: Determines whether to show sidebar activity. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_my_prefs_show_sidebar_activity_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_my_prefs_show_sidebar_activity_put`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `boards_id_my_prefs_show_sidebar_activity_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/myPrefs/showSidebarActivity', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_my_prefs_show_sidebar_board_actions_put(self, id, value, **kwargs):  # noqa: E501
        """Update an existing board by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_my_prefs_show_sidebar_board_actions_put(id, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :param str value: Determines whether to show the sidebar board actions. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_my_prefs_show_sidebar_board_actions_put_with_http_info(id, value, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_my_prefs_show_sidebar_board_actions_put_with_http_info(id, value, **kwargs)  # noqa: E501
            return data

    def boards_id_my_prefs_show_sidebar_board_actions_put_with_http_info(self, id, value, **kwargs):  # noqa: E501
        """Update an existing board by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_my_prefs_show_sidebar_board_actions_put_with_http_info(id, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :param str value: Determines whether to show the sidebar board actions. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_my_prefs_show_sidebar_board_actions_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_my_prefs_show_sidebar_board_actions_put`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `boards_id_my_prefs_show_sidebar_board_actions_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/myPrefs/showSidebarBoardActions', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_my_prefs_show_sidebar_members_put(self, id, value, **kwargs):  # noqa: E501
        """Update an existing board by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_my_prefs_show_sidebar_members_put(id, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :param str value: Determines whether to show members of the board in the sidebar. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_my_prefs_show_sidebar_members_put_with_http_info(id, value, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_my_prefs_show_sidebar_members_put_with_http_info(id, value, **kwargs)  # noqa: E501
            return data

    def boards_id_my_prefs_show_sidebar_members_put_with_http_info(self, id, value, **kwargs):  # noqa: E501
        """Update an existing board by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_my_prefs_show_sidebar_members_put_with_http_info(id, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :param str value: Determines whether to show members of the board in the sidebar. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_my_prefs_show_sidebar_members_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_my_prefs_show_sidebar_members_put`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `boards_id_my_prefs_show_sidebar_members_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/myPrefs/showSidebarMembers', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_my_prefs_show_sidebar_put(self, id, value, **kwargs):  # noqa: E501
        """Update an existing board by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_my_prefs_show_sidebar_put(id, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :param str value: Determines whether to show the side bar. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_my_prefs_show_sidebar_put_with_http_info(id, value, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_my_prefs_show_sidebar_put_with_http_info(id, value, **kwargs)  # noqa: E501
            return data

    def boards_id_my_prefs_show_sidebar_put_with_http_info(self, id, value, **kwargs):  # noqa: E501
        """Update an existing board by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_my_prefs_show_sidebar_put_with_http_info(id, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :param str value: Determines whether to show the side bar. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_my_prefs_show_sidebar_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_my_prefs_show_sidebar_put`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `boards_id_my_prefs_show_sidebar_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/myPrefs/showSidebar', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_plugins_get(self, id, **kwargs):  # noqa: E501
        """List the Power-Ups for a board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_plugins_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the board (required)
        :param str filter: One of: enabled or available
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_plugins_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_plugins_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def boards_id_plugins_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """List the Power-Ups for a board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_plugins_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the board (required)
        :param str filter: One of: enabled or available
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_plugins_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_plugins_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/plugins', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_power_ups_post(self, id, value, **kwargs):  # noqa: E501
        """boards_id_power_ups_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_power_ups_post(id, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :param str value: The Power-Up to be enabled on the board. One of: calendar, cardAging, recap, voting. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_power_ups_post_with_http_info(id, value, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_power_ups_post_with_http_info(id, value, **kwargs)  # noqa: E501
            return data

    def boards_id_power_ups_post_with_http_info(self, id, value, **kwargs):  # noqa: E501
        """boards_id_power_ups_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_power_ups_post_with_http_info(id, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :param str value: The Power-Up to be enabled on the board. One of: calendar, cardAging, recap, voting. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_power_ups_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_power_ups_post`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `boards_id_power_ups_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/powerUps', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_power_ups_power_up_delete(self, id, power_up, **kwargs):  # noqa: E501
        """boards_id_power_ups_power_up_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_power_ups_power_up_delete(id, power_up, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :param str power_up: The Power-Up to be enabled on the board. One of: calendar, cardAging, recap, voting. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_power_ups_power_up_delete_with_http_info(id, power_up, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_power_ups_power_up_delete_with_http_info(id, power_up, **kwargs)  # noqa: E501
            return data

    def boards_id_power_ups_power_up_delete_with_http_info(self, id, power_up, **kwargs):  # noqa: E501
        """boards_id_power_ups_power_up_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_power_ups_power_up_delete_with_http_info(id, power_up, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :param str power_up: The Power-Up to be enabled on the board. One of: calendar, cardAging, recap, voting. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'power_up']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_power_ups_power_up_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_power_ups_power_up_delete`")  # noqa: E501
        # verify the required parameter 'power_up' is set
        if ('power_up' not in params or
                params['power_up'] is None):
            raise ValueError("Missing the required parameter `power_up` when calling `boards_id_power_ups_power_up_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'power_up' in params:
            path_params['powerUp'] = params['power_up']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/powerUps/{powerUp}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_put(self, id, **kwargs):  # noqa: E501
        """Update an existing board by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_put(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :param str name: The new name for the board. 1 to 16384 characters long.
        :param str desc: A new description for the board, 0 to 16384 characters long
        :param str closed: Whether the board is closed
        :param str subscribed: Whether the acting user is subscribed to the board
        :param str id_organization: The id of the team the board should be moved to
        :param str prefspermission_level: One of: org, private, public
        :param str prefsself_join: Whether team members can join the board themselves
        :param str prefscard_covers: Whether card covers should be displayed on this board
        :param str prefsinvitations: Who can invite people to this board. One of: admins, members
        :param str prefsvoting: Who can vote on this board. One of disabled, members, observers, org, public
        :param str prefscomments: Who can comment on cards on this board. One of: disabled, members, observers, org, public
        :param str prefsbackground: The id of a custom background or one of: blue, orange, green, red, purple, pink, lime, sky, grey
        :param str prefscard_aging: One of: pirate, regular
        :param str prefscalendar_feed_enabled: Determines whether the calendar feed is enabled or not.
        :param str label_namesgreen: Name for the green label. 1 to 16384 characters long
        :param str label_namesyellow: Name for the yellow label. 1 to 16384 characters long
        :param str label_namesorange: Name for the orange label. 1 to 16384 characters long
        :param str label_namesred: Name for the red label. 1 to 16384 characters long
        :param str label_namespurple: Name for the purple label. 1 to 16384 characters long
        :param str label_namesblue: Name for the blue label. 1 to 16384 characters long
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def boards_id_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update an existing board by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_put_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the board to update (required)
        :param str name: The new name for the board. 1 to 16384 characters long.
        :param str desc: A new description for the board, 0 to 16384 characters long
        :param str closed: Whether the board is closed
        :param str subscribed: Whether the acting user is subscribed to the board
        :param str id_organization: The id of the team the board should be moved to
        :param str prefspermission_level: One of: org, private, public
        :param str prefsself_join: Whether team members can join the board themselves
        :param str prefscard_covers: Whether card covers should be displayed on this board
        :param str prefsinvitations: Who can invite people to this board. One of: admins, members
        :param str prefsvoting: Who can vote on this board. One of disabled, members, observers, org, public
        :param str prefscomments: Who can comment on cards on this board. One of: disabled, members, observers, org, public
        :param str prefsbackground: The id of a custom background or one of: blue, orange, green, red, purple, pink, lime, sky, grey
        :param str prefscard_aging: One of: pirate, regular
        :param str prefscalendar_feed_enabled: Determines whether the calendar feed is enabled or not.
        :param str label_namesgreen: Name for the green label. 1 to 16384 characters long
        :param str label_namesyellow: Name for the yellow label. 1 to 16384 characters long
        :param str label_namesorange: Name for the orange label. 1 to 16384 characters long
        :param str label_namesred: Name for the red label. 1 to 16384 characters long
        :param str label_namespurple: Name for the purple label. 1 to 16384 characters long
        :param str label_namesblue: Name for the blue label. 1 to 16384 characters long
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'desc', 'closed', 'subscribed', 'id_organization', 'prefspermission_level', 'prefsself_join', 'prefscard_covers', 'prefsinvitations', 'prefsvoting', 'prefscomments', 'prefsbackground', 'prefscard_aging', 'prefscalendar_feed_enabled', 'label_namesgreen', 'label_namesyellow', 'label_namesorange', 'label_namesred', 'label_namespurple', 'label_namesblue']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'desc' in params:
            query_params.append(('desc', params['desc']))  # noqa: E501
        if 'closed' in params:
            query_params.append(('closed', params['closed']))  # noqa: E501
        if 'subscribed' in params:
            query_params.append(('subscribed', params['subscribed']))  # noqa: E501
        if 'id_organization' in params:
            query_params.append(('idOrganization', params['id_organization']))  # noqa: E501
        if 'prefspermission_level' in params:
            query_params.append(('prefs/permissionLevel', params['prefspermission_level']))  # noqa: E501
        if 'prefsself_join' in params:
            query_params.append(('prefs/selfJoin', params['prefsself_join']))  # noqa: E501
        if 'prefscard_covers' in params:
            query_params.append(('prefs/cardCovers', params['prefscard_covers']))  # noqa: E501
        if 'prefsinvitations' in params:
            query_params.append(('prefs/invitations', params['prefsinvitations']))  # noqa: E501
        if 'prefsvoting' in params:
            query_params.append(('prefs/voting', params['prefsvoting']))  # noqa: E501
        if 'prefscomments' in params:
            query_params.append(('prefs/comments', params['prefscomments']))  # noqa: E501
        if 'prefsbackground' in params:
            query_params.append(('prefs/background', params['prefsbackground']))  # noqa: E501
        if 'prefscard_aging' in params:
            query_params.append(('prefs/cardAging', params['prefscard_aging']))  # noqa: E501
        if 'prefscalendar_feed_enabled' in params:
            query_params.append(('prefs/calendarFeedEnabled', params['prefscalendar_feed_enabled']))  # noqa: E501
        if 'label_namesgreen' in params:
            query_params.append(('labelNames/green', params['label_namesgreen']))  # noqa: E501
        if 'label_namesyellow' in params:
            query_params.append(('labelNames/yellow', params['label_namesyellow']))  # noqa: E501
        if 'label_namesorange' in params:
            query_params.append(('labelNames/orange', params['label_namesorange']))  # noqa: E501
        if 'label_namesred' in params:
            query_params.append(('labelNames/red', params['label_namesred']))  # noqa: E501
        if 'label_namespurple' in params:
            query_params.append(('labelNames/purple', params['label_namespurple']))  # noqa: E501
        if 'label_namesblue' in params:
            query_params.append(('labelNames/blue', params['label_namesblue']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_tags_get(self, id, **kwargs):  # noqa: E501
        """boards_id_tags_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_tags_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the board (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_id_tags_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_tags_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def boards_id_tags_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """boards_id_tags_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_id_tags_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the board (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_tags_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_tags_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/tags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_post(self, name, **kwargs):  # noqa: E501
        """Create a new board.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_post(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: The new name for the board. 1 to 16384 characters long. (required)
        :param str default_labels: Determines whether to use the default set of labels.
        :param str default_lists: Determines whether to add the default set of lists to a board (To Do, Doing, Done). It is ignored if idBoardSource is provided.
        :param str desc: A new description for the board, 0 to 16384 characters long
        :param str id_organization: The id or name of the team the board should belong to.
        :param str id_board_source: The id of a board to copy into the new board.
        :param str keep_from_source: To keep cards from the original board pass in the value cards
        :param str power_ups: The Power-Ups that should be enabled on the new board. One of: all, calendar, cardAging, recap, voting.
        :param str prefs_permission_level: The permissions level of the board. One of: org, private, public.
        :param str prefs_voting: Who can vote on this board. One of disabled, members, observers, org, public.
        :param str prefs_comments: Who can comment on cards on this board. One of: disabled, members, observers, org, public.
        :param str prefs_invitations: Determines what types of members can invite users to join. One of: admins, members.
        :param str prefs_self_join: Determines whether users can join the boards themselves or whether they have to be invited.
        :param str prefs_card_covers: Determines whether card covers are enabled.
        :param str prefs_background: The id of a custom background or one of: blue, orange, green, red, purple, pink, lime, sky, grey.
        :param str prefs_card_aging: Determines the type of card aging that should take place on the board if card aging is enabled. One of: pirate, regular.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.boards_post_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_post_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def boards_post_with_http_info(self, name, **kwargs):  # noqa: E501
        """Create a new board.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.boards_post_with_http_info(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: The new name for the board. 1 to 16384 characters long. (required)
        :param str default_labels: Determines whether to use the default set of labels.
        :param str default_lists: Determines whether to add the default set of lists to a board (To Do, Doing, Done). It is ignored if idBoardSource is provided.
        :param str desc: A new description for the board, 0 to 16384 characters long
        :param str id_organization: The id or name of the team the board should belong to.
        :param str id_board_source: The id of a board to copy into the new board.
        :param str keep_from_source: To keep cards from the original board pass in the value cards
        :param str power_ups: The Power-Ups that should be enabled on the new board. One of: all, calendar, cardAging, recap, voting.
        :param str prefs_permission_level: The permissions level of the board. One of: org, private, public.
        :param str prefs_voting: Who can vote on this board. One of disabled, members, observers, org, public.
        :param str prefs_comments: Who can comment on cards on this board. One of: disabled, members, observers, org, public.
        :param str prefs_invitations: Determines what types of members can invite users to join. One of: admins, members.
        :param str prefs_self_join: Determines whether users can join the boards themselves or whether they have to be invited.
        :param str prefs_card_covers: Determines whether card covers are enabled.
        :param str prefs_background: The id of a custom background or one of: blue, orange, green, red, purple, pink, lime, sky, grey.
        :param str prefs_card_aging: Determines the type of card aging that should take place on the board if card aging is enabled. One of: pirate, regular.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'default_labels', 'default_lists', 'desc', 'id_organization', 'id_board_source', 'keep_from_source', 'power_ups', 'prefs_permission_level', 'prefs_voting', 'prefs_comments', 'prefs_invitations', 'prefs_self_join', 'prefs_card_covers', 'prefs_background', 'prefs_card_aging']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `boards_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'default_labels' in params:
            query_params.append(('defaultLabels', params['default_labels']))  # noqa: E501
        if 'default_lists' in params:
            query_params.append(('defaultLists', params['default_lists']))  # noqa: E501
        if 'desc' in params:
            query_params.append(('desc', params['desc']))  # noqa: E501
        if 'id_organization' in params:
            query_params.append(('idOrganization', params['id_organization']))  # noqa: E501
        if 'id_board_source' in params:
            query_params.append(('idBoardSource', params['id_board_source']))  # noqa: E501
        if 'keep_from_source' in params:
            query_params.append(('keepFromSource', params['keep_from_source']))  # noqa: E501
        if 'power_ups' in params:
            query_params.append(('powerUps', params['power_ups']))  # noqa: E501
        if 'prefs_permission_level' in params:
            query_params.append(('prefs_permissionLevel', params['prefs_permission_level']))  # noqa: E501
        if 'prefs_voting' in params:
            query_params.append(('prefs_voting', params['prefs_voting']))  # noqa: E501
        if 'prefs_comments' in params:
            query_params.append(('prefs_comments', params['prefs_comments']))  # noqa: E501
        if 'prefs_invitations' in params:
            query_params.append(('prefs_invitations', params['prefs_invitations']))  # noqa: E501
        if 'prefs_self_join' in params:
            query_params.append(('prefs_selfJoin', params['prefs_self_join']))  # noqa: E501
        if 'prefs_card_covers' in params:
            query_params.append(('prefs_cardCovers', params['prefs_card_covers']))  # noqa: E501
        if 'prefs_background' in params:
            query_params.append(('prefs_background', params['prefs_background']))  # noqa: E501
        if 'prefs_card_aging' in params:
            query_params.append(('prefs_cardAging', params['prefs_card_aging']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/boards/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def card_id_card_custom_field_id_custom_field_item_put(self, id_card, id_custom_field, value, **kwargs):  # noqa: E501
        """Setting, updating, and removing the value for a Custom Field on a card.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.card_id_card_custom_field_id_custom_field_item_put(id_card, id_custom_field, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id_card: ID of the card that the Custom Field value should be set/updated for (required)
        :param str id_custom_field: ID of the Custom Field on the card. (required)
        :param str value: An object containing the key and value to set for the card's Custom Field value. The key used to set the value should match the type of Custom Field defined. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.card_id_card_custom_field_id_custom_field_item_put_with_http_info(id_card, id_custom_field, value, **kwargs)  # noqa: E501
        else:
            (data) = self.card_id_card_custom_field_id_custom_field_item_put_with_http_info(id_card, id_custom_field, value, **kwargs)  # noqa: E501
            return data

    def card_id_card_custom_field_id_custom_field_item_put_with_http_info(self, id_card, id_custom_field, value, **kwargs):  # noqa: E501
        """Setting, updating, and removing the value for a Custom Field on a card.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.card_id_card_custom_field_id_custom_field_item_put_with_http_info(id_card, id_custom_field, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id_card: ID of the card that the Custom Field value should be set/updated for (required)
        :param str id_custom_field: ID of the Custom Field on the card. (required)
        :param str value: An object containing the key and value to set for the card's Custom Field value. The key used to set the value should match the type of Custom Field defined. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_card', 'id_custom_field', 'value']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method card_id_card_custom_field_id_custom_field_item_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_card' is set
        if ('id_card' not in params or
                params['id_card'] is None):
            raise ValueError("Missing the required parameter `id_card` when calling `card_id_card_custom_field_id_custom_field_item_put`")  # noqa: E501
        # verify the required parameter 'id_custom_field' is set
        if ('id_custom_field' not in params or
                params['id_custom_field'] is None):
            raise ValueError("Missing the required parameter `id_custom_field` when calling `card_id_card_custom_field_id_custom_field_item_put`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `card_id_card_custom_field_id_custom_field_item_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_card' in params:
            path_params['idCard'] = params['id_card']  # noqa: E501
        if 'id_custom_field' in params:
            path_params['idCustomField'] = params['id_custom_field']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/card/{idCard}/customField/{idCustomField}/item', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_id_actions_comments_post(self, id, text, **kwargs):  # noqa: E501
        """Add a new comment to a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_actions_comments_post(id, text, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str text: The comment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_id_actions_comments_post_with_http_info(id, text, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_id_actions_comments_post_with_http_info(id, text, **kwargs)  # noqa: E501
            return data

    def cards_id_actions_comments_post_with_http_info(self, id, text, **kwargs):  # noqa: E501
        """Add a new comment to a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_actions_comments_post_with_http_info(id, text, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str text: The comment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'text']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_id_actions_comments_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cards_id_actions_comments_post`")  # noqa: E501
        # verify the required parameter 'text' is set
        if ('text' not in params or
                params['text'] is None):
            raise ValueError("Missing the required parameter `text` when calling `cards_id_actions_comments_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'text' in params:
            query_params.append(('text', params['text']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/actions/comments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_id_actions_get(self, id, **kwargs):  # noqa: E501
        """List the actions on a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_actions_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_id_actions_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_id_actions_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def cards_id_actions_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """List the actions on a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_actions_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_id_actions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cards_id_actions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/actions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_id_actions_id_action_comments_delete(self, id, id_action, **kwargs):  # noqa: E501
        """Delete a comment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_actions_id_action_comments_delete(id, id_action, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str id_action: The ID of the comment action (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_id_actions_id_action_comments_delete_with_http_info(id, id_action, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_id_actions_id_action_comments_delete_with_http_info(id, id_action, **kwargs)  # noqa: E501
            return data

    def cards_id_actions_id_action_comments_delete_with_http_info(self, id, id_action, **kwargs):  # noqa: E501
        """Delete a comment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_actions_id_action_comments_delete_with_http_info(id, id_action, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str id_action: The ID of the comment action (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_action']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_id_actions_id_action_comments_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cards_id_actions_id_action_comments_delete`")  # noqa: E501
        # verify the required parameter 'id_action' is set
        if ('id_action' not in params or
                params['id_action'] is None):
            raise ValueError("Missing the required parameter `id_action` when calling `cards_id_actions_id_action_comments_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_action' in params:
            path_params['idAction'] = params['id_action']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/actions/{idAction}/comments', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_id_actions_id_action_comments_put(self, id, id_action, text, **kwargs):  # noqa: E501
        """Update an existing comment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_actions_id_action_comments_put(id, id_action, text, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str id_action: The ID of the comment action to update (required)
        :param str text: The new text for the comment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_id_actions_id_action_comments_put_with_http_info(id, id_action, text, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_id_actions_id_action_comments_put_with_http_info(id, id_action, text, **kwargs)  # noqa: E501
            return data

    def cards_id_actions_id_action_comments_put_with_http_info(self, id, id_action, text, **kwargs):  # noqa: E501
        """Update an existing comment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_actions_id_action_comments_put_with_http_info(id, id_action, text, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str id_action: The ID of the comment action to update (required)
        :param str text: The new text for the comment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_action', 'text']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_id_actions_id_action_comments_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cards_id_actions_id_action_comments_put`")  # noqa: E501
        # verify the required parameter 'id_action' is set
        if ('id_action' not in params or
                params['id_action'] is None):
            raise ValueError("Missing the required parameter `id_action` when calling `cards_id_actions_id_action_comments_put`")  # noqa: E501
        # verify the required parameter 'text' is set
        if ('text' not in params or
                params['text'] is None):
            raise ValueError("Missing the required parameter `text` when calling `cards_id_actions_id_action_comments_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_action' in params:
            path_params['idAction'] = params['id_action']  # noqa: E501

        query_params = []
        if 'text' in params:
            query_params.append(('text', params['text']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/actions/{idAction}/comments', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_id_attachments_get(self, id, fields, filter, **kwargs):  # noqa: E501
        """List the attachments on a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_attachments_get(id, fields, filter, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str fields: all or a comma-separated list of attachment fields (required)
        :param str filter: Use cover to restrict to just the cover attachment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_id_attachments_get_with_http_info(id, fields, filter, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_id_attachments_get_with_http_info(id, fields, filter, **kwargs)  # noqa: E501
            return data

    def cards_id_attachments_get_with_http_info(self, id, fields, filter, **kwargs):  # noqa: E501
        """List the attachments on a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_attachments_get_with_http_info(id, fields, filter, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str fields: all or a comma-separated list of attachment fields (required)
        :param str filter: Use cover to restrict to just the cover attachment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields', 'filter']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_id_attachments_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cards_id_attachments_get`")  # noqa: E501
        # verify the required parameter 'fields' is set
        if ('fields' not in params or
                params['fields'] is None):
            raise ValueError("Missing the required parameter `fields` when calling `cards_id_attachments_get`")  # noqa: E501
        # verify the required parameter 'filter' is set
        if ('filter' not in params or
                params['filter'] is None):
            raise ValueError("Missing the required parameter `filter` when calling `cards_id_attachments_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'fields' in params:
            path_params['fields'] = params['fields']  # noqa: E501
        if 'filter' in params:
            path_params['filter'] = params['filter']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/attachments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_id_attachments_id_attachment_delete(self, id, id_attachment, **kwargs):  # noqa: E501
        """Delete an attachment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_attachments_id_attachment_delete(id, id_attachment, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str id_attachment: The ID of the attachment to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_id_attachments_id_attachment_delete_with_http_info(id, id_attachment, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_id_attachments_id_attachment_delete_with_http_info(id, id_attachment, **kwargs)  # noqa: E501
            return data

    def cards_id_attachments_id_attachment_delete_with_http_info(self, id, id_attachment, **kwargs):  # noqa: E501
        """Delete an attachment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_attachments_id_attachment_delete_with_http_info(id, id_attachment, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str id_attachment: The ID of the attachment to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_attachment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_id_attachments_id_attachment_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cards_id_attachments_id_attachment_delete`")  # noqa: E501
        # verify the required parameter 'id_attachment' is set
        if ('id_attachment' not in params or
                params['id_attachment'] is None):
            raise ValueError("Missing the required parameter `id_attachment` when calling `cards_id_attachments_id_attachment_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_attachment' in params:
            path_params['idAttachment'] = params['id_attachment']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/attachments/{idAttachment}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_id_attachments_id_attachment_get(self, id, id_attachment, **kwargs):  # noqa: E501
        """Get a specific attachment on a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_attachments_id_attachment_get(id, id_attachment, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str id_attachment: The ID of the attachment (required)
        :param str fields: all or a comma-separated list of attachment fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_id_attachments_id_attachment_get_with_http_info(id, id_attachment, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_id_attachments_id_attachment_get_with_http_info(id, id_attachment, **kwargs)  # noqa: E501
            return data

    def cards_id_attachments_id_attachment_get_with_http_info(self, id, id_attachment, **kwargs):  # noqa: E501
        """Get a specific attachment on a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_attachments_id_attachment_get_with_http_info(id, id_attachment, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str id_attachment: The ID of the attachment (required)
        :param str fields: all or a comma-separated list of attachment fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_attachment', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_id_attachments_id_attachment_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cards_id_attachments_id_attachment_get`")  # noqa: E501
        # verify the required parameter 'id_attachment' is set
        if ('id_attachment' not in params or
                params['id_attachment'] is None):
            raise ValueError("Missing the required parameter `id_attachment` when calling `cards_id_attachments_id_attachment_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_attachment' in params:
            path_params['idAttachment'] = params['id_attachment']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/attachments/{idAttachment}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_id_attachments_post(self, id, **kwargs):  # noqa: E501
        """Add an attachment to a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_attachments_post(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str name: The name of the attachment. Max length 256.
        :param str file: The file to attach, as multipart/form-data
        :param str mime_type: The mimeType of the attachment. Max length 256
        :param str url: A URL to attach. Must start with http:// or https://
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_id_attachments_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_id_attachments_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def cards_id_attachments_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """Add an attachment to a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_attachments_post_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str name: The name of the attachment. Max length 256.
        :param str file: The file to attach, as multipart/form-data
        :param str mime_type: The mimeType of the attachment. Max length 256
        :param str url: A URL to attach. Must start with http:// or https://
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'file', 'mime_type', 'url']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_id_attachments_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cards_id_attachments_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'file' in params:
            query_params.append(('file', params['file']))  # noqa: E501
        if 'mime_type' in params:
            query_params.append(('mimeType', params['mime_type']))  # noqa: E501
        if 'url' in params:
            query_params.append(('url', params['url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/attachments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_id_board_get(self, id, **kwargs):  # noqa: E501
        """Get the board a card is on  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_board_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str fields: all or a comma-separated list of board fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_id_board_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_id_board_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def cards_id_board_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the board a card is on  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_board_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str fields: all or a comma-separated list of board fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_id_board_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cards_id_board_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/board', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_id_card_checklist_id_checklist_check_item_id_check_item_put(self, id_card, id_check_item, id_checklist, **kwargs):  # noqa: E501
        """Update an item in a checklist on a card.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_card_checklist_id_checklist_check_item_id_check_item_put(id_card, id_check_item, id_checklist, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id_card: The ID of the card (required)
        :param str id_check_item: The ID of the checklist item to update (required)
        :param str id_checklist: The ID of the item to update. (required)
        :param str pos: top, bottom, or a positive float
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_id_card_checklist_id_checklist_check_item_id_check_item_put_with_http_info(id_card, id_check_item, id_checklist, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_id_card_checklist_id_checklist_check_item_id_check_item_put_with_http_info(id_card, id_check_item, id_checklist, **kwargs)  # noqa: E501
            return data

    def cards_id_card_checklist_id_checklist_check_item_id_check_item_put_with_http_info(self, id_card, id_check_item, id_checklist, **kwargs):  # noqa: E501
        """Update an item in a checklist on a card.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_card_checklist_id_checklist_check_item_id_check_item_put_with_http_info(id_card, id_check_item, id_checklist, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id_card: The ID of the card (required)
        :param str id_check_item: The ID of the checklist item to update (required)
        :param str id_checklist: The ID of the item to update. (required)
        :param str pos: top, bottom, or a positive float
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_card', 'id_check_item', 'id_checklist', 'pos']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_id_card_checklist_id_checklist_check_item_id_check_item_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_card' is set
        if ('id_card' not in params or
                params['id_card'] is None):
            raise ValueError("Missing the required parameter `id_card` when calling `cards_id_card_checklist_id_checklist_check_item_id_check_item_put`")  # noqa: E501
        # verify the required parameter 'id_check_item' is set
        if ('id_check_item' not in params or
                params['id_check_item'] is None):
            raise ValueError("Missing the required parameter `id_check_item` when calling `cards_id_card_checklist_id_checklist_check_item_id_check_item_put`")  # noqa: E501
        # verify the required parameter 'id_checklist' is set
        if ('id_checklist' not in params or
                params['id_checklist'] is None):
            raise ValueError("Missing the required parameter `id_checklist` when calling `cards_id_card_checklist_id_checklist_check_item_id_check_item_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_card' in params:
            path_params['idCard'] = params['id_card']  # noqa: E501
        if 'id_check_item' in params:
            path_params['idCheckItem'] = params['id_check_item']  # noqa: E501
        if 'id_checklist' in params:
            path_params['idChecklist'] = params['id_checklist']  # noqa: E501

        query_params = []
        if 'pos' in params:
            query_params.append(('pos', params['pos']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_id_check_item_id_check_item_delete(self, id, id_check_item, **kwargs):  # noqa: E501
        """Delete a checklist item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_check_item_id_check_item_delete(id, id_check_item, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str id_check_item: The ID of the checklist item to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_id_check_item_id_check_item_delete_with_http_info(id, id_check_item, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_id_check_item_id_check_item_delete_with_http_info(id, id_check_item, **kwargs)  # noqa: E501
            return data

    def cards_id_check_item_id_check_item_delete_with_http_info(self, id, id_check_item, **kwargs):  # noqa: E501
        """Delete a checklist item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_check_item_id_check_item_delete_with_http_info(id, id_check_item, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str id_check_item: The ID of the checklist item to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_check_item']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_id_check_item_id_check_item_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cards_id_check_item_id_check_item_delete`")  # noqa: E501
        # verify the required parameter 'id_check_item' is set
        if ('id_check_item' not in params or
                params['id_check_item'] is None):
            raise ValueError("Missing the required parameter `id_check_item` when calling `cards_id_check_item_id_check_item_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_check_item' in params:
            path_params['idCheckItem'] = params['id_check_item']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/checkItem/{idCheckItem}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_id_check_item_id_check_item_get(self, id, id_check_item, **kwargs):  # noqa: E501
        """Get a specific checkItem on a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_check_item_id_check_item_get(id, id_check_item, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str id_check_item: The ID of the checkitem (required)
        :param str fields: all or a comma-separated list of name,nameData,pos,state,type
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_id_check_item_id_check_item_get_with_http_info(id, id_check_item, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_id_check_item_id_check_item_get_with_http_info(id, id_check_item, **kwargs)  # noqa: E501
            return data

    def cards_id_check_item_id_check_item_get_with_http_info(self, id, id_check_item, **kwargs):  # noqa: E501
        """Get a specific checkItem on a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_check_item_id_check_item_get_with_http_info(id, id_check_item, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str id_check_item: The ID of the checkitem (required)
        :param str fields: all or a comma-separated list of name,nameData,pos,state,type
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_check_item', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_id_check_item_id_check_item_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cards_id_check_item_id_check_item_get`")  # noqa: E501
        # verify the required parameter 'id_check_item' is set
        if ('id_check_item' not in params or
                params['id_check_item'] is None):
            raise ValueError("Missing the required parameter `id_check_item` when calling `cards_id_check_item_id_check_item_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_check_item' in params:
            path_params['idCheckItem'] = params['id_check_item']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/checkItem/{idCheckItem}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_id_check_item_id_check_item_put(self, id, id_check_item, **kwargs):  # noqa: E501
        """Update an item in a checklist on a card.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_check_item_id_check_item_put(id, id_check_item, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str id_check_item: The ID of the checklist item to update (required)
        :param str name: The new name for the checklist item
        :param str state: One of: complete, incomplete
        :param str id_checklist: The ID of the checklist this item is in
        :param str pos: top, bottom, or a positive float
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_id_check_item_id_check_item_put_with_http_info(id, id_check_item, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_id_check_item_id_check_item_put_with_http_info(id, id_check_item, **kwargs)  # noqa: E501
            return data

    def cards_id_check_item_id_check_item_put_with_http_info(self, id, id_check_item, **kwargs):  # noqa: E501
        """Update an item in a checklist on a card.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_check_item_id_check_item_put_with_http_info(id, id_check_item, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str id_check_item: The ID of the checklist item to update (required)
        :param str name: The new name for the checklist item
        :param str state: One of: complete, incomplete
        :param str id_checklist: The ID of the checklist this item is in
        :param str pos: top, bottom, or a positive float
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_check_item', 'name', 'state', 'id_checklist', 'pos']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_id_check_item_id_check_item_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cards_id_check_item_id_check_item_put`")  # noqa: E501
        # verify the required parameter 'id_check_item' is set
        if ('id_check_item' not in params or
                params['id_check_item'] is None):
            raise ValueError("Missing the required parameter `id_check_item` when calling `cards_id_check_item_id_check_item_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_check_item' in params:
            path_params['idCheckItem'] = params['id_check_item']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501
        if 'id_checklist' in params:
            query_params.append(('idChecklist', params['id_checklist']))  # noqa: E501
        if 'pos' in params:
            query_params.append(('pos', params['pos']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/checkItem/{idCheckItem}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_id_check_item_states_get(self, id, **kwargs):  # noqa: E501
        """Get the completed checklist items on a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_check_item_states_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str fields: all or a comma-separated list of: idCheckItem, state
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_id_check_item_states_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_id_check_item_states_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def cards_id_check_item_states_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the completed checklist items on a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_check_item_states_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str fields: all or a comma-separated list of: idCheckItem, state
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_id_check_item_states_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cards_id_check_item_states_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/checkItemStates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_id_checklists_get(self, id, **kwargs):  # noqa: E501
        """Get the checklists on a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_checklists_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str check_items: all or none
        :param str check_item_fields: all or a comma-separated list of: name,nameData,pos,state,type
        :param str filter: all or none
        :param str fields: all or a comma-separated list of: idBoard,idCard,name,pos
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_id_checklists_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_id_checklists_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def cards_id_checklists_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the checklists on a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_checklists_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str check_items: all or none
        :param str check_item_fields: all or a comma-separated list of: name,nameData,pos,state,type
        :param str filter: all or none
        :param str fields: all or a comma-separated list of: idBoard,idCard,name,pos
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'check_items', 'check_item_fields', 'filter', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_id_checklists_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cards_id_checklists_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'check_items' in params:
            query_params.append(('checkItems', params['check_items']))  # noqa: E501
        if 'check_item_fields' in params:
            query_params.append(('checkItem_fields', params['check_item_fields']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/checklists', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_id_checklists_id_checklist_delete(self, id, id_checklist, **kwargs):  # noqa: E501
        """Delete a checklist from a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_checklists_id_checklist_delete(id, id_checklist, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str id_checklist: The ID of the checklist to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_id_checklists_id_checklist_delete_with_http_info(id, id_checklist, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_id_checklists_id_checklist_delete_with_http_info(id, id_checklist, **kwargs)  # noqa: E501
            return data

    def cards_id_checklists_id_checklist_delete_with_http_info(self, id, id_checklist, **kwargs):  # noqa: E501
        """Delete a checklist from a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_checklists_id_checklist_delete_with_http_info(id, id_checklist, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str id_checklist: The ID of the checklist to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_checklist']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_id_checklists_id_checklist_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cards_id_checklists_id_checklist_delete`")  # noqa: E501
        # verify the required parameter 'id_checklist' is set
        if ('id_checklist' not in params or
                params['id_checklist'] is None):
            raise ValueError("Missing the required parameter `id_checklist` when calling `cards_id_checklists_id_checklist_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_checklist' in params:
            path_params['idChecklist'] = params['id_checklist']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/checklists/{idChecklist}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_id_checklists_post(self, id, **kwargs):  # noqa: E501
        """Create a new checklist on a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_checklists_post(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str name: The name of the checklist
        :param str id_checklist_source: The ID of a source checklist to copy into the new one
        :param str pos: The position of the checklist on the card. One of: top, bottom, or a positive number.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_id_checklists_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_id_checklists_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def cards_id_checklists_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """Create a new checklist on a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_checklists_post_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str name: The name of the checklist
        :param str id_checklist_source: The ID of a source checklist to copy into the new one
        :param str pos: The position of the checklist on the card. One of: top, bottom, or a positive number.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'id_checklist_source', 'pos']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_id_checklists_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cards_id_checklists_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'id_checklist_source' in params:
            query_params.append(('idChecklistSource', params['id_checklist_source']))  # noqa: E501
        if 'pos' in params:
            query_params.append(('pos', params['pos']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/checklists', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_id_custom_field_items_get(self, id, **kwargs):  # noqa: E501
        """Get the custom field items for a card.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_custom_field_items_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_id_custom_field_items_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_id_custom_field_items_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def cards_id_custom_field_items_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the custom field items for a card.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_custom_field_items_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_id_custom_field_items_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cards_id_custom_field_items_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/customFieldItems', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_id_delete(self, id, **kwargs):  # noqa: E501
        """Delete a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_delete(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def cards_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_delete_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cards_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_id_field_get(self, id, field, **kwargs):  # noqa: E501
        """Get a specific property of a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_field_get(id, field, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the card (required)
        :param str field: The desired field. One of fields (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_id_field_get_with_http_info(id, field, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_id_field_get_with_http_info(id, field, **kwargs)  # noqa: E501
            return data

    def cards_id_field_get_with_http_info(self, id, field, **kwargs):  # noqa: E501
        """Get a specific property of a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_field_get_with_http_info(id, field, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the card (required)
        :param str field: The desired field. One of fields (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'field']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_id_field_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cards_id_field_get`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `cards_id_field_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'field' in params:
            path_params['field'] = params['field']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/{field}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_id_get(self, id, **kwargs):  # noqa: E501
        """Get a card by its ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str fields: all or a comma-separated list of fields. Defaults: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idBoard, idChecklists, idLabels, idList, idMembers, idShort, idAttachmentCover, manualCoverAttachment, labels, name, pos, shortUrl, url
        :param str actions: See the Actions Nested Resource
        :param str attachments: true, false, or cover
        :param str attachment_fields: all or a comma-separated list of attachment fields
        :param str members: Whether to return member objects for members on the card
        :param str member_fields: all or a comma-separated list of member fields. Defaults: avatarHash, fullName, initials, username
        :param str members_voted: Whether to return member objects for members who voted on the card
        :param str member_voted_fields: all or a comma-separated list of member fields. Defaults: avatarHash, fullName, initials, username
        :param str check_item_states:
        :param str checklists: Whether to return the checklists on the card. all or none
        :param str checklist_fields: all or a comma-separated list of idBoard,idCard,name,pos
        :param str board: Whether to return the board object the card is on
        :param str board_fields: all or a comma-separated list of board fields. Defaults: name, desc, descData, closed, idOrganization, pinned, url, prefs
        :param str list: See the Lists Nested Resource
        :param str plugin_data: Whether to include pluginData on the card with the response
        :param str stickers: Whether to include sticker models with the response
        :param str sticker_fields: all or a comma-separated list of sticker fields
        :param str custom_field_items: Whether to include the customFieldItems
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def cards_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a card by its ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str fields: all or a comma-separated list of fields. Defaults: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idBoard, idChecklists, idLabels, idList, idMembers, idShort, idAttachmentCover, manualCoverAttachment, labels, name, pos, shortUrl, url
        :param str actions: See the Actions Nested Resource
        :param str attachments: true, false, or cover
        :param str attachment_fields: all or a comma-separated list of attachment fields
        :param str members: Whether to return member objects for members on the card
        :param str member_fields: all or a comma-separated list of member fields. Defaults: avatarHash, fullName, initials, username
        :param str members_voted: Whether to return member objects for members who voted on the card
        :param str member_voted_fields: all or a comma-separated list of member fields. Defaults: avatarHash, fullName, initials, username
        :param str check_item_states:
        :param str checklists: Whether to return the checklists on the card. all or none
        :param str checklist_fields: all or a comma-separated list of idBoard,idCard,name,pos
        :param str board: Whether to return the board object the card is on
        :param str board_fields: all or a comma-separated list of board fields. Defaults: name, desc, descData, closed, idOrganization, pinned, url, prefs
        :param str list: See the Lists Nested Resource
        :param str plugin_data: Whether to include pluginData on the card with the response
        :param str stickers: Whether to include sticker models with the response
        :param str sticker_fields: all or a comma-separated list of sticker fields
        :param str custom_field_items: Whether to include the customFieldItems
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields', 'actions', 'attachments', 'attachment_fields', 'members', 'member_fields', 'members_voted', 'member_voted_fields', 'check_item_states', 'checklists', 'checklist_fields', 'board', 'board_fields', 'list', 'plugin_data', 'stickers', 'sticker_fields', 'custom_field_items']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cards_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'actions' in params:
            query_params.append(('actions', params['actions']))  # noqa: E501
        if 'attachments' in params:
            query_params.append(('attachments', params['attachments']))  # noqa: E501
        if 'attachment_fields' in params:
            query_params.append(('attachment_fields', params['attachment_fields']))  # noqa: E501
        if 'members' in params:
            query_params.append(('members', params['members']))  # noqa: E501
        if 'member_fields' in params:
            query_params.append(('member_fields', params['member_fields']))  # noqa: E501
        if 'members_voted' in params:
            query_params.append(('membersVoted', params['members_voted']))  # noqa: E501
        if 'member_voted_fields' in params:
            query_params.append(('memberVoted_fields', params['member_voted_fields']))  # noqa: E501
        if 'check_item_states' in params:
            query_params.append(('checkItemStates', params['check_item_states']))  # noqa: E501
        if 'checklists' in params:
            query_params.append(('checklists', params['checklists']))  # noqa: E501
        if 'checklist_fields' in params:
            query_params.append(('checklist_fields', params['checklist_fields']))  # noqa: E501
        if 'board' in params:
            query_params.append(('board', params['board']))  # noqa: E501
        if 'board_fields' in params:
            query_params.append(('board_fields', params['board_fields']))  # noqa: E501
        if 'list' in params:
            query_params.append(('list', params['list']))  # noqa: E501
        if 'plugin_data' in params:
            query_params.append(('pluginData', params['plugin_data']))  # noqa: E501
        if 'stickers' in params:
            query_params.append(('stickers', params['stickers']))  # noqa: E501
        if 'sticker_fields' in params:
            query_params.append(('sticker_fields', params['sticker_fields']))  # noqa: E501
        if 'custom_field_items' in params:
            query_params.append(('customFieldItems', params['custom_field_items']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_id_id_labels_id_label_delete(self, id, id_label, **kwargs):  # noqa: E501
        """Remove a label from a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_id_labels_id_label_delete(id, id_label, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str id_label: The ID of the label to remove (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_id_id_labels_id_label_delete_with_http_info(id, id_label, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_id_id_labels_id_label_delete_with_http_info(id, id_label, **kwargs)  # noqa: E501
            return data

    def cards_id_id_labels_id_label_delete_with_http_info(self, id, id_label, **kwargs):  # noqa: E501
        """Remove a label from a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_id_labels_id_label_delete_with_http_info(id, id_label, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str id_label: The ID of the label to remove (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_label']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_id_id_labels_id_label_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cards_id_id_labels_id_label_delete`")  # noqa: E501
        # verify the required parameter 'id_label' is set
        if ('id_label' not in params or
                params['id_label'] is None):
            raise ValueError("Missing the required parameter `id_label` when calling `cards_id_id_labels_id_label_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_label' in params:
            path_params['idLabel'] = params['id_label']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/idLabels/{idLabel}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_id_id_labels_post(self, id, **kwargs):  # noqa: E501
        """Add a label to a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_id_labels_post(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str value: The ID of the label to add
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_id_id_labels_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_id_id_labels_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def cards_id_id_labels_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """Add a label to a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_id_labels_post_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str value: The ID of the label to add
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_id_id_labels_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cards_id_id_labels_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/idLabels', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_id_id_members_id_member_delete(self, id, id_member, **kwargs):  # noqa: E501
        """Remove a member from a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_id_members_id_member_delete(id, id_member, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str id_member: The ID of the member to remove from the card (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_id_id_members_id_member_delete_with_http_info(id, id_member, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_id_id_members_id_member_delete_with_http_info(id, id_member, **kwargs)  # noqa: E501
            return data

    def cards_id_id_members_id_member_delete_with_http_info(self, id, id_member, **kwargs):  # noqa: E501
        """Remove a member from a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_id_members_id_member_delete_with_http_info(id, id_member, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str id_member: The ID of the member to remove from the card (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_member']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_id_id_members_id_member_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cards_id_id_members_id_member_delete`")  # noqa: E501
        # verify the required parameter 'id_member' is set
        if ('id_member' not in params or
                params['id_member'] is None):
            raise ValueError("Missing the required parameter `id_member` when calling `cards_id_id_members_id_member_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_member' in params:
            path_params['idMember'] = params['id_member']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/idMembers/{idMember}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_id_id_members_post(self, id, **kwargs):  # noqa: E501
        """Add a member to a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_id_members_post(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str value: The ID of the member to add to the card
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_id_id_members_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_id_id_members_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def cards_id_id_members_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """Add a member to a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_id_members_post_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str value: The ID of the member to add to the card
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_id_id_members_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cards_id_id_members_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/idMembers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_id_labels_post(self, id, color, **kwargs):  # noqa: E501
        """Add a new label to a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_labels_post(id, color, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str color: A valid label color or null. See labels (required)
        :param str name: A name for the label
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_id_labels_post_with_http_info(id, color, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_id_labels_post_with_http_info(id, color, **kwargs)  # noqa: E501
            return data

    def cards_id_labels_post_with_http_info(self, id, color, **kwargs):  # noqa: E501
        """Add a new label to a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_labels_post_with_http_info(id, color, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str color: A valid label color or null. See labels (required)
        :param str name: A name for the label
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'color', 'name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_id_labels_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cards_id_labels_post`")  # noqa: E501
        # verify the required parameter 'color' is set
        if ('color' not in params or
                params['color'] is None):
            raise ValueError("Missing the required parameter `color` when calling `cards_id_labels_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'color' in params:
            query_params.append(('color', params['color']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/labels', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_id_list_get(self, id, **kwargs):  # noqa: E501
        """Get the list a card is in  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_list_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str fields: all or a comma-separated list of list fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_id_list_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_id_list_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def cards_id_list_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the list a card is in  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_list_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str fields: all or a comma-separated list of list fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_id_list_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cards_id_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_id_mark_associated_notifications_read_post(self, id, **kwargs):  # noqa: E501
        """Mark notifications about this card as read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_mark_associated_notifications_read_post(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_id_mark_associated_notifications_read_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_id_mark_associated_notifications_read_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def cards_id_mark_associated_notifications_read_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """Mark notifications about this card as read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_mark_associated_notifications_read_post_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_id_mark_associated_notifications_read_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cards_id_mark_associated_notifications_read_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/markAssociatedNotificationsRead', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_id_members_get(self, id, **kwargs):  # noqa: E501
        """Get the members on a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_members_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str fields: all or a comma-separated list of member fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_id_members_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_id_members_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def cards_id_members_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the members on a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_members_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str fields: all or a comma-separated list of member fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_id_members_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cards_id_members_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_id_members_voted_get(self, id, **kwargs):  # noqa: E501
        """Get the members who have voted on a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_members_voted_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str fields: all or a comma-separated list of member fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_id_members_voted_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_id_members_voted_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def cards_id_members_voted_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the members who have voted on a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_members_voted_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str fields: all or a comma-separated list of member fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_id_members_voted_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cards_id_members_voted_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/membersVoted', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_id_members_voted_id_member_delete(self, id, id_member, **kwargs):  # noqa: E501
        """Remove a member&#39;s vote from a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_members_voted_id_member_delete(id, id_member, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str id_member: The ID of the member whose vote to remove (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_id_members_voted_id_member_delete_with_http_info(id, id_member, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_id_members_voted_id_member_delete_with_http_info(id, id_member, **kwargs)  # noqa: E501
            return data

    def cards_id_members_voted_id_member_delete_with_http_info(self, id, id_member, **kwargs):  # noqa: E501
        """Remove a member&#39;s vote from a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_members_voted_id_member_delete_with_http_info(id, id_member, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str id_member: The ID of the member whose vote to remove (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_member']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_id_members_voted_id_member_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cards_id_members_voted_id_member_delete`")  # noqa: E501
        # verify the required parameter 'id_member' is set
        if ('id_member' not in params or
                params['id_member'] is None):
            raise ValueError("Missing the required parameter `id_member` when calling `cards_id_members_voted_id_member_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_member' in params:
            path_params['idMember'] = params['id_member']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/membersVoted/{idMember}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_id_members_voted_post(self, id, value, **kwargs):  # noqa: E501
        """Vote on the card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_members_voted_post(id, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str value: The ID of the member to vote 'yes' on the card (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_id_members_voted_post_with_http_info(id, value, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_id_members_voted_post_with_http_info(id, value, **kwargs)  # noqa: E501
            return data

    def cards_id_members_voted_post_with_http_info(self, id, value, **kwargs):  # noqa: E501
        """Vote on the card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_members_voted_post_with_http_info(id, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str value: The ID of the member to vote 'yes' on the card (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_id_members_voted_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cards_id_members_voted_post`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `cards_id_members_voted_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/membersVoted', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_id_plugin_data_get(self, id, **kwargs):  # noqa: E501
        """Get any shared pluginData on a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_plugin_data_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_id_plugin_data_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_id_plugin_data_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def cards_id_plugin_data_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get any shared pluginData on a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_plugin_data_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_id_plugin_data_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cards_id_plugin_data_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/pluginData', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_id_put(self, id, **kwargs):  # noqa: E501
        """Update a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_put(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card to update (required)
        :param str name: The new name for the card
        :param str desc: The new description for the card
        :param str closed: Whether the card should be archived (closed: true)
        :param str id_members: Comma-separated list of member IDs
        :param str id_attachment_cover: The ID of the image attachment the card should use as its cover, or null for none
        :param str id_list: The ID of the list the card should be in
        :param str id_labels: Comma-separated list of label IDs
        :param str id_board: The ID of the board the card should be on
        :param str pos: The position of the card in its list. top, bottom, or a positive float
        :param str due: When the card is due, or null
        :param str due_complete: Whether the due date should be marked complete
        :param str subscribed: Whether the member is should be subscribed to the card
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_id_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_id_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def cards_id_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_put_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card to update (required)
        :param str name: The new name for the card
        :param str desc: The new description for the card
        :param str closed: Whether the card should be archived (closed: true)
        :param str id_members: Comma-separated list of member IDs
        :param str id_attachment_cover: The ID of the image attachment the card should use as its cover, or null for none
        :param str id_list: The ID of the list the card should be in
        :param str id_labels: Comma-separated list of label IDs
        :param str id_board: The ID of the board the card should be on
        :param str pos: The position of the card in its list. top, bottom, or a positive float
        :param str due: When the card is due, or null
        :param str due_complete: Whether the due date should be marked complete
        :param str subscribed: Whether the member is should be subscribed to the card
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'desc', 'closed', 'id_members', 'id_attachment_cover', 'id_list', 'id_labels', 'id_board', 'pos', 'due', 'due_complete', 'subscribed']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cards_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'desc' in params:
            query_params.append(('desc', params['desc']))  # noqa: E501
        if 'closed' in params:
            query_params.append(('closed', params['closed']))  # noqa: E501
        if 'id_members' in params:
            query_params.append(('idMembers', params['id_members']))  # noqa: E501
        if 'id_attachment_cover' in params:
            query_params.append(('idAttachmentCover', params['id_attachment_cover']))  # noqa: E501
        if 'id_list' in params:
            query_params.append(('idList', params['id_list']))  # noqa: E501
        if 'id_labels' in params:
            query_params.append(('idLabels', params['id_labels']))  # noqa: E501
        if 'id_board' in params:
            query_params.append(('idBoard', params['id_board']))  # noqa: E501
        if 'pos' in params:
            query_params.append(('pos', params['pos']))  # noqa: E501
        if 'due' in params:
            query_params.append(('due', params['due']))  # noqa: E501
        if 'due_complete' in params:
            query_params.append(('dueComplete', params['due_complete']))  # noqa: E501
        if 'subscribed' in params:
            query_params.append(('subscribed', params['subscribed']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_id_stickers_get(self, id, **kwargs):  # noqa: E501
        """Get the stickers on a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_stickers_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str fields: all or a comma-separated list of sticker fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_id_stickers_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_id_stickers_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def cards_id_stickers_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the stickers on a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_stickers_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str fields: all or a comma-separated list of sticker fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_id_stickers_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cards_id_stickers_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/stickers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_id_stickers_id_sticker_delete(self, id, id_sticker, **kwargs):  # noqa: E501
        """Remove a sticker from the card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_stickers_id_sticker_delete(id, id_sticker, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str id_sticker: The ID of the sticker to remove from the card (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_id_stickers_id_sticker_delete_with_http_info(id, id_sticker, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_id_stickers_id_sticker_delete_with_http_info(id, id_sticker, **kwargs)  # noqa: E501
            return data

    def cards_id_stickers_id_sticker_delete_with_http_info(self, id, id_sticker, **kwargs):  # noqa: E501
        """Remove a sticker from the card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_stickers_id_sticker_delete_with_http_info(id, id_sticker, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str id_sticker: The ID of the sticker to remove from the card (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_sticker']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_id_stickers_id_sticker_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cards_id_stickers_id_sticker_delete`")  # noqa: E501
        # verify the required parameter 'id_sticker' is set
        if ('id_sticker' not in params or
                params['id_sticker'] is None):
            raise ValueError("Missing the required parameter `id_sticker` when calling `cards_id_stickers_id_sticker_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_sticker' in params:
            path_params['idSticker'] = params['id_sticker']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/stickers/{idSticker}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_id_stickers_id_sticker_get(self, id, id_sticker, **kwargs):  # noqa: E501
        """Get a specific sticker on a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_stickers_id_sticker_get(id, id_sticker, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str id_sticker: The ID of the sticker (required)
        :param str fields: all or a comma-separated list of sticker fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_id_stickers_id_sticker_get_with_http_info(id, id_sticker, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_id_stickers_id_sticker_get_with_http_info(id, id_sticker, **kwargs)  # noqa: E501
            return data

    def cards_id_stickers_id_sticker_get_with_http_info(self, id, id_sticker, **kwargs):  # noqa: E501
        """Get a specific sticker on a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_stickers_id_sticker_get_with_http_info(id, id_sticker, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str id_sticker: The ID of the sticker (required)
        :param str fields: all or a comma-separated list of sticker fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_sticker', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_id_stickers_id_sticker_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cards_id_stickers_id_sticker_get`")  # noqa: E501
        # verify the required parameter 'id_sticker' is set
        if ('id_sticker' not in params or
                params['id_sticker'] is None):
            raise ValueError("Missing the required parameter `id_sticker` when calling `cards_id_stickers_id_sticker_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_sticker' in params:
            path_params['idSticker'] = params['id_sticker']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/stickers/{idSticker}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_id_stickers_id_sticker_put(self, id, id_sticker, **kwargs):  # noqa: E501
        """Update a sticker on a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_stickers_id_sticker_put(id, id_sticker, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str id_sticker: The ID of the sticker to update (required)
        :param str top:
        :param str left:
        :param str z_index:
        :param str rotate:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_id_stickers_id_sticker_put_with_http_info(id, id_sticker, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_id_stickers_id_sticker_put_with_http_info(id, id_sticker, **kwargs)  # noqa: E501
            return data

    def cards_id_stickers_id_sticker_put_with_http_info(self, id, id_sticker, **kwargs):  # noqa: E501
        """Update a sticker on a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_id_stickers_id_sticker_put_with_http_info(id, id_sticker, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the card (required)
        :param str id_sticker: The ID of the sticker to update (required)
        :param str top:
        :param str left:
        :param str z_index:
        :param str rotate:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_sticker', 'top', 'left', 'z_index', 'rotate']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_id_stickers_id_sticker_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cards_id_stickers_id_sticker_put`")  # noqa: E501
        # verify the required parameter 'id_sticker' is set
        if ('id_sticker' not in params or
                params['id_sticker'] is None):
            raise ValueError("Missing the required parameter `id_sticker` when calling `cards_id_stickers_id_sticker_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_sticker' in params:
            path_params['idSticker'] = params['id_sticker']  # noqa: E501

        query_params = []
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501
        if 'left' in params:
            query_params.append(('left', params['left']))  # noqa: E501
        if 'z_index' in params:
            query_params.append(('zIndex', params['z_index']))  # noqa: E501
        if 'rotate' in params:
            query_params.append(('rotate', params['rotate']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/stickers/{idSticker}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cards_post(self, id_list, **kwargs):  # noqa: E501
        """Create a new card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_post(id_list, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id_list: The ID of the list the card should be created in (required)
        :param str name: The name for the card
        :param str desc: The description for the card
        :param str pos: The position of the new card. top, bottom, or a positive float
        :param str due: A due date for the card
        :param str due_complete:
        :param str id_members: Comma-separated list of member IDs to add to the card
        :param str id_labels: Comma-separated list of label IDs to add to the card
        :param str url_source: A URL starting with http:// or https://
        :param str file_source: 
        :param str id_card_source: The ID of a card to copy into the new card
        :param str keep_from_source: If using idCardSource you can specify which properties to copy over. all or comma-separated list of: attachments,checklists,comments,due,labels,members,stickers
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cards_post_with_http_info(id_list, **kwargs)  # noqa: E501
        else:
            (data) = self.cards_post_with_http_info(id_list, **kwargs)  # noqa: E501
            return data

    def cards_post_with_http_info(self, id_list, **kwargs):  # noqa: E501
        """Create a new card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cards_post_with_http_info(id_list, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id_list: The ID of the list the card should be created in (required)
        :param str name: The name for the card
        :param str desc: The description for the card
        :param str pos: The position of the new card. top, bottom, or a positive float
        :param str due: A due date for the card
        :param str due_complete:
        :param str id_members: Comma-separated list of member IDs to add to the card
        :param str id_labels: Comma-separated list of label IDs to add to the card
        :param str url_source: A URL starting with http:// or https://
        :param str file_source: 
        :param str id_card_source: The ID of a card to copy into the new card
        :param str keep_from_source: If using idCardSource you can specify which properties to copy over. all or comma-separated list of: attachments,checklists,comments,due,labels,members,stickers
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_list', 'name', 'desc', 'pos', 'due', 'due_complete', 'id_members', 'id_labels', 'url_source', 'file_source', 'id_card_source', 'keep_from_source']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cards_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_list' is set
        if ('id_list' not in params or
                params['id_list'] is None):
            raise ValueError("Missing the required parameter `id_list` when calling `cards_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'desc' in params:
            query_params.append(('desc', params['desc']))  # noqa: E501
        if 'pos' in params:
            query_params.append(('pos', params['pos']))  # noqa: E501
        if 'due' in params:
            query_params.append(('due', params['due']))  # noqa: E501
        if 'due_complete' in params:
            query_params.append(('dueComplete', params['due_complete']))  # noqa: E501
        if 'id_list' in params:
            query_params.append(('idList', params['id_list']))  # noqa: E501
        if 'id_members' in params:
            query_params.append(('idMembers', params['id_members']))  # noqa: E501
        if 'id_labels' in params:
            query_params.append(('idLabels', params['id_labels']))  # noqa: E501
        if 'url_source' in params:
            query_params.append(('urlSource', params['url_source']))  # noqa: E501
        if 'file_source' in params:
            query_params.append(('fileSource', params['file_source']))  # noqa: E501
        if 'id_card_source' in params:
            query_params.append(('idCardSource', params['id_card_source']))  # noqa: E501
        if 'keep_from_source' in params:
            query_params.append(('keepFromSource', params['keep_from_source']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cards', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def checklists_id_board_get(self, id, **kwargs):  # noqa: E501
        """checklists_id_board_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.checklists_id_board_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of a checklist. (required)
        :param str fields: all or a comma-separated list of board fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.checklists_id_board_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.checklists_id_board_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def checklists_id_board_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """checklists_id_board_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.checklists_id_board_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of a checklist. (required)
        :param str fields: all or a comma-separated list of board fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method checklists_id_board_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `checklists_id_board_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/checklists/{id}/board', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def checklists_id_cards_get(self, id, **kwargs):  # noqa: E501
        """checklists_id_cards_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.checklists_id_cards_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of a checklist. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.checklists_id_cards_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.checklists_id_cards_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def checklists_id_cards_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """checklists_id_cards_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.checklists_id_cards_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of a checklist. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method checklists_id_cards_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `checklists_id_cards_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/checklists/{id}/cards', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def checklists_id_check_items_get(self, id, **kwargs):  # noqa: E501
        """checklists_id_check_items_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.checklists_id_check_items_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of a checklist. (required)
        :param str filter: One of: all, none.
        :param str fields: One of: all, name, nameData, pos, state, type.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.checklists_id_check_items_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.checklists_id_check_items_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def checklists_id_check_items_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """checklists_id_check_items_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.checklists_id_check_items_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of a checklist. (required)
        :param str filter: One of: all, none.
        :param str fields: One of: all, name, nameData, pos, state, type.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method checklists_id_check_items_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `checklists_id_check_items_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/checklists/{id}/checkItems', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def checklists_id_check_items_id_check_item_delete(self, id, id_check_item, **kwargs):  # noqa: E501
        """Remove an item from a checklist  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.checklists_id_check_items_id_check_item_delete(id, id_check_item, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of a checklist. (required)
        :param str id_check_item: ID of the checklist item to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.checklists_id_check_items_id_check_item_delete_with_http_info(id, id_check_item, **kwargs)  # noqa: E501
        else:
            (data) = self.checklists_id_check_items_id_check_item_delete_with_http_info(id, id_check_item, **kwargs)  # noqa: E501
            return data

    def checklists_id_check_items_id_check_item_delete_with_http_info(self, id, id_check_item, **kwargs):  # noqa: E501
        """Remove an item from a checklist  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.checklists_id_check_items_id_check_item_delete_with_http_info(id, id_check_item, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of a checklist. (required)
        :param str id_check_item: ID of the checklist item to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_check_item']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method checklists_id_check_items_id_check_item_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `checklists_id_check_items_id_check_item_delete`")  # noqa: E501
        # verify the required parameter 'id_check_item' is set
        if ('id_check_item' not in params or
                params['id_check_item'] is None):
            raise ValueError("Missing the required parameter `id_check_item` when calling `checklists_id_check_items_id_check_item_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_check_item' in params:
            path_params['idCheckItem'] = params['id_check_item']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/checklists/{id}/checkItems/{idCheckItem}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def checklists_id_check_items_id_check_item_get(self, id, id_check_item, **kwargs):  # noqa: E501
        """checklists_id_check_items_id_check_item_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.checklists_id_check_items_id_check_item_get(id, id_check_item, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of a checklist. (required)
        :param str id_check_item: ID of the check item to retrieve. (required)
        :param str fields: One of: all, name, nameData, pos, state, type.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.checklists_id_check_items_id_check_item_get_with_http_info(id, id_check_item, **kwargs)  # noqa: E501
        else:
            (data) = self.checklists_id_check_items_id_check_item_get_with_http_info(id, id_check_item, **kwargs)  # noqa: E501
            return data

    def checklists_id_check_items_id_check_item_get_with_http_info(self, id, id_check_item, **kwargs):  # noqa: E501
        """checklists_id_check_items_id_check_item_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.checklists_id_check_items_id_check_item_get_with_http_info(id, id_check_item, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of a checklist. (required)
        :param str id_check_item: ID of the check item to retrieve. (required)
        :param str fields: One of: all, name, nameData, pos, state, type.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_check_item', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method checklists_id_check_items_id_check_item_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `checklists_id_check_items_id_check_item_get`")  # noqa: E501
        # verify the required parameter 'id_check_item' is set
        if ('id_check_item' not in params or
                params['id_check_item'] is None):
            raise ValueError("Missing the required parameter `id_check_item` when calling `checklists_id_check_items_id_check_item_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_check_item' in params:
            path_params['idCheckItem'] = params['id_check_item']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/checklists/{id}/checkItems/{idCheckItem}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def checklists_id_check_items_id_check_item_put(self, id, id_check_item, pos, **kwargs):  # noqa: E501
        """Update check item.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.checklists_id_check_items_id_check_item_put(id, id_check_item, pos, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of a checklist. (required)
        :param str id_check_item: ID of the check item to retrieve. (required)
        :param str pos: Position to move check item to. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.checklists_id_check_items_id_check_item_put_with_http_info(id, id_check_item, pos, **kwargs)  # noqa: E501
        else:
            (data) = self.checklists_id_check_items_id_check_item_put_with_http_info(id, id_check_item, pos, **kwargs)  # noqa: E501
            return data

    def checklists_id_check_items_id_check_item_put_with_http_info(self, id, id_check_item, pos, **kwargs):  # noqa: E501
        """Update check item.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.checklists_id_check_items_id_check_item_put_with_http_info(id, id_check_item, pos, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of a checklist. (required)
        :param str id_check_item: ID of the check item to retrieve. (required)
        :param str pos: Position to move check item to. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_check_item', 'pos']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method checklists_id_check_items_id_check_item_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `checklists_id_check_items_id_check_item_put`")  # noqa: E501
        # verify the required parameter 'id_check_item' is set
        if ('id_check_item' not in params or
                params['id_check_item'] is None):
            raise ValueError("Missing the required parameter `id_check_item` when calling `checklists_id_check_items_id_check_item_put`")  # noqa: E501
        # verify the required parameter 'pos' is set
        if ('pos' not in params or
                params['pos'] is None):
            raise ValueError("Missing the required parameter `pos` when calling `checklists_id_check_items_id_check_item_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_check_item' in params:
            path_params['idCheckItem'] = params['id_check_item']  # noqa: E501

        query_params = []
        if 'pos' in params:
            query_params.append(('pos', params['pos']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/checklists/{id}/checkItems/{idCheckItem}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def checklists_id_check_items_post(self, id, name, **kwargs):  # noqa: E501
        """checklists_id_check_items_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.checklists_id_check_items_post(id, name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of a checklist. (required)
        :param str name: The name of the new check item on the checklist. Should be a string of length 1 to 16384. (required)
        :param str pos: The position of the check item in the checklist. One of: top, bottom, or a positive number.
        :param str checked: Determines whether the check item is already checked when created.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.checklists_id_check_items_post_with_http_info(id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.checklists_id_check_items_post_with_http_info(id, name, **kwargs)  # noqa: E501
            return data

    def checklists_id_check_items_post_with_http_info(self, id, name, **kwargs):  # noqa: E501
        """checklists_id_check_items_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.checklists_id_check_items_post_with_http_info(id, name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of a checklist. (required)
        :param str name: The name of the new check item on the checklist. Should be a string of length 1 to 16384. (required)
        :param str pos: The position of the check item in the checklist. One of: top, bottom, or a positive number.
        :param str checked: Determines whether the check item is already checked when created.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'pos', 'checked']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method checklists_id_check_items_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `checklists_id_check_items_post`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `checklists_id_check_items_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'pos' in params:
            query_params.append(('pos', params['pos']))  # noqa: E501
        if 'checked' in params:
            query_params.append(('checked', params['checked']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/checklists/{id}/checkItems', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def checklists_id_delete(self, id, **kwargs):  # noqa: E501
        """Delete a checklist  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.checklists_id_delete(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of a checklist. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.checklists_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.checklists_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def checklists_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a checklist  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.checklists_id_delete_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of a checklist. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method checklists_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `checklists_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/checklists/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def checklists_id_field_get(self, id, field, **kwargs):  # noqa: E501
        """checklists_id_field_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.checklists_id_field_get(id, field, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of a checklist. (required)
        :param str field: A checklist field (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.checklists_id_field_get_with_http_info(id, field, **kwargs)  # noqa: E501
        else:
            (data) = self.checklists_id_field_get_with_http_info(id, field, **kwargs)  # noqa: E501
            return data

    def checklists_id_field_get_with_http_info(self, id, field, **kwargs):  # noqa: E501
        """checklists_id_field_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.checklists_id_field_get_with_http_info(id, field, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of a checklist. (required)
        :param str field: A checklist field (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'field']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method checklists_id_field_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `checklists_id_field_get`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `checklists_id_field_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'field' in params:
            path_params['field'] = params['field']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/checklists/{id}/{field}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def checklists_id_get(self, id, **kwargs):  # noqa: E501
        """checklists_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.checklists_id_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of a checklist. (required)
        :param str cards: Valid values: all, closed, none, open, visible. Cards is a nested resource. The additional query params available are documented at Cards Nested Resource.
        :param str check_items: The check items on the list to return. One of: all, none.
        :param str check_item_fields: The fields on the checkItem to return if checkItems are being returned. all or a comma-separated list of: name, nameData, pos, state, type
        :param str fields: all or a comma-separated list of checklist fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.checklists_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.checklists_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def checklists_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """checklists_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.checklists_id_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of a checklist. (required)
        :param str cards: Valid values: all, closed, none, open, visible. Cards is a nested resource. The additional query params available are documented at Cards Nested Resource.
        :param str check_items: The check items on the list to return. One of: all, none.
        :param str check_item_fields: The fields on the checkItem to return if checkItems are being returned. all or a comma-separated list of: name, nameData, pos, state, type
        :param str fields: all or a comma-separated list of checklist fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'cards', 'check_items', 'check_item_fields', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method checklists_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `checklists_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'cards' in params:
            query_params.append(('cards', params['cards']))  # noqa: E501
        if 'check_items' in params:
            query_params.append(('checkItems', params['check_items']))  # noqa: E501
        if 'check_item_fields' in params:
            query_params.append(('checkItem_fields', params['check_item_fields']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/checklists/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def checklists_id_name_put(self, id, value, **kwargs):  # noqa: E501
        """checklists_id_name_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.checklists_id_name_put(id, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of a checklist. (required)
        :param str value: The value to change the checklist name to. Should be a string of length 1 to 16384. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.checklists_id_name_put_with_http_info(id, value, **kwargs)  # noqa: E501
        else:
            (data) = self.checklists_id_name_put_with_http_info(id, value, **kwargs)  # noqa: E501
            return data

    def checklists_id_name_put_with_http_info(self, id, value, **kwargs):  # noqa: E501
        """checklists_id_name_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.checklists_id_name_put_with_http_info(id, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of a checklist. (required)
        :param str value: The value to change the checklist name to. Should be a string of length 1 to 16384. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method checklists_id_name_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `checklists_id_name_put`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `checklists_id_name_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/checklists/{id}/name', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def checklists_id_put(self, id, **kwargs):  # noqa: E501
        """Update an existing checklist.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.checklists_id_put(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of a checklist. (required)
        :param str name: Name of the new checklist being created. Should be length of 1 to 16384.
        :param str pos: Determines the position of the checklist on the card. One of: top, bottom, or a positive number.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.checklists_id_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.checklists_id_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def checklists_id_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update an existing checklist.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.checklists_id_put_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of a checklist. (required)
        :param str name: Name of the new checklist being created. Should be length of 1 to 16384.
        :param str pos: Determines the position of the checklist on the card. One of: top, bottom, or a positive number.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'pos']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method checklists_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `checklists_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'pos' in params:
            query_params.append(('pos', params['pos']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/checklists/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def checklists_post(self, id_card, **kwargs):  # noqa: E501
        """checklists_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.checklists_post(id_card, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id_card: The ID of the card that the checklist should be added to. (required)
        :param str name: The name of the checklist. Should be a string of length 1 to 16384.
        :param str pos: The position of the checklist on the card. One of: top, bottom, or a positive number.
        :param str id_checklist_source: The ID of a checklist to copy into the new checklist.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.checklists_post_with_http_info(id_card, **kwargs)  # noqa: E501
        else:
            (data) = self.checklists_post_with_http_info(id_card, **kwargs)  # noqa: E501
            return data

    def checklists_post_with_http_info(self, id_card, **kwargs):  # noqa: E501
        """checklists_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.checklists_post_with_http_info(id_card, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id_card: The ID of the card that the checklist should be added to. (required)
        :param str name: The name of the checklist. Should be a string of length 1 to 16384.
        :param str pos: The position of the checklist on the card. One of: top, bottom, or a positive number.
        :param str id_checklist_source: The ID of a checklist to copy into the new checklist.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_card', 'name', 'pos', 'id_checklist_source']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method checklists_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_card' is set
        if ('id_card' not in params or
                params['id_card'] is None):
            raise ValueError("Missing the required parameter `id_card` when calling `checklists_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_card' in params:
            query_params.append(('idCard', params['id_card']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'pos' in params:
            query_params.append(('pos', params['pos']))  # noqa: E501
        if 'id_checklist_source' in params:
            query_params.append(('idChecklistSource', params['id_checklist_source']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/checklists', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def custom_fields_id_delete(self, id, **kwargs):  # noqa: E501
        """Delete a Custom Field from a board.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.custom_fields_id_delete(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the customfield to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.custom_fields_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.custom_fields_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def custom_fields_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a Custom Field from a board.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.custom_fields_id_delete_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the customfield to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method custom_fields_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `custom_fields_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/customFields/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def custom_fields_id_get(self, id, **kwargs):  # noqa: E501
        """custom_fields_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.custom_fields_id_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the customfield to retrieve. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.custom_fields_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.custom_fields_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def custom_fields_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """custom_fields_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.custom_fields_id_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the customfield to retrieve. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method custom_fields_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `custom_fields_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/customFields/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def custom_fields_id_options_get(self, id, **kwargs):  # noqa: E501
        """Get the options of a drop down Custom Field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.custom_fields_id_options_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the customfield. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.custom_fields_id_options_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.custom_fields_id_options_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def custom_fields_id_options_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the options of a drop down Custom Field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.custom_fields_id_options_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the customfield. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method custom_fields_id_options_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `custom_fields_id_options_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/customFields/{id}/options', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def custom_fields_id_options_id_custom_field_option_get(self, id, id_custom_field_option, **kwargs):  # noqa: E501
        """custom_fields_id_options_id_custom_field_option_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.custom_fields_id_options_id_custom_field_option_get(id, id_custom_field_option, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the customfielditem. (required)
        :param str id_custom_field_option: ID of the customfieldoption to retrieve. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.custom_fields_id_options_id_custom_field_option_get_with_http_info(id, id_custom_field_option, **kwargs)  # noqa: E501
        else:
            (data) = self.custom_fields_id_options_id_custom_field_option_get_with_http_info(id, id_custom_field_option, **kwargs)  # noqa: E501
            return data

    def custom_fields_id_options_id_custom_field_option_get_with_http_info(self, id, id_custom_field_option, **kwargs):  # noqa: E501
        """custom_fields_id_options_id_custom_field_option_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.custom_fields_id_options_id_custom_field_option_get_with_http_info(id, id_custom_field_option, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the customfielditem. (required)
        :param str id_custom_field_option: ID of the customfieldoption to retrieve. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_custom_field_option']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method custom_fields_id_options_id_custom_field_option_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `custom_fields_id_options_id_custom_field_option_get`")  # noqa: E501
        # verify the required parameter 'id_custom_field_option' is set
        if ('id_custom_field_option' not in params or
                params['id_custom_field_option'] is None):
            raise ValueError("Missing the required parameter `id_custom_field_option` when calling `custom_fields_id_options_id_custom_field_option_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_custom_field_option' in params:
            path_params['idCustomFieldOption'] = params['id_custom_field_option']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/customFields/{id}/options/{idCustomFieldOption}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def custom_fields_id_options_post(self, id, **kwargs):  # noqa: E501
        """Add an option to a dropdown Custom Field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.custom_fields_id_options_post(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the customfield. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.custom_fields_id_options_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.custom_fields_id_options_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def custom_fields_id_options_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """Add an option to a dropdown Custom Field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.custom_fields_id_options_post_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the customfield. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method custom_fields_id_options_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `custom_fields_id_options_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/customFields/{id}/options', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def custom_fields_id_put(self, id, **kwargs):  # noqa: E501
        """Update a Custom Field definition.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.custom_fields_id_put(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the customfield to update. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.custom_fields_id_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.custom_fields_id_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def custom_fields_id_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update a Custom Field definition.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.custom_fields_id_put_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the customfield to update. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method custom_fields_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `custom_fields_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/customFields/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def custom_fields_post(self, **kwargs):  # noqa: E501
        """Create a new Custom Field on a board.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.custom_fields_post(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.custom_fields_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.custom_fields_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def custom_fields_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create a new Custom Field on a board.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.custom_fields_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method custom_fields_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/customFields', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def customfields_id_options_id_custom_field_option_delete(self, id, id_custom_field_option, **kwargs):  # noqa: E501
        """Delete an option from a Custom Field dropdown.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.customfields_id_options_id_custom_field_option_delete(id, id_custom_field_option, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the customfielditem. (required)
        :param str id_custom_field_option: ID of the customfieldoption to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.customfields_id_options_id_custom_field_option_delete_with_http_info(id, id_custom_field_option, **kwargs)  # noqa: E501
        else:
            (data) = self.customfields_id_options_id_custom_field_option_delete_with_http_info(id, id_custom_field_option, **kwargs)  # noqa: E501
            return data

    def customfields_id_options_id_custom_field_option_delete_with_http_info(self, id, id_custom_field_option, **kwargs):  # noqa: E501
        """Delete an option from a Custom Field dropdown.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.customfields_id_options_id_custom_field_option_delete_with_http_info(id, id_custom_field_option, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the customfielditem. (required)
        :param str id_custom_field_option: ID of the customfieldoption to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_custom_field_option']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method customfields_id_options_id_custom_field_option_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `customfields_id_options_id_custom_field_option_delete`")  # noqa: E501
        # verify the required parameter 'id_custom_field_option' is set
        if ('id_custom_field_option' not in params or
                params['id_custom_field_option'] is None):
            raise ValueError("Missing the required parameter `id_custom_field_option` when calling `customfields_id_options_id_custom_field_option_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_custom_field_option' in params:
            path_params['idCustomFieldOption'] = params['id_custom_field_option']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/customfields/{id}/options/{idCustomFieldOption}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def emoji_get(self, **kwargs):  # noqa: E501
        """List available emoji  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.emoji_get(async=True)
        >>> result = thread.get()

        :param async bool
        :param str locale: The locale to return emoji descriptions and names in. Defaults to the logged in member's locale.
        :param str spritesheets: true to return spritesheet URLs in the response
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.emoji_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.emoji_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def emoji_get_with_http_info(self, **kwargs):  # noqa: E501
        """List available emoji  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.emoji_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str locale: The locale to return emoji descriptions and names in. Defaults to the logged in member's locale.
        :param str spritesheets: true to return spritesheet URLs in the response
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locale', 'spritesheets']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method emoji_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'locale' in params:
            query_params.append(('locale', params['locale']))  # noqa: E501
        if 'spritesheets' in params:
            query_params.append(('spritesheets', params['spritesheets']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/emoji', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enterprises_id_admins_get(self, id, **kwargs):  # noqa: E501
        """Get an enterprise&#39;s admin members.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.enterprises_id_admins_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the enterprise to retrieve. (required)
        :param str fields: Any valid value that the nested member field resource accepts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.enterprises_id_admins_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.enterprises_id_admins_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def enterprises_id_admins_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get an enterprise&#39;s admin members.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.enterprises_id_admins_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the enterprise to retrieve. (required)
        :param str fields: Any valid value that the nested member field resource accepts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterprises_id_admins_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `enterprises_id_admins_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/enterprises/{id}/admins', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enterprises_id_admins_id_member_delete(self, id, id_member, **kwargs):  # noqa: E501
        """Remove an member as admin from an enterprise.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.enterprises_id_admins_id_member_delete(id, id_member, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the enterprise to retrieve. (required)
        :param str id_member: ID of the member to be removed as an admin from enterprise. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.enterprises_id_admins_id_member_delete_with_http_info(id, id_member, **kwargs)  # noqa: E501
        else:
            (data) = self.enterprises_id_admins_id_member_delete_with_http_info(id, id_member, **kwargs)  # noqa: E501
            return data

    def enterprises_id_admins_id_member_delete_with_http_info(self, id, id_member, **kwargs):  # noqa: E501
        """Remove an member as admin from an enterprise.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.enterprises_id_admins_id_member_delete_with_http_info(id, id_member, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the enterprise to retrieve. (required)
        :param str id_member: ID of the member to be removed as an admin from enterprise. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_member']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterprises_id_admins_id_member_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `enterprises_id_admins_id_member_delete`")  # noqa: E501
        # verify the required parameter 'id_member' is set
        if ('id_member' not in params or
                params['id_member'] is None):
            raise ValueError("Missing the required parameter `id_member` when calling `enterprises_id_admins_id_member_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_member' in params:
            path_params['idMember'] = params['id_member']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/enterprises/{id}/admins/{idMember}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enterprises_id_admins_id_member_put(self, id, id_member, **kwargs):  # noqa: E501
        """Make member an admin of enterprise.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.enterprises_id_admins_id_member_put(id, id_member, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the enterprise to retrieve. (required)
        :param str id_member: ID of member to be made an admin of enterprise. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.enterprises_id_admins_id_member_put_with_http_info(id, id_member, **kwargs)  # noqa: E501
        else:
            (data) = self.enterprises_id_admins_id_member_put_with_http_info(id, id_member, **kwargs)  # noqa: E501
            return data

    def enterprises_id_admins_id_member_put_with_http_info(self, id, id_member, **kwargs):  # noqa: E501
        """Make member an admin of enterprise.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.enterprises_id_admins_id_member_put_with_http_info(id, id_member, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the enterprise to retrieve. (required)
        :param str id_member: ID of member to be made an admin of enterprise. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_member']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterprises_id_admins_id_member_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `enterprises_id_admins_id_member_put`")  # noqa: E501
        # verify the required parameter 'id_member' is set
        if ('id_member' not in params or
                params['id_member'] is None):
            raise ValueError("Missing the required parameter `id_member` when calling `enterprises_id_admins_id_member_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_member' in params:
            path_params['idMember'] = params['id_member']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/enterprises/{id}/admins/{idMember}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enterprises_id_get(self, id, **kwargs):  # noqa: E501
        """Get an enterprise by its ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.enterprises_id_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the enterprise to retrieve. (required)
        :param str fields: Comma-separated list of: id, name, displayName, prefs, ssoActivationFailed, idAdmins, idMembers (Note that the members array returned will be paginated if members is 'normal' or 'admins'. Pagination can be controlled with member_startIndex, etc, but the API response will not contain the total available result count or pagination status data. Read the SCIM documentation here for more information on filtering), idOrganizations, products, userTypes, idMembers, idOrganizations
        :param str members: One of: none, normal, admins, owners, all
        :param str member_fields: One of: avatarHash, fullName, initials, username
        :param str member_filter: Pass a SCIM-style query to filter members. This takes precedence over the all/normal/admins value of members. If any of the member_* args are set, the member array will be paginated.
        :param str member_sort: This parameter expects a SCIM-style sorting value prefixed by a - to sort descending. If no - is prefixed, it will be sorted ascending. Note that the members array returned will be paginated if members is 'normal' or 'admins'. Pagination can be controlled with member_startIndex, etc, but the API response will not contain the total available result count or pagination status data.
        :param str member_sort_by: Deprecated: Please use member_sort. This parameter expects a SCIM-style sorting value. Note that the members array returned will be paginated if members is normal or admins. Pagination can be controlled with member_startIndex, etc, and the API response's header will contain the total count and pagination state.
        :param str member_sort_order: Deprecated: Please use member_sort. One of: ascending, descending, asc, desc
        :param str member_start_index: Any integer between 0 and 100.
        :param str member_count: 0 to 100
        :param str organizations: One of: none, members, public, all
        :param str organization_fields: Any valid value that the nested organization field resource accepts.
        :param str organization_paid_accounts:
        :param str organization_memberships: Comma-seperated list of: me, normal, admin, active, deactivated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.enterprises_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.enterprises_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def enterprises_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get an enterprise by its ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.enterprises_id_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the enterprise to retrieve. (required)
        :param str fields: Comma-separated list of: id, name, displayName, prefs, ssoActivationFailed, idAdmins, idMembers (Note that the members array returned will be paginated if members is 'normal' or 'admins'. Pagination can be controlled with member_startIndex, etc, but the API response will not contain the total available result count or pagination status data. Read the SCIM documentation here for more information on filtering), idOrganizations, products, userTypes, idMembers, idOrganizations
        :param str members: One of: none, normal, admins, owners, all
        :param str member_fields: One of: avatarHash, fullName, initials, username
        :param str member_filter: Pass a SCIM-style query to filter members. This takes precedence over the all/normal/admins value of members. If any of the member_* args are set, the member array will be paginated.
        :param str member_sort: This parameter expects a SCIM-style sorting value prefixed by a - to sort descending. If no - is prefixed, it will be sorted ascending. Note that the members array returned will be paginated if members is 'normal' or 'admins'. Pagination can be controlled with member_startIndex, etc, but the API response will not contain the total available result count or pagination status data.
        :param str member_sort_by: Deprecated: Please use member_sort. This parameter expects a SCIM-style sorting value. Note that the members array returned will be paginated if members is normal or admins. Pagination can be controlled with member_startIndex, etc, and the API response's header will contain the total count and pagination state.
        :param str member_sort_order: Deprecated: Please use member_sort. One of: ascending, descending, asc, desc
        :param str member_start_index: Any integer between 0 and 100.
        :param str member_count: 0 to 100
        :param str organizations: One of: none, members, public, all
        :param str organization_fields: Any valid value that the nested organization field resource accepts.
        :param str organization_paid_accounts:
        :param str organization_memberships: Comma-seperated list of: me, normal, admin, active, deactivated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields', 'members', 'member_fields', 'member_filter', 'member_sort', 'member_sort_by', 'member_sort_order', 'member_start_index', 'member_count', 'organizations', 'organization_fields', 'organization_paid_accounts', 'organization_memberships']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterprises_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `enterprises_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'members' in params:
            query_params.append(('members', params['members']))  # noqa: E501
        if 'member_fields' in params:
            query_params.append(('member_fields', params['member_fields']))  # noqa: E501
        if 'member_filter' in params:
            query_params.append(('member_filter', params['member_filter']))  # noqa: E501
        if 'member_sort' in params:
            query_params.append(('member_sort', params['member_sort']))  # noqa: E501
        if 'member_sort_by' in params:
            query_params.append(('member_sortBy', params['member_sort_by']))  # noqa: E501
        if 'member_sort_order' in params:
            query_params.append(('member_sortOrder', params['member_sort_order']))  # noqa: E501
        if 'member_start_index' in params:
            query_params.append(('member_startIndex', params['member_start_index']))  # noqa: E501
        if 'member_count' in params:
            query_params.append(('member_count', params['member_count']))  # noqa: E501
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
        if 'organization_fields' in params:
            query_params.append(('organization_fields', params['organization_fields']))  # noqa: E501
        if 'organization_paid_accounts' in params:
            query_params.append(('organization_paid_accounts', params['organization_paid_accounts']))  # noqa: E501
        if 'organization_memberships' in params:
            query_params.append(('organization_memberships', params['organization_memberships']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/enterprises/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enterprises_id_members_get(self, id, **kwargs):  # noqa: E501
        """Get the members of an enterprise.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.enterprises_id_members_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the enterprise to retrieve. (required)
        :param str fields: A comma-seperated list of valid member fields.
        :param str filter: Pass a SCIM-style query to filter members. This takes precedence over the all/normal/admins value of members. If any of the below member_* args are set, the member array will be paginated.
        :param str sort: This parameter expects a SCIM-style sorting value prefixed by a - to sort descending. If no - is prefixed, it will be sorted ascending. Note that the members array returned will be paginated if members is 'normal' or 'admins'. Pagination can be controlled with member_startIndex, etc, but the API response will not contain the total available result count or pagination status data.
        :param str sort_by: Deprecated: Please use sort instead. This parameter expects a SCIM-style sorting value. Note that the members array returned will be paginated if members is 'normal' or 'admins'. Pagination can be controlled with member_startIndex, etc, but the API response will not contain the total available result count or pagination status data.
        :param str sort_order: Deprecated: Please use sort instead. One of: ascending, descending, asc, desc.
        :param str start_index: Any integer between 0 and 9999.
        :param str count: SCIM-style filter.
        :param str organization_fields: Any valid value that the nested organization field resource accepts.
        :param str board_fields: Any valid value that the nested board resource accepts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.enterprises_id_members_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.enterprises_id_members_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def enterprises_id_members_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the members of an enterprise.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.enterprises_id_members_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the enterprise to retrieve. (required)
        :param str fields: A comma-seperated list of valid member fields.
        :param str filter: Pass a SCIM-style query to filter members. This takes precedence over the all/normal/admins value of members. If any of the below member_* args are set, the member array will be paginated.
        :param str sort: This parameter expects a SCIM-style sorting value prefixed by a - to sort descending. If no - is prefixed, it will be sorted ascending. Note that the members array returned will be paginated if members is 'normal' or 'admins'. Pagination can be controlled with member_startIndex, etc, but the API response will not contain the total available result count or pagination status data.
        :param str sort_by: Deprecated: Please use sort instead. This parameter expects a SCIM-style sorting value. Note that the members array returned will be paginated if members is 'normal' or 'admins'. Pagination can be controlled with member_startIndex, etc, but the API response will not contain the total available result count or pagination status data.
        :param str sort_order: Deprecated: Please use sort instead. One of: ascending, descending, asc, desc.
        :param str start_index: Any integer between 0 and 9999.
        :param str count: SCIM-style filter.
        :param str organization_fields: Any valid value that the nested organization field resource accepts.
        :param str board_fields: Any valid value that the nested board resource accepts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields', 'filter', 'sort', 'sort_by', 'sort_order', 'start_index', 'count', 'organization_fields', 'board_fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterprises_id_members_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `enterprises_id_members_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501
        if 'start_index' in params:
            query_params.append(('startIndex', params['start_index']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'organization_fields' in params:
            query_params.append(('organization_fields', params['organization_fields']))  # noqa: E501
        if 'board_fields' in params:
            query_params.append(('board_fields', params['board_fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/enterprises/{id}/members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enterprises_id_members_id_member_deactivated_put(self, id, id_member, value, **kwargs):  # noqa: E501
        """Deactivate a member of an enterprise.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.enterprises_id_members_id_member_deactivated_put(id, id_member, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the enterprise to retrieve. (required)
        :param str id_member: ID of the member to deactive. (required)
        :param str value: Determines whether the user is deactivated or not. (required)
        :param str fields: A comma separated list of any valid values that the nested member field resource accepts.
        :param str organization_fields: Any valid value that the nested organization resource accepts.
        :param str board_fields: Any valid value that the nested board resource accepts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.enterprises_id_members_id_member_deactivated_put_with_http_info(id, id_member, value, **kwargs)  # noqa: E501
        else:
            (data) = self.enterprises_id_members_id_member_deactivated_put_with_http_info(id, id_member, value, **kwargs)  # noqa: E501
            return data

    def enterprises_id_members_id_member_deactivated_put_with_http_info(self, id, id_member, value, **kwargs):  # noqa: E501
        """Deactivate a member of an enterprise.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.enterprises_id_members_id_member_deactivated_put_with_http_info(id, id_member, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the enterprise to retrieve. (required)
        :param str id_member: ID of the member to deactive. (required)
        :param str value: Determines whether the user is deactivated or not. (required)
        :param str fields: A comma separated list of any valid values that the nested member field resource accepts.
        :param str organization_fields: Any valid value that the nested organization resource accepts.
        :param str board_fields: Any valid value that the nested board resource accepts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_member', 'value', 'fields', 'organization_fields', 'board_fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterprises_id_members_id_member_deactivated_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `enterprises_id_members_id_member_deactivated_put`")  # noqa: E501
        # verify the required parameter 'id_member' is set
        if ('id_member' not in params or
                params['id_member'] is None):
            raise ValueError("Missing the required parameter `id_member` when calling `enterprises_id_members_id_member_deactivated_put`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `enterprises_id_members_id_member_deactivated_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_member' in params:
            path_params['idMember'] = params['id_member']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'organization_fields' in params:
            query_params.append(('organization_fields', params['organization_fields']))  # noqa: E501
        if 'board_fields' in params:
            query_params.append(('board_fields', params['board_fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/enterprises/{id}/members/{idMember}/deactivated', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enterprises_id_members_id_member_get(self, id, **kwargs):  # noqa: E501
        """Get a specific member of an enterprise by ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.enterprises_id_members_id_member_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the enterprise to retrieve. (required)
        :param str id_member: An ID of a member resource.
        :param str fields: A comma separated list of any valid values that the nested member field resource accepts.
        :param str organization_fields: Any valid value that the nested organization field resource accepts.
        :param str board_fields: Any valid value that the nested board resource accepts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.enterprises_id_members_id_member_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.enterprises_id_members_id_member_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def enterprises_id_members_id_member_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a specific member of an enterprise by ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.enterprises_id_members_id_member_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the enterprise to retrieve. (required)
        :param str id_member: An ID of a member resource.
        :param str fields: A comma separated list of any valid values that the nested member field resource accepts.
        :param str organization_fields: Any valid value that the nested organization field resource accepts.
        :param str board_fields: Any valid value that the nested board resource accepts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_member', 'fields', 'organization_fields', 'board_fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterprises_id_members_id_member_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `enterprises_id_members_id_member_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id_member' in params:
            query_params.append(('idMember', params['id_member']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'organization_fields' in params:
            query_params.append(('organization_fields', params['organization_fields']))  # noqa: E501
        if 'board_fields' in params:
            query_params.append(('board_fields', params['board_fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/enterprises/{id}/members/{idMember}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enterprises_id_organizations_id_organization_delete(self, id, id_member, **kwargs):  # noqa: E501
        """Remove an organization from an enterprise.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.enterprises_id_organizations_id_organization_delete(id, id_member, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the enterprise to retrieve. (required)
        :param str id_member: ID of the member to be removed as an admin from enterprise. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.enterprises_id_organizations_id_organization_delete_with_http_info(id, id_member, **kwargs)  # noqa: E501
        else:
            (data) = self.enterprises_id_organizations_id_organization_delete_with_http_info(id, id_member, **kwargs)  # noqa: E501
            return data

    def enterprises_id_organizations_id_organization_delete_with_http_info(self, id, id_member, **kwargs):  # noqa: E501
        """Remove an organization from an enterprise.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.enterprises_id_organizations_id_organization_delete_with_http_info(id, id_member, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the enterprise to retrieve. (required)
        :param str id_member: ID of the member to be removed as an admin from enterprise. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_member']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterprises_id_organizations_id_organization_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `enterprises_id_organizations_id_organization_delete`")  # noqa: E501
        # verify the required parameter 'id_member' is set
        if ('id_member' not in params or
                params['id_member'] is None):
            raise ValueError("Missing the required parameter `id_member` when calling `enterprises_id_organizations_id_organization_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_member' in params:
            path_params['idMember'] = params['id_member']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/enterprises/{id}/organizations/{idOrganization}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enterprises_id_organizations_put(self, id, id_organization, **kwargs):  # noqa: E501
        """Transfer an organization to an enterprise.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.enterprises_id_organizations_put(id, id_organization, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the enterprise to retrieve. (required)
        :param str id_organization: ID of organization to be transferred to enterprise. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.enterprises_id_organizations_put_with_http_info(id, id_organization, **kwargs)  # noqa: E501
        else:
            (data) = self.enterprises_id_organizations_put_with_http_info(id, id_organization, **kwargs)  # noqa: E501
            return data

    def enterprises_id_organizations_put_with_http_info(self, id, id_organization, **kwargs):  # noqa: E501
        """Transfer an organization to an enterprise.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.enterprises_id_organizations_put_with_http_info(id, id_organization, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the enterprise to retrieve. (required)
        :param str id_organization: ID of organization to be transferred to enterprise. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_organization']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterprises_id_organizations_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `enterprises_id_organizations_put`")  # noqa: E501
        # verify the required parameter 'id_organization' is set
        if ('id_organization' not in params or
                params['id_organization'] is None):
            raise ValueError("Missing the required parameter `id_organization` when calling `enterprises_id_organizations_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id_organization' in params:
            query_params.append(('idOrganization', params['id_organization']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/enterprises/{id}/organizations', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enterprises_id_signup_url_get(self, id, **kwargs):  # noqa: E501
        """Get the signup URL for an enterprise.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.enterprises_id_signup_url_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the enterprise to retrieve. (required)
        :param str authenticate:
        :param str confirmation_accepted:
        :param str return_url: Any valid URL.
        :param str tos_accepted: Designates whether the user has seen/consented to the Trello ToS prior to being redirected to the enterprise signup page/their IdP.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.enterprises_id_signup_url_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.enterprises_id_signup_url_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def enterprises_id_signup_url_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the signup URL for an enterprise.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.enterprises_id_signup_url_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the enterprise to retrieve. (required)
        :param str authenticate:
        :param str confirmation_accepted:
        :param str return_url: Any valid URL.
        :param str tos_accepted: Designates whether the user has seen/consented to the Trello ToS prior to being redirected to the enterprise signup page/their IdP.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authenticate', 'confirmation_accepted', 'return_url', 'tos_accepted']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterprises_id_signup_url_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `enterprises_id_signup_url_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'authenticate' in params:
            query_params.append(('authenticate', params['authenticate']))  # noqa: E501
        if 'confirmation_accepted' in params:
            query_params.append(('confirmationAccepted', params['confirmation_accepted']))  # noqa: E501
        if 'return_url' in params:
            query_params.append(('returnUrl', params['return_url']))  # noqa: E501
        if 'tos_accepted' in params:
            query_params.append(('tosAccepted', params['tos_accepted']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/enterprises/{id}/signupUrl', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enterprises_id_tokens_post(self, id, **kwargs):  # noqa: E501
        """Generate an auth token for an enterprise.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.enterprises_id_tokens_post(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the enterprise to retrieve. (required)
        :param str expiration: One of: 1hour, 1day, 30days, never
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.enterprises_id_tokens_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.enterprises_id_tokens_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def enterprises_id_tokens_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """Generate an auth token for an enterprise.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.enterprises_id_tokens_post_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the enterprise to retrieve. (required)
        :param str expiration: One of: 1hour, 1day, 30days, never
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'expiration']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterprises_id_tokens_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `enterprises_id_tokens_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'expiration' in params:
            query_params.append(('expiration', params['expiration']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/enterprises/{id}/tokens', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enterprises_id_transferrable_organization_id_organization_get(self, id, id_organization, **kwargs):  # noqa: E501
        """Get whether an organization can be transferred to an enterprise.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.enterprises_id_transferrable_organization_id_organization_get(id, id_organization, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the enterprise to retrieve. (required)
        :param str id_organization: An ID of an Organization resource. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.enterprises_id_transferrable_organization_id_organization_get_with_http_info(id, id_organization, **kwargs)  # noqa: E501
        else:
            (data) = self.enterprises_id_transferrable_organization_id_organization_get_with_http_info(id, id_organization, **kwargs)  # noqa: E501
            return data

    def enterprises_id_transferrable_organization_id_organization_get_with_http_info(self, id, id_organization, **kwargs):  # noqa: E501
        """Get whether an organization can be transferred to an enterprise.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.enterprises_id_transferrable_organization_id_organization_get_with_http_info(id, id_organization, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the enterprise to retrieve. (required)
        :param str id_organization: An ID of an Organization resource. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_organization']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterprises_id_transferrable_organization_id_organization_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `enterprises_id_transferrable_organization_id_organization_get`")  # noqa: E501
        # verify the required parameter 'id_organization' is set
        if ('id_organization' not in params or
                params['id_organization'] is None):
            raise ValueError("Missing the required parameter `id_organization` when calling `enterprises_id_transferrable_organization_id_organization_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_organization' in params:
            path_params['idOrganization'] = params['id_organization']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/enterprises/{id}/transferrable/organization/{idOrganization}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def labels_id_color_put(self, id, value, **kwargs):  # noqa: E501
        """Update the color of a label by ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.labels_id_color_put(id, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the label (required)
        :param str value: The new color for the label. See: fields for color options. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.labels_id_color_put_with_http_info(id, value, **kwargs)  # noqa: E501
        else:
            (data) = self.labels_id_color_put_with_http_info(id, value, **kwargs)  # noqa: E501
            return data

    def labels_id_color_put_with_http_info(self, id, value, **kwargs):  # noqa: E501
        """Update the color of a label by ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.labels_id_color_put_with_http_info(id, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the label (required)
        :param str value: The new color for the label. See: fields for color options. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method labels_id_color_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `labels_id_color_put`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `labels_id_color_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/labels/{id}/color', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def labels_id_delete(self, id, **kwargs):  # noqa: E501
        """Delete a label by ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.labels_id_delete(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the label to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.labels_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.labels_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def labels_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a label by ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.labels_id_delete_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the label to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method labels_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `labels_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/labels/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def labels_id_get(self, id, **kwargs):  # noqa: E501
        """Get information about a label by ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.labels_id_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str fields: all or a comma-separated list of fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.labels_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.labels_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def labels_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get information about a label by ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.labels_id_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str fields: all or a comma-separated list of fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method labels_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `labels_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/labels/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def labels_id_name_put(self, id, value, **kwargs):  # noqa: E501
        """Update the name of a label by ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.labels_id_name_put(id, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the label to update (required)
        :param str value: The new name for the label (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.labels_id_name_put_with_http_info(id, value, **kwargs)  # noqa: E501
        else:
            (data) = self.labels_id_name_put_with_http_info(id, value, **kwargs)  # noqa: E501
            return data

    def labels_id_name_put_with_http_info(self, id, value, **kwargs):  # noqa: E501
        """Update the name of a label by ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.labels_id_name_put_with_http_info(id, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the label to update (required)
        :param str value: The new name for the label (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method labels_id_name_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `labels_id_name_put`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `labels_id_name_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/labels/{id}/name', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def labels_id_put(self, id, **kwargs):  # noqa: E501
        """Update a label by ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.labels_id_put(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the label to update (required)
        :param str name: The new name for the label
        :param str color: The new color for the label. See: fields for color options
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.labels_id_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.labels_id_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def labels_id_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update a label by ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.labels_id_put_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id of the label to update (required)
        :param str name: The new name for the label
        :param str color: The new color for the label. See: fields for color options
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'color']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method labels_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `labels_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'color' in params:
            query_params.append(('color', params['color']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/labels/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def labels_post(self, name, color, id_board, **kwargs):  # noqa: E501
        """Create a new label on a board.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.labels_post(name, color, id_board, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name for the label (required)
        :param str color: The color for the label. See fields for color options. (required)
        :param str id_board: The ID of the board to create the label on. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.labels_post_with_http_info(name, color, id_board, **kwargs)  # noqa: E501
        else:
            (data) = self.labels_post_with_http_info(name, color, id_board, **kwargs)  # noqa: E501
            return data

    def labels_post_with_http_info(self, name, color, id_board, **kwargs):  # noqa: E501
        """Create a new label on a board.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.labels_post_with_http_info(name, color, id_board, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name for the label (required)
        :param str color: The color for the label. See fields for color options. (required)
        :param str id_board: The ID of the board to create the label on. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'color', 'id_board']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method labels_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `labels_post`")  # noqa: E501
        # verify the required parameter 'color' is set
        if ('color' not in params or
                params['color'] is None):
            raise ValueError("Missing the required parameter `color` when calling `labels_post`")  # noqa: E501
        # verify the required parameter 'id_board' is set
        if ('id_board' not in params or
                params['id_board'] is None):
            raise ValueError("Missing the required parameter `id_board` when calling `labels_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'color' in params:
            query_params.append(('color', params['color']))  # noqa: E501
        if 'id_board' in params:
            query_params.append(('idBoard', params['id_board']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/labels', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lists_id_actions_get(self, id, **kwargs):  # noqa: E501
        """List the actions on a list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.lists_id_actions_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the list (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.lists_id_actions_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.lists_id_actions_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def lists_id_actions_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """List the actions on a list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.lists_id_actions_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the list (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lists_id_actions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `lists_id_actions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{id}/actions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lists_id_archive_all_cards_post(self, id, **kwargs):  # noqa: E501
        """Archive all cards in a list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.lists_id_archive_all_cards_post(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the list (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.lists_id_archive_all_cards_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.lists_id_archive_all_cards_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def lists_id_archive_all_cards_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """Archive all cards in a list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.lists_id_archive_all_cards_post_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the list (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lists_id_archive_all_cards_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `lists_id_archive_all_cards_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{id}/archiveAllCards', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lists_id_board_get(self, id, **kwargs):  # noqa: E501
        """Get the board a list is on  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.lists_id_board_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the list (required)
        :param str fields: all or a comma-separated list of board fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.lists_id_board_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.lists_id_board_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def lists_id_board_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the board a list is on  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.lists_id_board_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the list (required)
        :param str fields: all or a comma-separated list of board fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lists_id_board_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `lists_id_board_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{id}/board', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lists_id_cards_get(self, id, **kwargs):  # noqa: E501
        """List the cards in a list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.lists_id_cards_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the list (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.lists_id_cards_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.lists_id_cards_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def lists_id_cards_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """List the cards in a list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.lists_id_cards_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the list (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lists_id_cards_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `lists_id_cards_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{id}/cards', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lists_id_closed_put(self, id, **kwargs):  # noqa: E501
        """Archive or unarchive a list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.lists_id_closed_put(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the list (required)
        :param str value: Set to true to close (archive) the list
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.lists_id_closed_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.lists_id_closed_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def lists_id_closed_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """Archive or unarchive a list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.lists_id_closed_put_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the list (required)
        :param str value: Set to true to close (archive) the list
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lists_id_closed_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `lists_id_closed_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{id}/closed', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lists_id_field_get(self, id, field, **kwargs):  # noqa: E501
        """Get a specific property of a list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.lists_id_field_get(id, field, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the list (required)
        :param str field: The field to return. See fields (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.lists_id_field_get_with_http_info(id, field, **kwargs)  # noqa: E501
        else:
            (data) = self.lists_id_field_get_with_http_info(id, field, **kwargs)  # noqa: E501
            return data

    def lists_id_field_get_with_http_info(self, id, field, **kwargs):  # noqa: E501
        """Get a specific property of a list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.lists_id_field_get_with_http_info(id, field, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the list (required)
        :param str field: The field to return. See fields (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'field']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lists_id_field_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `lists_id_field_get`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `lists_id_field_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'field' in params:
            path_params['field'] = params['field']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{id}/{field}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lists_id_get(self, id, **kwargs):  # noqa: E501
        """Get information about a list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.lists_id_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the list (required)
        :param str fields: all or a comma separated list of fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.lists_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.lists_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def lists_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get information about a list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.lists_id_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the list (required)
        :param str fields: all or a comma separated list of fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lists_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `lists_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lists_id_id_board_put(self, id, **kwargs):  # noqa: E501
        """Move a list to a new board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.lists_id_id_board_put(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the list (required)
        :param str value: The ID of the board to move the list to
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.lists_id_id_board_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.lists_id_id_board_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def lists_id_id_board_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """Move a list to a new board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.lists_id_id_board_put_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the list (required)
        :param str value: The ID of the board to move the list to
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lists_id_id_board_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `lists_id_id_board_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{id}/idBoard', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lists_id_move_all_cards_post(self, id, id_board, id_list, **kwargs):  # noqa: E501
        """Move all cards in a list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.lists_id_move_all_cards_post(id, id_board, id_list, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the list (required)
        :param str id_board: The ID of the board the cards should be moved to (required)
        :param str id_list: The ID of the list that the cards should be moved to (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.lists_id_move_all_cards_post_with_http_info(id, id_board, id_list, **kwargs)  # noqa: E501
        else:
            (data) = self.lists_id_move_all_cards_post_with_http_info(id, id_board, id_list, **kwargs)  # noqa: E501
            return data

    def lists_id_move_all_cards_post_with_http_info(self, id, id_board, id_list, **kwargs):  # noqa: E501
        """Move all cards in a list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.lists_id_move_all_cards_post_with_http_info(id, id_board, id_list, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the list (required)
        :param str id_board: The ID of the board the cards should be moved to (required)
        :param str id_list: The ID of the list that the cards should be moved to (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_board', 'id_list']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lists_id_move_all_cards_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `lists_id_move_all_cards_post`")  # noqa: E501
        # verify the required parameter 'id_board' is set
        if ('id_board' not in params or
                params['id_board'] is None):
            raise ValueError("Missing the required parameter `id_board` when calling `lists_id_move_all_cards_post`")  # noqa: E501
        # verify the required parameter 'id_list' is set
        if ('id_list' not in params or
                params['id_list'] is None):
            raise ValueError("Missing the required parameter `id_list` when calling `lists_id_move_all_cards_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id_board' in params:
            query_params.append(('idBoard', params['id_board']))  # noqa: E501
        if 'id_list' in params:
            query_params.append(('idList', params['id_list']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{id}/moveAllCards', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lists_id_name_put(self, id, **kwargs):  # noqa: E501
        """Rename a list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.lists_id_name_put(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the list (required)
        :param str value: The new name for the list
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.lists_id_name_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.lists_id_name_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def lists_id_name_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """Rename a list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.lists_id_name_put_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the list (required)
        :param str value: The new name for the list
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lists_id_name_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `lists_id_name_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{id}/name', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lists_id_pos_put(self, id, **kwargs):  # noqa: E501
        """Change the position of a list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.lists_id_pos_put(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the list (required)
        :param str value: top, bottom, or a positive float
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.lists_id_pos_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.lists_id_pos_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def lists_id_pos_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """Change the position of a list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.lists_id_pos_put_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the list (required)
        :param str value: top, bottom, or a positive float
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lists_id_pos_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `lists_id_pos_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{id}/pos', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lists_id_put(self, id, **kwargs):  # noqa: E501
        """Update the properties of a list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.lists_id_put(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the list to update (required)
        :param str name: New name for the list
        :param str closed: Whether the list should be closed (archived)
        :param str id_board: ID of a board the list should be moved to
        :param str pos: New position for the list: top, bottom, or a positive floating point number
        :param str subscribed: Whether the active member is subscribed to this list
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.lists_id_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.lists_id_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def lists_id_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update the properties of a list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.lists_id_put_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the list to update (required)
        :param str name: New name for the list
        :param str closed: Whether the list should be closed (archived)
        :param str id_board: ID of a board the list should be moved to
        :param str pos: New position for the list: top, bottom, or a positive floating point number
        :param str subscribed: Whether the active member is subscribed to this list
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'closed', 'id_board', 'pos', 'subscribed']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lists_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `lists_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'closed' in params:
            query_params.append(('closed', params['closed']))  # noqa: E501
        if 'id_board' in params:
            query_params.append(('idBoard', params['id_board']))  # noqa: E501
        if 'pos' in params:
            query_params.append(('pos', params['pos']))  # noqa: E501
        if 'subscribed' in params:
            query_params.append(('subscribed', params['subscribed']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lists_id_subscribed_put(self, id, **kwargs):  # noqa: E501
        """Subscribe or unsubscribe from a list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.lists_id_subscribed_put(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the list (required)
        :param str value: true to subscribe, false to unsubscribe
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.lists_id_subscribed_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.lists_id_subscribed_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def lists_id_subscribed_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """Subscribe or unsubscribe from a list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.lists_id_subscribed_put_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the list (required)
        :param str value: true to subscribe, false to unsubscribe
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lists_id_subscribed_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `lists_id_subscribed_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{id}/subscribed', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lists_post(self, name, id_board, **kwargs):  # noqa: E501
        """Create a new list on a board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.lists_post(name, id_board, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name for the list (required)
        :param str id_board: The long ID of the board the list should be created on (required)
        :param str id_list_source: ID of the list to copy into the new list
        :param str pos: Position of the list. top, bottom, or a positive floating point number
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.lists_post_with_http_info(name, id_board, **kwargs)  # noqa: E501
        else:
            (data) = self.lists_post_with_http_info(name, id_board, **kwargs)  # noqa: E501
            return data

    def lists_post_with_http_info(self, name, id_board, **kwargs):  # noqa: E501
        """Create a new list on a board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.lists_post_with_http_info(name, id_board, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name for the list (required)
        :param str id_board: The long ID of the board the list should be created on (required)
        :param str id_list_source: ID of the list to copy into the new list
        :param str pos: Position of the list. top, bottom, or a positive floating point number
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'id_board', 'id_list_source', 'pos']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lists_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `lists_post`")  # noqa: E501
        # verify the required parameter 'id_board' is set
        if ('id_board' not in params or
                params['id_board'] is None):
            raise ValueError("Missing the required parameter `id_board` when calling `lists_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'id_board' in params:
            query_params.append(('idBoard', params['id_board']))  # noqa: E501
        if 'id_list_source' in params:
            query_params.append(('idListSource', params['id_list_source']))  # noqa: E501
        if 'pos' in params:
            query_params.append(('pos', params['pos']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/lists', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_actions_get(self, id, **kwargs):  # noqa: E501
        """List the actions for a member  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_actions_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_actions_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_actions_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def members_id_actions_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """List the actions for a member  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_actions_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_actions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_actions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/actions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_avatar_post(self, id, file, **kwargs):  # noqa: E501
        """Create a new avatar for a member  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_avatar_post(id, file, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str file:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_avatar_post_with_http_info(id, file, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_avatar_post_with_http_info(id, file, **kwargs)  # noqa: E501
            return data

    def members_id_avatar_post_with_http_info(self, id, file, **kwargs):  # noqa: E501
        """Create a new avatar for a member  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_avatar_post_with_http_info(id, file, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str file:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'file']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_avatar_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_avatar_post`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `members_id_avatar_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'file' in params:
            query_params.append(('file', params['file']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/avatar', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_board_backgrounds_get(self, id, **kwargs):  # noqa: E501
        """Get a member&#39;s custom board backgrounds  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_board_backgrounds_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str filter: One of: all, custom, default, none, premium
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_board_backgrounds_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_board_backgrounds_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def members_id_board_backgrounds_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a member&#39;s custom board backgrounds  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_board_backgrounds_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str filter: One of: all, custom, default, none, premium
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_board_backgrounds_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_board_backgrounds_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/boardBackgrounds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_board_backgrounds_id_background_delete(self, id, id_background, **kwargs):  # noqa: E501
        """Delete a board background  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_board_backgrounds_id_background_delete(id, id_background, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str id_background: The ID of the board background to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_board_backgrounds_id_background_delete_with_http_info(id, id_background, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_board_backgrounds_id_background_delete_with_http_info(id, id_background, **kwargs)  # noqa: E501
            return data

    def members_id_board_backgrounds_id_background_delete_with_http_info(self, id, id_background, **kwargs):  # noqa: E501
        """Delete a board background  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_board_backgrounds_id_background_delete_with_http_info(id, id_background, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str id_background: The ID of the board background to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_background']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_board_backgrounds_id_background_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_board_backgrounds_id_background_delete`")  # noqa: E501
        # verify the required parameter 'id_background' is set
        if ('id_background' not in params or
                params['id_background'] is None):
            raise ValueError("Missing the required parameter `id_background` when calling `members_id_board_backgrounds_id_background_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_background' in params:
            path_params['idBackground'] = params['id_background']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/boardBackgrounds/{idBackground}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_board_backgrounds_id_background_get(self, id, id_background, **kwargs):  # noqa: E501
        """Get a member&#39;s board background  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_board_backgrounds_id_background_get(id, id_background, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str id_background: The ID of the board background (required)
        :param str fields: all or a comma-separated list of: brightness, fullSizeUrl, scaled, tile
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_board_backgrounds_id_background_get_with_http_info(id, id_background, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_board_backgrounds_id_background_get_with_http_info(id, id_background, **kwargs)  # noqa: E501
            return data

    def members_id_board_backgrounds_id_background_get_with_http_info(self, id, id_background, **kwargs):  # noqa: E501
        """Get a member&#39;s board background  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_board_backgrounds_id_background_get_with_http_info(id, id_background, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str id_background: The ID of the board background (required)
        :param str fields: all or a comma-separated list of: brightness, fullSizeUrl, scaled, tile
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_background', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_board_backgrounds_id_background_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_board_backgrounds_id_background_get`")  # noqa: E501
        # verify the required parameter 'id_background' is set
        if ('id_background' not in params or
                params['id_background'] is None):
            raise ValueError("Missing the required parameter `id_background` when calling `members_id_board_backgrounds_id_background_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_background' in params:
            path_params['idBackground'] = params['id_background']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/boardBackgrounds/{idBackground}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_board_backgrounds_id_background_put(self, id, id_background, **kwargs):  # noqa: E501
        """Update a board background  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_board_backgrounds_id_background_put(id, id_background, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str id_background: The ID of the board background to update (required)
        :param str brightness: One of: dark, light, unknown
        :param str tile: Whether the background should be tiled
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_board_backgrounds_id_background_put_with_http_info(id, id_background, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_board_backgrounds_id_background_put_with_http_info(id, id_background, **kwargs)  # noqa: E501
            return data

    def members_id_board_backgrounds_id_background_put_with_http_info(self, id, id_background, **kwargs):  # noqa: E501
        """Update a board background  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_board_backgrounds_id_background_put_with_http_info(id, id_background, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str id_background: The ID of the board background to update (required)
        :param str brightness: One of: dark, light, unknown
        :param str tile: Whether the background should be tiled
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_background', 'brightness', 'tile']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_board_backgrounds_id_background_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_board_backgrounds_id_background_put`")  # noqa: E501
        # verify the required parameter 'id_background' is set
        if ('id_background' not in params or
                params['id_background'] is None):
            raise ValueError("Missing the required parameter `id_background` when calling `members_id_board_backgrounds_id_background_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_background' in params:
            path_params['idBackground'] = params['id_background']  # noqa: E501

        query_params = []
        if 'brightness' in params:
            query_params.append(('brightness', params['brightness']))  # noqa: E501
        if 'tile' in params:
            query_params.append(('tile', params['tile']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/boardBackgrounds/{idBackground}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_board_backgrounds_post(self, id, file, **kwargs):  # noqa: E501
        """Upload a new boardBackground  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_board_backgrounds_post(id, file, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str file:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_board_backgrounds_post_with_http_info(id, file, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_board_backgrounds_post_with_http_info(id, file, **kwargs)  # noqa: E501
            return data

    def members_id_board_backgrounds_post_with_http_info(self, id, file, **kwargs):  # noqa: E501
        """Upload a new boardBackground  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_board_backgrounds_post_with_http_info(id, file, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str file:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'file']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_board_backgrounds_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_board_backgrounds_post`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `members_id_board_backgrounds_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'file' in params:
            query_params.append(('file', params['file']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/boardBackgrounds', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_board_stars_get(self, id, **kwargs):  # noqa: E501
        """List a member&#39;s board stars  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_board_stars_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_board_stars_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_board_stars_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def members_id_board_stars_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """List a member&#39;s board stars  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_board_stars_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_board_stars_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_board_stars_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/boardStars', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_board_stars_id_star_delete(self, id, id_star, **kwargs):  # noqa: E501
        """Unstar a board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_board_stars_id_star_delete(id, id_star, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str id_star: The ID of the board star to remove (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_board_stars_id_star_delete_with_http_info(id, id_star, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_board_stars_id_star_delete_with_http_info(id, id_star, **kwargs)  # noqa: E501
            return data

    def members_id_board_stars_id_star_delete_with_http_info(self, id, id_star, **kwargs):  # noqa: E501
        """Unstar a board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_board_stars_id_star_delete_with_http_info(id, id_star, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str id_star: The ID of the board star to remove (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_star']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_board_stars_id_star_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_board_stars_id_star_delete`")  # noqa: E501
        # verify the required parameter 'id_star' is set
        if ('id_star' not in params or
                params['id_star'] is None):
            raise ValueError("Missing the required parameter `id_star` when calling `members_id_board_stars_id_star_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_star' in params:
            path_params['idStar'] = params['id_star']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/boardStars/{idStar}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_board_stars_id_star_get(self, id, id_star, **kwargs):  # noqa: E501
        """Get a specific boardStar  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_board_stars_id_star_get(id, id_star, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str id_star: The ID of the board star (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_board_stars_id_star_get_with_http_info(id, id_star, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_board_stars_id_star_get_with_http_info(id, id_star, **kwargs)  # noqa: E501
            return data

    def members_id_board_stars_id_star_get_with_http_info(self, id, id_star, **kwargs):  # noqa: E501
        """Get a specific boardStar  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_board_stars_id_star_get_with_http_info(id, id_star, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str id_star: The ID of the board star (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_star']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_board_stars_id_star_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_board_stars_id_star_get`")  # noqa: E501
        # verify the required parameter 'id_star' is set
        if ('id_star' not in params or
                params['id_star'] is None):
            raise ValueError("Missing the required parameter `id_star` when calling `members_id_board_stars_id_star_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_star' in params:
            path_params['idStar'] = params['id_star']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/boardStars/{idStar}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_board_stars_id_star_put(self, id, id_star, **kwargs):  # noqa: E501
        """Update the position of a starred board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_board_stars_id_star_put(id, id_star, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str id_star: The ID of the board star to update (required)
        :param str pos: New position for the starred board. top, bottom, or a positive float.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_board_stars_id_star_put_with_http_info(id, id_star, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_board_stars_id_star_put_with_http_info(id, id_star, **kwargs)  # noqa: E501
            return data

    def members_id_board_stars_id_star_put_with_http_info(self, id, id_star, **kwargs):  # noqa: E501
        """Update the position of a starred board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_board_stars_id_star_put_with_http_info(id, id_star, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str id_star: The ID of the board star to update (required)
        :param str pos: New position for the starred board. top, bottom, or a positive float.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_star', 'pos']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_board_stars_id_star_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_board_stars_id_star_put`")  # noqa: E501
        # verify the required parameter 'id_star' is set
        if ('id_star' not in params or
                params['id_star'] is None):
            raise ValueError("Missing the required parameter `id_star` when calling `members_id_board_stars_id_star_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_star' in params:
            path_params['idStar'] = params['id_star']  # noqa: E501

        query_params = []
        if 'pos' in params:
            query_params.append(('pos', params['pos']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/boardStars/{idStar}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_board_stars_post(self, id, id_board, pos, **kwargs):  # noqa: E501
        """Star a new board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_board_stars_post(id, id_board, pos, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str id_board: The ID of the board to star (required)
        :param str pos: The position of the newly starred board. top, bottom, or a positive float. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_board_stars_post_with_http_info(id, id_board, pos, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_board_stars_post_with_http_info(id, id_board, pos, **kwargs)  # noqa: E501
            return data

    def members_id_board_stars_post_with_http_info(self, id, id_board, pos, **kwargs):  # noqa: E501
        """Star a new board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_board_stars_post_with_http_info(id, id_board, pos, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str id_board: The ID of the board to star (required)
        :param str pos: The position of the newly starred board. top, bottom, or a positive float. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_board', 'pos']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_board_stars_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_board_stars_post`")  # noqa: E501
        # verify the required parameter 'id_board' is set
        if ('id_board' not in params or
                params['id_board'] is None):
            raise ValueError("Missing the required parameter `id_board` when calling `members_id_board_stars_post`")  # noqa: E501
        # verify the required parameter 'pos' is set
        if ('pos' not in params or
                params['pos'] is None):
            raise ValueError("Missing the required parameter `pos` when calling `members_id_board_stars_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id_board' in params:
            query_params.append(('idBoard', params['id_board']))  # noqa: E501
        if 'pos' in params:
            query_params.append(('pos', params['pos']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/boardStars', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_boards_get(self, id, **kwargs):  # noqa: E501
        """Lists the boards a member has access to  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_boards_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str filter: all or a comma-separated list of: closed, members, open, organization, public, starred
        :param str fields: all or a comma-separated list of board fields
        :param str lists: Which lists to include with the boards. One of: all, closed, none, open
        :param str memberships: all or a comma-separated list of active, admin, deactivated, me, normal
        :param str organization: Whether to include the organization object with the boards
        :param str organization_fields: all or a comma-separated list of organization fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_boards_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_boards_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def members_id_boards_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Lists the boards a member has access to  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_boards_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str filter: all or a comma-separated list of: closed, members, open, organization, public, starred
        :param str fields: all or a comma-separated list of board fields
        :param str lists: Which lists to include with the boards. One of: all, closed, none, open
        :param str memberships: all or a comma-separated list of active, admin, deactivated, me, normal
        :param str organization: Whether to include the organization object with the boards
        :param str organization_fields: all or a comma-separated list of organization fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter', 'fields', 'lists', 'memberships', 'organization', 'organization_fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_boards_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_boards_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'lists' in params:
            query_params.append(('lists', params['lists']))  # noqa: E501
        if 'memberships' in params:
            query_params.append(('memberships', params['memberships']))  # noqa: E501
        if 'organization' in params:
            query_params.append(('organization', params['organization']))  # noqa: E501
        if 'organization_fields' in params:
            query_params.append(('organization_fields', params['organization_fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/boards', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_boards_invited_get(self, id, **kwargs):  # noqa: E501
        """Get the boards the member has been invited to  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_boards_invited_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str fields: all or a comma-separated list of board fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_boards_invited_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_boards_invited_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def members_id_boards_invited_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the boards the member has been invited to  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_boards_invited_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str fields: all or a comma-separated list of board fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_boards_invited_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_boards_invited_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/boardsInvited', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_cards_get(self, id, **kwargs):  # noqa: E501
        """Gets the cards a member is on  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_cards_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str filter: One of: all, closed, none, open, visible
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_cards_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_cards_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def members_id_cards_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Gets the cards a member is on  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_cards_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str filter: One of: all, closed, none, open, visible
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_cards_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_cards_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/cards', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_custom_board_backgrounds_get(self, id, **kwargs):  # noqa: E501
        """Get a member&#39;s custom board backgrounds  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_custom_board_backgrounds_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_custom_board_backgrounds_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_custom_board_backgrounds_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def members_id_custom_board_backgrounds_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a member&#39;s custom board backgrounds  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_custom_board_backgrounds_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_custom_board_backgrounds_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_custom_board_backgrounds_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/customBoardBackgrounds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_custom_board_backgrounds_id_background_delete(self, id, id_background, **kwargs):  # noqa: E501
        """Delete a custom board background  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_custom_board_backgrounds_id_background_delete(id, id_background, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str id_background: The ID of the custom board background to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_custom_board_backgrounds_id_background_delete_with_http_info(id, id_background, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_custom_board_backgrounds_id_background_delete_with_http_info(id, id_background, **kwargs)  # noqa: E501
            return data

    def members_id_custom_board_backgrounds_id_background_delete_with_http_info(self, id, id_background, **kwargs):  # noqa: E501
        """Delete a custom board background  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_custom_board_backgrounds_id_background_delete_with_http_info(id, id_background, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str id_background: The ID of the custom board background to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_background']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_custom_board_backgrounds_id_background_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_custom_board_backgrounds_id_background_delete`")  # noqa: E501
        # verify the required parameter 'id_background' is set
        if ('id_background' not in params or
                params['id_background'] is None):
            raise ValueError("Missing the required parameter `id_background` when calling `members_id_custom_board_backgrounds_id_background_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_background' in params:
            path_params['idBackground'] = params['id_background']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/customBoardBackgrounds/{idBackground}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_custom_board_backgrounds_id_background_get(self, id, **kwargs):  # noqa: E501
        """Get a specific custom board background  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_custom_board_backgrounds_id_background_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str fields: all or a comma-separated list of brightness, fullSizeUrl, scaled, tile
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_custom_board_backgrounds_id_background_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_custom_board_backgrounds_id_background_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def members_id_custom_board_backgrounds_id_background_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a specific custom board background  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_custom_board_backgrounds_id_background_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str fields: all or a comma-separated list of brightness, fullSizeUrl, scaled, tile
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_custom_board_backgrounds_id_background_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_custom_board_backgrounds_id_background_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/customBoardBackgrounds/{idBackground}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_custom_board_backgrounds_id_background_put(self, id, **kwargs):  # noqa: E501
        """members_id_custom_board_backgrounds_id_background_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_custom_board_backgrounds_id_background_put(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str brightness: One of: dark, light, unknown
        :param str tile: Whether to tile the background
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_custom_board_backgrounds_id_background_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_custom_board_backgrounds_id_background_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def members_id_custom_board_backgrounds_id_background_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """members_id_custom_board_backgrounds_id_background_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_custom_board_backgrounds_id_background_put_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str brightness: One of: dark, light, unknown
        :param str tile: Whether to tile the background
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'brightness', 'tile']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_custom_board_backgrounds_id_background_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_custom_board_backgrounds_id_background_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'brightness' in params:
            query_params.append(('brightness', params['brightness']))  # noqa: E501
        if 'tile' in params:
            query_params.append(('tile', params['tile']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/customBoardBackgrounds/{idBackground}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_custom_board_backgrounds_post(self, id, file, **kwargs):  # noqa: E501
        """Upload a new custom board background  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_custom_board_backgrounds_post(id, file, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str file:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_custom_board_backgrounds_post_with_http_info(id, file, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_custom_board_backgrounds_post_with_http_info(id, file, **kwargs)  # noqa: E501
            return data

    def members_id_custom_board_backgrounds_post_with_http_info(self, id, file, **kwargs):  # noqa: E501
        """Upload a new custom board background  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_custom_board_backgrounds_post_with_http_info(id, file, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str file:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'file']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_custom_board_backgrounds_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_custom_board_backgrounds_post`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `members_id_custom_board_backgrounds_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'file' in params:
            query_params.append(('file', params['file']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/customBoardBackgrounds', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_custom_emoji_get(self, id, **kwargs):  # noqa: E501
        """Get a member&#39;s uploaded custom emoji  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_custom_emoji_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_custom_emoji_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_custom_emoji_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def members_id_custom_emoji_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a member&#39;s uploaded custom emoji  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_custom_emoji_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_custom_emoji_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_custom_emoji_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/customEmoji', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_custom_emoji_id_emoji_get(self, id, id_emoji, **kwargs):  # noqa: E501
        """Get a custom emoji  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_custom_emoji_id_emoji_get(id, id_emoji, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str id_emoji: The ID of the custom emoji (required)
        :param str fields: all or a comma-separated list of name, url
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_custom_emoji_id_emoji_get_with_http_info(id, id_emoji, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_custom_emoji_id_emoji_get_with_http_info(id, id_emoji, **kwargs)  # noqa: E501
            return data

    def members_id_custom_emoji_id_emoji_get_with_http_info(self, id, id_emoji, **kwargs):  # noqa: E501
        """Get a custom emoji  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_custom_emoji_id_emoji_get_with_http_info(id, id_emoji, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str id_emoji: The ID of the custom emoji (required)
        :param str fields: all or a comma-separated list of name, url
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_emoji', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_custom_emoji_id_emoji_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_custom_emoji_id_emoji_get`")  # noqa: E501
        # verify the required parameter 'id_emoji' is set
        if ('id_emoji' not in params or
                params['id_emoji'] is None):
            raise ValueError("Missing the required parameter `id_emoji` when calling `members_id_custom_emoji_id_emoji_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_emoji' in params:
            path_params['idEmoji'] = params['id_emoji']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/customEmoji/{idEmoji}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_custom_emoji_post(self, id, file, name, **kwargs):  # noqa: E501
        """Upload a new custom emoji  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_custom_emoji_post(id, file, name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str file:  (required)
        :param str name: Name for the emoji. 2 - 64 characters (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_custom_emoji_post_with_http_info(id, file, name, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_custom_emoji_post_with_http_info(id, file, name, **kwargs)  # noqa: E501
            return data

    def members_id_custom_emoji_post_with_http_info(self, id, file, name, **kwargs):  # noqa: E501
        """Upload a new custom emoji  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_custom_emoji_post_with_http_info(id, file, name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str file:  (required)
        :param str name: Name for the emoji. 2 - 64 characters (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'file', 'name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_custom_emoji_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_custom_emoji_post`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `members_id_custom_emoji_post`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `members_id_custom_emoji_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'file' in params:
            query_params.append(('file', params['file']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/customEmoji', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_custom_stickers_get(self, id, **kwargs):  # noqa: E501
        """Get a member&#39;s uploaded stickers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_custom_stickers_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_custom_stickers_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_custom_stickers_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def members_id_custom_stickers_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a member&#39;s uploaded stickers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_custom_stickers_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_custom_stickers_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_custom_stickers_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/customStickers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_custom_stickers_id_sticker_delete(self, id, id_sticker, **kwargs):  # noqa: E501
        """Delete a custom sticker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_custom_stickers_id_sticker_delete(id, id_sticker, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str id_sticker: The ID of the custom sticker to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_custom_stickers_id_sticker_delete_with_http_info(id, id_sticker, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_custom_stickers_id_sticker_delete_with_http_info(id, id_sticker, **kwargs)  # noqa: E501
            return data

    def members_id_custom_stickers_id_sticker_delete_with_http_info(self, id, id_sticker, **kwargs):  # noqa: E501
        """Delete a custom sticker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_custom_stickers_id_sticker_delete_with_http_info(id, id_sticker, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str id_sticker: The ID of the custom sticker to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_sticker']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_custom_stickers_id_sticker_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_custom_stickers_id_sticker_delete`")  # noqa: E501
        # verify the required parameter 'id_sticker' is set
        if ('id_sticker' not in params or
                params['id_sticker'] is None):
            raise ValueError("Missing the required parameter `id_sticker` when calling `members_id_custom_stickers_id_sticker_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_sticker' in params:
            path_params['idSticker'] = params['id_sticker']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/customStickers/{idSticker}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_custom_stickers_id_sticker_get(self, id, id_sticker, **kwargs):  # noqa: E501
        """Get an uploaded sticker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_custom_stickers_id_sticker_get(id, id_sticker, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str id_sticker: The ID of the uploaded sticker (required)
        :param str fields: all or a comma-separated list of scaled, url
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_custom_stickers_id_sticker_get_with_http_info(id, id_sticker, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_custom_stickers_id_sticker_get_with_http_info(id, id_sticker, **kwargs)  # noqa: E501
            return data

    def members_id_custom_stickers_id_sticker_get_with_http_info(self, id, id_sticker, **kwargs):  # noqa: E501
        """Get an uploaded sticker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_custom_stickers_id_sticker_get_with_http_info(id, id_sticker, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str id_sticker: The ID of the uploaded sticker (required)
        :param str fields: all or a comma-separated list of scaled, url
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_sticker', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_custom_stickers_id_sticker_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_custom_stickers_id_sticker_get`")  # noqa: E501
        # verify the required parameter 'id_sticker' is set
        if ('id_sticker' not in params or
                params['id_sticker'] is None):
            raise ValueError("Missing the required parameter `id_sticker` when calling `members_id_custom_stickers_id_sticker_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_sticker' in params:
            path_params['idSticker'] = params['id_sticker']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/customStickers/{idSticker}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_custom_stickers_post(self, id, file, **kwargs):  # noqa: E501
        """Upload a new custom sticker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_custom_stickers_post(id, file, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str file:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_custom_stickers_post_with_http_info(id, file, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_custom_stickers_post_with_http_info(id, file, **kwargs)  # noqa: E501
            return data

    def members_id_custom_stickers_post_with_http_info(self, id, file, **kwargs):  # noqa: E501
        """Upload a new custom sticker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_custom_stickers_post_with_http_info(id, file, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str file:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'file']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_custom_stickers_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_custom_stickers_post`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `members_id_custom_stickers_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'file' in params:
            query_params.append(('file', params['file']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/customStickers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_enterprises_get(self, id, id_sticker, **kwargs):  # noqa: E501
        """Get the enterprises that a member belongs to.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_enterprises_get(id, id_sticker, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str id_sticker: The ID of the uploaded sticker (required)
        :param str fields: all or a comma-separated list of scaled, url
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_enterprises_get_with_http_info(id, id_sticker, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_enterprises_get_with_http_info(id, id_sticker, **kwargs)  # noqa: E501
            return data

    def members_id_enterprises_get_with_http_info(self, id, id_sticker, **kwargs):  # noqa: E501
        """Get the enterprises that a member belongs to.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_enterprises_get_with_http_info(id, id_sticker, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str id_sticker: The ID of the uploaded sticker (required)
        :param str fields: all or a comma-separated list of scaled, url
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_sticker', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_enterprises_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_enterprises_get`")  # noqa: E501
        # verify the required parameter 'id_sticker' is set
        if ('id_sticker' not in params or
                params['id_sticker'] is None):
            raise ValueError("Missing the required parameter `id_sticker` when calling `members_id_enterprises_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_sticker' in params:
            path_params['idSticker'] = params['id_sticker']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/enterprises/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_field_get(self, id, field, **kwargs):  # noqa: E501
        """Get a particular property of a member  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_field_get(id, field, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str field: One of the member fields (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_field_get_with_http_info(id, field, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_field_get_with_http_info(id, field, **kwargs)  # noqa: E501
            return data

    def members_id_field_get_with_http_info(self, id, field, **kwargs):  # noqa: E501
        """Get a particular property of a member  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_field_get_with_http_info(id, field, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str field: One of the member fields (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'field']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_field_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_field_get`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `members_id_field_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'field' in params:
            path_params['field'] = params['field']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/{field}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_get(self, id, **kwargs):  # noqa: E501
        """Get a member  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str actions: See the Actions Nested Resource
        :param str boards: See the Boards Nested Resource
        :param str board_backgrounds: One of: all, custom, default, none, premium
        :param str boards_invited: all or a comma-separated list of: closed, members, open, organization, pinned, public, starred, unpinned
        :param str boards_invited_fields: all or a comma-separated list of board fields
        :param str board_stars:
        :param str cards: See the Cards Nested Resource for additional options
        :param str custom_board_backgrounds: all or none
        :param str custom_emoji: all or none
        :param str custom_stickers: all or none
        :param str fields: all or a comma-separated list of member fields
        :param str notifications: See the Notifications Nested Resource
        :param str organizations: One of: all, members, none, public
        :param str organization_fields: all or a comma-separated list of organization fields
        :param str organization_paid_account:
        :param str organizations_invited: One of: all, members, none, public
        :param str organizations_invited_fields: all or a comma-separated list of organization fields
        :param str paid_account:
        :param str saved_searches:
        :param str tokens: all or none
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def members_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a member  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str actions: See the Actions Nested Resource
        :param str boards: See the Boards Nested Resource
        :param str board_backgrounds: One of: all, custom, default, none, premium
        :param str boards_invited: all or a comma-separated list of: closed, members, open, organization, pinned, public, starred, unpinned
        :param str boards_invited_fields: all or a comma-separated list of board fields
        :param str board_stars:
        :param str cards: See the Cards Nested Resource for additional options
        :param str custom_board_backgrounds: all or none
        :param str custom_emoji: all or none
        :param str custom_stickers: all or none
        :param str fields: all or a comma-separated list of member fields
        :param str notifications: See the Notifications Nested Resource
        :param str organizations: One of: all, members, none, public
        :param str organization_fields: all or a comma-separated list of organization fields
        :param str organization_paid_account:
        :param str organizations_invited: One of: all, members, none, public
        :param str organizations_invited_fields: all or a comma-separated list of organization fields
        :param str paid_account:
        :param str saved_searches:
        :param str tokens: all or none
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'actions', 'boards', 'board_backgrounds', 'boards_invited', 'boards_invited_fields', 'board_stars', 'cards', 'custom_board_backgrounds', 'custom_emoji', 'custom_stickers', 'fields', 'notifications', 'organizations', 'organization_fields', 'organization_paid_account', 'organizations_invited', 'organizations_invited_fields', 'paid_account', 'saved_searches', 'tokens']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'actions' in params:
            query_params.append(('actions', params['actions']))  # noqa: E501
        if 'boards' in params:
            query_params.append(('boards', params['boards']))  # noqa: E501
        if 'board_backgrounds' in params:
            query_params.append(('boardBackgrounds', params['board_backgrounds']))  # noqa: E501
        if 'boards_invited' in params:
            query_params.append(('boardsInvited', params['boards_invited']))  # noqa: E501
        if 'boards_invited_fields' in params:
            query_params.append(('boardsInvited_fields', params['boards_invited_fields']))  # noqa: E501
        if 'board_stars' in params:
            query_params.append(('boardStars', params['board_stars']))  # noqa: E501
        if 'cards' in params:
            query_params.append(('cards', params['cards']))  # noqa: E501
        if 'custom_board_backgrounds' in params:
            query_params.append(('customBoardBackgrounds', params['custom_board_backgrounds']))  # noqa: E501
        if 'custom_emoji' in params:
            query_params.append(('customEmoji', params['custom_emoji']))  # noqa: E501
        if 'custom_stickers' in params:
            query_params.append(('customStickers', params['custom_stickers']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'notifications' in params:
            query_params.append(('notifications', params['notifications']))  # noqa: E501
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
        if 'organization_fields' in params:
            query_params.append(('organization_fields', params['organization_fields']))  # noqa: E501
        if 'organization_paid_account' in params:
            query_params.append(('organization_paid_account', params['organization_paid_account']))  # noqa: E501
        if 'organizations_invited' in params:
            query_params.append(('organizationsInvited', params['organizations_invited']))  # noqa: E501
        if 'organizations_invited_fields' in params:
            query_params.append(('organizationsInvited_fields', params['organizations_invited_fields']))  # noqa: E501
        if 'paid_account' in params:
            query_params.append(('paid_account', params['paid_account']))  # noqa: E501
        if 'saved_searches' in params:
            query_params.append(('savedSearches', params['saved_searches']))  # noqa: E501
        if 'tokens' in params:
            query_params.append(('tokens', params['tokens']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_notifications_get(self, id, **kwargs):  # noqa: E501
        """Get a member&#39;s notifications  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_notifications_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str entities:
        :param str display:
        :param str filter:
        :param str read_filter: One of: all, read, unread
        :param str fields: all or a comma-separated list of notification fields
        :param str limit: Max 1000
        :param str page: Max 100
        :param str before: A notification ID
        :param str since: A notification ID
        :param str member_creator:
        :param str member_creator_fields: all or a comma-separated list of member fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_notifications_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_notifications_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def members_id_notifications_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a member&#39;s notifications  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_notifications_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str entities:
        :param str display:
        :param str filter:
        :param str read_filter: One of: all, read, unread
        :param str fields: all or a comma-separated list of notification fields
        :param str limit: Max 1000
        :param str page: Max 100
        :param str before: A notification ID
        :param str since: A notification ID
        :param str member_creator:
        :param str member_creator_fields: all or a comma-separated list of member fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'entities', 'display', 'filter', 'read_filter', 'fields', 'limit', 'page', 'before', 'since', 'member_creator', 'member_creator_fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_notifications_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_notifications_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'entities' in params:
            query_params.append(('entities', params['entities']))  # noqa: E501
        if 'display' in params:
            query_params.append(('display', params['display']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'read_filter' in params:
            query_params.append(('read_filter', params['read_filter']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501
        if 'since' in params:
            query_params.append(('since', params['since']))  # noqa: E501
        if 'member_creator' in params:
            query_params.append(('memberCreator', params['member_creator']))  # noqa: E501
        if 'member_creator_fields' in params:
            query_params.append(('memberCreator_fields', params['member_creator_fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/notifications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_one_time_messages_dismissed_post(self, id, value, **kwargs):  # noqa: E501
        """Dismiss a message  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_one_time_messages_dismissed_post(id, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str value: The message to dismiss (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_one_time_messages_dismissed_post_with_http_info(id, value, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_one_time_messages_dismissed_post_with_http_info(id, value, **kwargs)  # noqa: E501
            return data

    def members_id_one_time_messages_dismissed_post_with_http_info(self, id, value, **kwargs):  # noqa: E501
        """Dismiss a message  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_one_time_messages_dismissed_post_with_http_info(id, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str value: The message to dismiss (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_one_time_messages_dismissed_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_one_time_messages_dismissed_post`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `members_id_one_time_messages_dismissed_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/oneTimeMessagesDismissed', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_organizations_get(self, id, **kwargs):  # noqa: E501
        """Get a member&#39;s teams  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_organizations_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str filter: One of: all, members, none, public (Note: members filters to only private teams)
        :param str fields: all or a comma-separated list of organization fields
        :param str paid_account:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_organizations_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_organizations_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def members_id_organizations_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a member&#39;s teams  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_organizations_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str filter: One of: all, members, none, public (Note: members filters to only private teams)
        :param str fields: all or a comma-separated list of organization fields
        :param str paid_account:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter', 'fields', 'paid_account']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_organizations_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_organizations_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'paid_account' in params:
            query_params.append(('paid_account', params['paid_account']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/organizations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_organizations_invited_get(self, id, **kwargs):  # noqa: E501
        """Get a member&#39;s teams they have been invited to  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_organizations_invited_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str fields: all or a comma-separated list of organization fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_organizations_invited_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_organizations_invited_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def members_id_organizations_invited_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a member&#39;s teams they have been invited to  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_organizations_invited_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str fields: all or a comma-separated list of organization fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_organizations_invited_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_organizations_invited_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/organizationsInvited', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_put(self, id, **kwargs):  # noqa: E501
        """Update a member  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_put(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str full_name: New name for the member. Cannot begin or end with a space.
        :param str initials: New initials for the member. 1-4 characters long.
        :param str username: New username for the member. At least 3 characters long, only lowercase letters, underscores, and numbers. Must be unique.
        :param str bio:
        :param str avatar_source: One of: gravatar, none, upload
        :param str prefscolor_blind:
        :param str prefslocale:
        :param str prefsminutes_between_summaries: -1 for disabled, 1, or 60
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def members_id_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update a member  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_put_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str full_name: New name for the member. Cannot begin or end with a space.
        :param str initials: New initials for the member. 1-4 characters long.
        :param str username: New username for the member. At least 3 characters long, only lowercase letters, underscores, and numbers. Must be unique.
        :param str bio:
        :param str avatar_source: One of: gravatar, none, upload
        :param str prefscolor_blind:
        :param str prefslocale:
        :param str prefsminutes_between_summaries: -1 for disabled, 1, or 60
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'full_name', 'initials', 'username', 'bio', 'avatar_source', 'prefscolor_blind', 'prefslocale', 'prefsminutes_between_summaries']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'full_name' in params:
            query_params.append(('fullName', params['full_name']))  # noqa: E501
        if 'initials' in params:
            query_params.append(('initials', params['initials']))  # noqa: E501
        if 'username' in params:
            query_params.append(('username', params['username']))  # noqa: E501
        if 'bio' in params:
            query_params.append(('bio', params['bio']))  # noqa: E501
        if 'avatar_source' in params:
            query_params.append(('avatarSource', params['avatar_source']))  # noqa: E501
        if 'prefscolor_blind' in params:
            query_params.append(('prefs/colorBlind', params['prefscolor_blind']))  # noqa: E501
        if 'prefslocale' in params:
            query_params.append(('prefs/locale', params['prefslocale']))  # noqa: E501
        if 'prefsminutes_between_summaries' in params:
            query_params.append(('prefs/minutesBetweenSummaries', params['prefsminutes_between_summaries']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_saved_searches_get(self, id, **kwargs):  # noqa: E501
        """List the saved searches of a member  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_saved_searches_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_saved_searches_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_saved_searches_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def members_id_saved_searches_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """List the saved searches of a member  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_saved_searches_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_saved_searches_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_saved_searches_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/savedSearches', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_saved_searches_id_search_delete(self, id, id_search, **kwargs):  # noqa: E501
        """Delete a saved search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_saved_searches_id_search_delete(id, id_search, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str id_search: The ID of the saved search to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_saved_searches_id_search_delete_with_http_info(id, id_search, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_saved_searches_id_search_delete_with_http_info(id, id_search, **kwargs)  # noqa: E501
            return data

    def members_id_saved_searches_id_search_delete_with_http_info(self, id, id_search, **kwargs):  # noqa: E501
        """Delete a saved search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_saved_searches_id_search_delete_with_http_info(id, id_search, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str id_search: The ID of the saved search to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_search']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_saved_searches_id_search_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_saved_searches_id_search_delete`")  # noqa: E501
        # verify the required parameter 'id_search' is set
        if ('id_search' not in params or
                params['id_search'] is None):
            raise ValueError("Missing the required parameter `id_search` when calling `members_id_saved_searches_id_search_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_search' in params:
            path_params['idSearch'] = params['id_search']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/savedSearches/{idSearch}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_saved_searches_id_search_get(self, id, **kwargs):  # noqa: E501
        """Get a saved search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_saved_searches_id_search_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_saved_searches_id_search_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_saved_searches_id_search_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def members_id_saved_searches_id_search_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a saved search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_saved_searches_id_search_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_saved_searches_id_search_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_saved_searches_id_search_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/savedSearches/{idSearch}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_saved_searches_id_search_put(self, id, **kwargs):  # noqa: E501
        """Update a saved search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_saved_searches_id_search_put(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str name: The new name for the saved search
        :param str query: The new search query
        :param str pos: New position for saves search. top, bottom, or a positive float.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_saved_searches_id_search_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_saved_searches_id_search_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def members_id_saved_searches_id_search_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update a saved search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_saved_searches_id_search_put_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str name: The new name for the saved search
        :param str query: The new search query
        :param str pos: New position for saves search. top, bottom, or a positive float.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'query', 'pos']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_saved_searches_id_search_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_saved_searches_id_search_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'pos' in params:
            query_params.append(('pos', params['pos']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/savedSearches/{idSearch}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_saved_searches_post(self, id, name, query, pos, **kwargs):  # noqa: E501
        """Create a new saved search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_saved_searches_post(id, name, query, pos, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str name: The name for the saved search (required)
        :param str query: The search query (required)
        :param str pos: The position of the saved search. top, bottom, or a positive float. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_saved_searches_post_with_http_info(id, name, query, pos, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_saved_searches_post_with_http_info(id, name, query, pos, **kwargs)  # noqa: E501
            return data

    def members_id_saved_searches_post_with_http_info(self, id, name, query, pos, **kwargs):  # noqa: E501
        """Create a new saved search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_saved_searches_post_with_http_info(id, name, query, pos, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str name: The name for the saved search (required)
        :param str query: The search query (required)
        :param str pos: The position of the saved search. top, bottom, or a positive float. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'query', 'pos']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_saved_searches_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_saved_searches_post`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `members_id_saved_searches_post`")  # noqa: E501
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `members_id_saved_searches_post`")  # noqa: E501
        # verify the required parameter 'pos' is set
        if ('pos' not in params or
                params['pos'] is None):
            raise ValueError("Missing the required parameter `pos` when calling `members_id_saved_searches_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'pos' in params:
            query_params.append(('pos', params['pos']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/savedSearches', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def members_id_tokens_get(self, id, **kwargs):  # noqa: E501
        """List a members app tokens  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_tokens_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str webhooks: Whether to include webhooks
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.members_id_tokens_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.members_id_tokens_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def members_id_tokens_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """List a members app tokens  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.members_id_tokens_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or username of the member (required)
        :param str webhooks: Whether to include webhooks
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'webhooks']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_id_tokens_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `members_id_tokens_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'webhooks' in params:
            query_params.append(('webhooks', params['webhooks']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/tokens', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notifications_all_read_post(self, **kwargs):  # noqa: E501
        """Mark all notifications as read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.notifications_all_read_post(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.notifications_all_read_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.notifications_all_read_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def notifications_all_read_post_with_http_info(self, **kwargs):  # noqa: E501
        """Mark all notifications as read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.notifications_all_read_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notifications_all_read_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/notifications/all/read', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notifications_id_board_get(self, id, **kwargs):  # noqa: E501
        """Get the board a notification is associated with  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.notifications_id_board_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the notification (required)
        :param str fields: all or a comma-separated list of boardfields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.notifications_id_board_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.notifications_id_board_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def notifications_id_board_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the board a notification is associated with  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.notifications_id_board_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the notification (required)
        :param str fields: all or a comma-separated list of boardfields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notifications_id_board_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `notifications_id_board_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/notifications/{id}/board', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notifications_id_card_get(self, id, **kwargs):  # noqa: E501
        """Get the card a notification is associated with  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.notifications_id_card_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the notification (required)
        :param str fields: all or a comma-separated list of card fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.notifications_id_card_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.notifications_id_card_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def notifications_id_card_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the card a notification is associated with  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.notifications_id_card_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the notification (required)
        :param str fields: all or a comma-separated list of card fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notifications_id_card_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `notifications_id_card_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/notifications/{id}/card', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notifications_id_field_get(self, id, field, **kwargs):  # noqa: E501
        """Get a specific property of a notification  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.notifications_id_field_get(id, field, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the notification (required)
        :param str field: A notification field (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.notifications_id_field_get_with_http_info(id, field, **kwargs)  # noqa: E501
        else:
            (data) = self.notifications_id_field_get_with_http_info(id, field, **kwargs)  # noqa: E501
            return data

    def notifications_id_field_get_with_http_info(self, id, field, **kwargs):  # noqa: E501
        """Get a specific property of a notification  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.notifications_id_field_get_with_http_info(id, field, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the notification (required)
        :param str field: A notification field (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'field']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notifications_id_field_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `notifications_id_field_get`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `notifications_id_field_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'field' in params:
            path_params['field'] = params['field']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/notifications/{id}/{field}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notifications_id_get(self, id, **kwargs):  # noqa: E501
        """notifications_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.notifications_id_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the notification (required)
        :param str board: Whether to include the board object
        :param str board_fields: all or a comma-separated list of board fields
        :param str card: Whether to include the card object
        :param str card_fields: all or a comma-separated list of card fields
        :param str display: Whether to include the display object with the results
        :param str entities: Whether to include the entities object with the results
        :param str fields: all or a comma-separated list of notification fields
        :param str list: Whether to include the list object
        :param str member: Whether to include the member object
        :param str member_fields: all or a comma-separated list of member fields
        :param str member_creator: Whether to include the member object of the creator
        :param str member_creator_fields: all or a comma-separated list of member fields
        :param str organization: Whether to include the organization object
        :param str organization_fields: all or a comma-separated list of organization fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.notifications_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.notifications_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def notifications_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """notifications_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.notifications_id_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the notification (required)
        :param str board: Whether to include the board object
        :param str board_fields: all or a comma-separated list of board fields
        :param str card: Whether to include the card object
        :param str card_fields: all or a comma-separated list of card fields
        :param str display: Whether to include the display object with the results
        :param str entities: Whether to include the entities object with the results
        :param str fields: all or a comma-separated list of notification fields
        :param str list: Whether to include the list object
        :param str member: Whether to include the member object
        :param str member_fields: all or a comma-separated list of member fields
        :param str member_creator: Whether to include the member object of the creator
        :param str member_creator_fields: all or a comma-separated list of member fields
        :param str organization: Whether to include the organization object
        :param str organization_fields: all or a comma-separated list of organization fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'board', 'board_fields', 'card', 'card_fields', 'display', 'entities', 'fields', 'list', 'member', 'member_fields', 'member_creator', 'member_creator_fields', 'organization', 'organization_fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notifications_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `notifications_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'board' in params:
            query_params.append(('board', params['board']))  # noqa: E501
        if 'board_fields' in params:
            query_params.append(('board_fields', params['board_fields']))  # noqa: E501
        if 'card' in params:
            query_params.append(('card', params['card']))  # noqa: E501
        if 'card_fields' in params:
            query_params.append(('card_fields', params['card_fields']))  # noqa: E501
        if 'display' in params:
            query_params.append(('display', params['display']))  # noqa: E501
        if 'entities' in params:
            query_params.append(('entities', params['entities']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'list' in params:
            query_params.append(('list', params['list']))  # noqa: E501
        if 'member' in params:
            query_params.append(('member', params['member']))  # noqa: E501
        if 'member_fields' in params:
            query_params.append(('member_fields', params['member_fields']))  # noqa: E501
        if 'member_creator' in params:
            query_params.append(('memberCreator', params['member_creator']))  # noqa: E501
        if 'member_creator_fields' in params:
            query_params.append(('memberCreator_fields', params['member_creator_fields']))  # noqa: E501
        if 'organization' in params:
            query_params.append(('organization', params['organization']))  # noqa: E501
        if 'organization_fields' in params:
            query_params.append(('organization_fields', params['organization_fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/notifications/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notifications_id_list_get(self, id, **kwargs):  # noqa: E501
        """Get the list a notification is associated with  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.notifications_id_list_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the notification (required)
        :param str fields: all or a comma-separated list of list fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.notifications_id_list_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.notifications_id_list_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def notifications_id_list_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the list a notification is associated with  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.notifications_id_list_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the notification (required)
        :param str fields: all or a comma-separated list of list fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notifications_id_list_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `notifications_id_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/notifications/{id}/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notifications_id_member_creator_get(self, id, **kwargs):  # noqa: E501
        """Get the member who created the notification  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.notifications_id_member_creator_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the notification (required)
        :param str fields: all or a comma-separated list of member fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.notifications_id_member_creator_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.notifications_id_member_creator_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def notifications_id_member_creator_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the member who created the notification  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.notifications_id_member_creator_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the notification (required)
        :param str fields: all or a comma-separated list of member fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notifications_id_member_creator_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `notifications_id_member_creator_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/notifications/{id}/memberCreator', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notifications_id_member_get(self, id, **kwargs):  # noqa: E501
        """Get the member (not the creator) a notification is about  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.notifications_id_member_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the notification (required)
        :param str fields: all or a comma-separated list of member fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.notifications_id_member_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.notifications_id_member_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def notifications_id_member_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the member (not the creator) a notification is about  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.notifications_id_member_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the notification (required)
        :param str fields: all or a comma-separated list of member fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notifications_id_member_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `notifications_id_member_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/notifications/{id}/member', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notifications_id_organization_get(self, id, **kwargs):  # noqa: E501
        """Get the organization a notification is associated with  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.notifications_id_organization_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the notification (required)
        :param str fields: all or a comma-separated list of organization fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.notifications_id_organization_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.notifications_id_organization_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def notifications_id_organization_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the organization a notification is associated with  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.notifications_id_organization_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the notification (required)
        :param str fields: all or a comma-separated list of organization fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notifications_id_organization_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `notifications_id_organization_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/notifications/{id}/organization', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notifications_id_put(self, id, **kwargs):  # noqa: E501
        """Update the read status of a notification  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.notifications_id_put(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the notification (required)
        :param str unread:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.notifications_id_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.notifications_id_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def notifications_id_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update the read status of a notification  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.notifications_id_put_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the notification (required)
        :param str unread:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'unread']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notifications_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `notifications_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'unread' in params:
            query_params.append(('unread', params['unread']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/notifications/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notifications_id_unread_put(self, id, **kwargs):  # noqa: E501
        """Update the read status of a notification  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.notifications_id_unread_put(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the notification (required)
        :param str value:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.notifications_id_unread_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.notifications_id_unread_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def notifications_id_unread_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update the read status of a notification  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.notifications_id_unread_put_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the notification (required)
        :param str value:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notifications_id_unread_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `notifications_id_unread_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/notifications/{id}/unread', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_actions_get(self, id, **kwargs):  # noqa: E501
        """List the actions on a team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_actions_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organizations_id_actions_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_actions_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def organizations_id_actions_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """List the actions on a team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_actions_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_actions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_actions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/actions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_boards_get(self, id, **kwargs):  # noqa: E501
        """List the boards in a team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_boards_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :param str filter: all or a comma-separated list of: open, closed, members, organization, public
        :param str fields: all or a comma-separated list of board fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organizations_id_boards_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_boards_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def organizations_id_boards_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """List the boards in a team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_boards_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :param str filter: all or a comma-separated list of: open, closed, members, organization, public
        :param str fields: all or a comma-separated list of board fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_boards_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_boards_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/boards', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_delete(self, id, **kwargs):  # noqa: E501
        """Delete a team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_delete(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organizations_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def organizations_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_delete_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_exports_get(self, id, **kwargs):  # noqa: E501
        """Retrieve the exports that exist for the given organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_exports_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organizations_id_exports_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_exports_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def organizations_id_exports_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieve the exports that exist for the given organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_exports_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_exports_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_exports_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/exports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_exports_post(self, id, **kwargs):  # noqa: E501
        """Kick off CSV export for an organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_exports_post(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the team (required)
        :param str attachments: Whether the CSV should include attachments or not.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organizations_id_exports_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_exports_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def organizations_id_exports_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """Kick off CSV export for an organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_exports_post_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the team (required)
        :param str attachments: Whether the CSV should include attachments or not.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'attachments']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_exports_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_exports_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'attachments' in params:
            query_params.append(('attachments', params['attachments']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/exports', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_field_get(self, id, field, **kwargs):  # noqa: E501
        """organizations_id_field_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_field_get(id, field, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :param str field: An organization field (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organizations_id_field_get_with_http_info(id, field, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_field_get_with_http_info(id, field, **kwargs)  # noqa: E501
            return data

    def organizations_id_field_get_with_http_info(self, id, field, **kwargs):  # noqa: E501
        """organizations_id_field_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_field_get_with_http_info(id, field, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :param str field: An organization field (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'field']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_field_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_field_get`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `organizations_id_field_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'field' in params:
            path_params['field'] = params['field']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/{field}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_get(self, id, **kwargs):  # noqa: E501
        """organizations_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organizations_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def organizations_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """organizations_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_logo_delete(self, id, **kwargs):  # noqa: E501
        """Delete a the logo from a team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_logo_delete(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organizations_id_logo_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_logo_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def organizations_id_logo_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a the logo from a team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_logo_delete_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_logo_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_logo_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/logo', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_logo_post(self, id, **kwargs):  # noqa: E501
        """Set the logo image for a team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_logo_post(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the team (required)
        :param str file: Image file for the logo
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organizations_id_logo_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_logo_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def organizations_id_logo_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """Set the logo image for a team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_logo_post_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the team (required)
        :param str file: Image file for the logo
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'file']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_logo_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_logo_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'file' in params:
            query_params.append(('file', params['file']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/logo', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_members_filter_get(self, id, filter, **kwargs):  # noqa: E501
        """organizations_id_members_filter_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_members_filter_get(id, filter, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :param str filter: One of: all, admins, normal (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organizations_id_members_filter_get_with_http_info(id, filter, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_members_filter_get_with_http_info(id, filter, **kwargs)  # noqa: E501
            return data

    def organizations_id_members_filter_get_with_http_info(self, id, filter, **kwargs):  # noqa: E501
        """organizations_id_members_filter_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_members_filter_get_with_http_info(id, filter, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :param str filter: One of: all, admins, normal (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_members_filter_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_members_filter_get`")  # noqa: E501
        # verify the required parameter 'filter' is set
        if ('filter' not in params or
                params['filter'] is None):
            raise ValueError("Missing the required parameter `filter` when calling `organizations_id_members_filter_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'filter' in params:
            path_params['filter'] = params['filter']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/members/{filter}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_members_get(self, id, **kwargs):  # noqa: E501
        """List the members in a team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_members_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organizations_id_members_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_members_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def organizations_id_members_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """List the members in a team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_members_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_members_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_members_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_members_id_member_all_delete(self, id, id_member, **kwargs):  # noqa: E501
        """Remove a member from a team and from all team boards  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_members_id_member_all_delete(id, id_member, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :param str id_member: The ID of the member to remove from the team (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organizations_id_members_id_member_all_delete_with_http_info(id, id_member, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_members_id_member_all_delete_with_http_info(id, id_member, **kwargs)  # noqa: E501
            return data

    def organizations_id_members_id_member_all_delete_with_http_info(self, id, id_member, **kwargs):  # noqa: E501
        """Remove a member from a team and from all team boards  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_members_id_member_all_delete_with_http_info(id, id_member, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :param str id_member: The ID of the member to remove from the team (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_member']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_members_id_member_all_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_members_id_member_all_delete`")  # noqa: E501
        # verify the required parameter 'id_member' is set
        if ('id_member' not in params or
                params['id_member'] is None):
            raise ValueError("Missing the required parameter `id_member` when calling `organizations_id_members_id_member_all_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_member' in params:
            path_params['idMember'] = params['id_member']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/members/{idMember}/all', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_members_id_member_deactivated_put(self, id, id_member, **kwargs):  # noqa: E501
        """Deactivate or reactivate a member of a team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_members_id_member_deactivated_put(id, id_member, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :param str id_member: The ID or username of the member to update (required)
        :param str value:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organizations_id_members_id_member_deactivated_put_with_http_info(id, id_member, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_members_id_member_deactivated_put_with_http_info(id, id_member, **kwargs)  # noqa: E501
            return data

    def organizations_id_members_id_member_deactivated_put_with_http_info(self, id, id_member, **kwargs):  # noqa: E501
        """Deactivate or reactivate a member of a team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_members_id_member_deactivated_put_with_http_info(id, id_member, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :param str id_member: The ID or username of the member to update (required)
        :param str value:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_member', 'value']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_members_id_member_deactivated_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_members_id_member_deactivated_put`")  # noqa: E501
        # verify the required parameter 'id_member' is set
        if ('id_member' not in params or
                params['id_member'] is None):
            raise ValueError("Missing the required parameter `id_member` when calling `organizations_id_members_id_member_deactivated_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_member' in params:
            path_params['idMember'] = params['id_member']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/members/{idMember}/deactivated', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_members_id_member_delete(self, id, id_member, **kwargs):  # noqa: E501
        """Remove a member from a team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_members_id_member_delete(id, id_member, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :param str id_member: The ID of the member to remove from the team (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organizations_id_members_id_member_delete_with_http_info(id, id_member, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_members_id_member_delete_with_http_info(id, id_member, **kwargs)  # noqa: E501
            return data

    def organizations_id_members_id_member_delete_with_http_info(self, id, id_member, **kwargs):  # noqa: E501
        """Remove a member from a team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_members_id_member_delete_with_http_info(id, id_member, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :param str id_member: The ID of the member to remove from the team (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_member']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_members_id_member_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_members_id_member_delete`")  # noqa: E501
        # verify the required parameter 'id_member' is set
        if ('id_member' not in params or
                params['id_member'] is None):
            raise ValueError("Missing the required parameter `id_member` when calling `organizations_id_members_id_member_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_member' in params:
            path_params['idMember'] = params['id_member']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/members/{idMember}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_members_id_member_put(self, id, id_member, type, **kwargs):  # noqa: E501
        """Add a member to a team or update their member type.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_members_id_member_put(id, id_member, type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :param str id_member: The ID or username of the member to update (required)
        :param str type: One of: admin, normal (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organizations_id_members_id_member_put_with_http_info(id, id_member, type, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_members_id_member_put_with_http_info(id, id_member, type, **kwargs)  # noqa: E501
            return data

    def organizations_id_members_id_member_put_with_http_info(self, id, id_member, type, **kwargs):  # noqa: E501
        """Add a member to a team or update their member type.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_members_id_member_put_with_http_info(id, id_member, type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :param str id_member: The ID or username of the member to update (required)
        :param str type: One of: admin, normal (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_member', 'type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_members_id_member_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_members_id_member_put`")  # noqa: E501
        # verify the required parameter 'id_member' is set
        if ('id_member' not in params or
                params['id_member'] is None):
            raise ValueError("Missing the required parameter `id_member` when calling `organizations_id_members_id_member_put`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `organizations_id_members_id_member_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_member' in params:
            path_params['idMember'] = params['id_member']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/members/{idMember}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_members_invited_get(self, id, **kwargs):  # noqa: E501
        """List the members with pending invites to a team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_members_invited_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :param str fields: all or a comma-separated list of member fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organizations_id_members_invited_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_members_invited_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def organizations_id_members_invited_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """List the members with pending invites to a team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_members_invited_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :param str fields: all or a comma-separated list of member fields
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_members_invited_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_members_invited_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/membersInvited', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_members_put(self, id, email, full_name, **kwargs):  # noqa: E501
        """organizations_id_members_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_members_put(id, email, full_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :param str email: An email address (required)
        :param str full_name: Name for the member, at least 1 character not beginning or ending with a space (required)
        :param str type: One of: admin, normal
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organizations_id_members_put_with_http_info(id, email, full_name, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_members_put_with_http_info(id, email, full_name, **kwargs)  # noqa: E501
            return data

    def organizations_id_members_put_with_http_info(self, id, email, full_name, **kwargs):  # noqa: E501
        """organizations_id_members_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_members_put_with_http_info(id, email, full_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :param str email: An email address (required)
        :param str full_name: Name for the member, at least 1 character not beginning or ending with a space (required)
        :param str type: One of: admin, normal
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'email', 'full_name', 'type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_members_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_members_put`")  # noqa: E501
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `organizations_id_members_put`")  # noqa: E501
        # verify the required parameter 'full_name' is set
        if ('full_name' not in params or
                params['full_name'] is None):
            raise ValueError("Missing the required parameter `full_name` when calling `organizations_id_members_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'full_name' in params:
            query_params.append(('fullName', params['full_name']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/members', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_memberships_get(self, id, **kwargs):  # noqa: E501
        """List the memberships of a team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_memberships_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :param str filter: all or a comma-separated list of: active, admin, deactivated, me, normal
        :param str member: Whether to include the member objects with the memberships
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organizations_id_memberships_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_memberships_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def organizations_id_memberships_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """List the memberships of a team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_memberships_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :param str filter: all or a comma-separated list of: active, admin, deactivated, me, normal
        :param str member: Whether to include the member objects with the memberships
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter', 'member']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_memberships_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_memberships_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'member' in params:
            query_params.append(('member', params['member']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/memberships', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_memberships_id_membership_get(self, id, id_membership, **kwargs):  # noqa: E501
        """List the memberships of a team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_memberships_id_membership_get(id, id_membership, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :param str id_membership: The ID of the membership to load (required)
        :param str member: Whether to include the member object in the response
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organizations_id_memberships_id_membership_get_with_http_info(id, id_membership, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_memberships_id_membership_get_with_http_info(id, id_membership, **kwargs)  # noqa: E501
            return data

    def organizations_id_memberships_id_membership_get_with_http_info(self, id, id_membership, **kwargs):  # noqa: E501
        """List the memberships of a team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_memberships_id_membership_get_with_http_info(id, id_membership, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :param str id_membership: The ID of the membership to load (required)
        :param str member: Whether to include the member object in the response
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_membership', 'member']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_memberships_id_membership_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_memberships_id_membership_get`")  # noqa: E501
        # verify the required parameter 'id_membership' is set
        if ('id_membership' not in params or
                params['id_membership'] is None):
            raise ValueError("Missing the required parameter `id_membership` when calling `organizations_id_memberships_id_membership_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_membership' in params:
            path_params['idMembership'] = params['id_membership']  # noqa: E501

        query_params = []
        if 'member' in params:
            query_params.append(('member', params['member']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/memberships/{idMembership}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_new_billable_guests_id_board_get(self, id, id_board, **kwargs):  # noqa: E501
        """Used to check whether the given board has new billable guests on it.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_new_billable_guests_id_board_get(id, id_board, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :param str id_board: The ID of the board to check for new billable guests. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organizations_id_new_billable_guests_id_board_get_with_http_info(id, id_board, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_new_billable_guests_id_board_get_with_http_info(id, id_board, **kwargs)  # noqa: E501
            return data

    def organizations_id_new_billable_guests_id_board_get_with_http_info(self, id, id_board, **kwargs):  # noqa: E501
        """Used to check whether the given board has new billable guests on it.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_new_billable_guests_id_board_get_with_http_info(id, id_board, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :param str id_board: The ID of the board to check for new billable guests. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_board']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_new_billable_guests_id_board_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_new_billable_guests_id_board_get`")  # noqa: E501
        # verify the required parameter 'id_board' is set
        if ('id_board' not in params or
                params['id_board'] is None):
            raise ValueError("Missing the required parameter `id_board` when calling `organizations_id_new_billable_guests_id_board_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_board' in params:
            path_params['idBoard'] = params['id_board']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/newBillableGuests/{idBoard}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_plugin_data_get(self, id, **kwargs):  # noqa: E501
        """Get organization scoped pluginData on this team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_plugin_data_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organizations_id_plugin_data_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_plugin_data_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def organizations_id_plugin_data_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get organization scoped pluginData on this team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_plugin_data_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_plugin_data_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_plugin_data_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/pluginData', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_prefs_associated_domain_delete(self, id, **kwargs):  # noqa: E501
        """Remove the associated Google Apps domain from a team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_prefs_associated_domain_delete(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organizations_id_prefs_associated_domain_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_prefs_associated_domain_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def organizations_id_prefs_associated_domain_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Remove the associated Google Apps domain from a team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_prefs_associated_domain_delete_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_prefs_associated_domain_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_prefs_associated_domain_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/prefs/associatedDomain', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_prefs_org_invite_restrict_delete(self, id, **kwargs):  # noqa: E501
        """Remove the email domain restriction on who can be invited to the team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_prefs_org_invite_restrict_delete(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organizations_id_prefs_org_invite_restrict_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_prefs_org_invite_restrict_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def organizations_id_prefs_org_invite_restrict_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Remove the email domain restriction on who can be invited to the team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_prefs_org_invite_restrict_delete_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_prefs_org_invite_restrict_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_prefs_org_invite_restrict_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/prefs/orgInviteRestrict', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_put(self, id, **kwargs):  # noqa: E501
        """Update an organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_put(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id or name of the organization to update (required)
        :param str name: A new name for the organization. At least 3 lowercase letters, underscores, and numbers. Must be unique
        :param str display_name: A new displayName for the organization. Must be at least 1 character long and not begin or end with a space.
        :param str desc: A new description for the organization
        :param str website: A URL starting with http://, https://, or null
        :param str prefsassociated_domain: The Google Apps domain to link this org to.
        :param str prefsexternal_members_disabled: Whether non-team members can be added to boards inside the team
        :param str prefsgoogle_apps_version: 1 or 2
        :param str prefsboard_visibility_restrictorg: Who on the team can make team visible boards. One of admin, none, org
        :param str prefsboard_visibility_restrictprivate: Who can make private boards. One of: admin, none, org
        :param str prefsboard_visibility_restrictpublic: Who on the team can make public boards. One of: admin, none, org
        :param str prefsorg_invite_restrict: An email address with optional wildcard characters. (E.g. subdomain.*.trello.com)
        :param str prefspermission_level: Whether the team page is publicly visible. One of: private, public
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organizations_id_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def organizations_id_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update an organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_put_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The id or name of the organization to update (required)
        :param str name: A new name for the organization. At least 3 lowercase letters, underscores, and numbers. Must be unique
        :param str display_name: A new displayName for the organization. Must be at least 1 character long and not begin or end with a space.
        :param str desc: A new description for the organization
        :param str website: A URL starting with http://, https://, or null
        :param str prefsassociated_domain: The Google Apps domain to link this org to.
        :param str prefsexternal_members_disabled: Whether non-team members can be added to boards inside the team
        :param str prefsgoogle_apps_version: 1 or 2
        :param str prefsboard_visibility_restrictorg: Who on the team can make team visible boards. One of admin, none, org
        :param str prefsboard_visibility_restrictprivate: Who can make private boards. One of: admin, none, org
        :param str prefsboard_visibility_restrictpublic: Who on the team can make public boards. One of: admin, none, org
        :param str prefsorg_invite_restrict: An email address with optional wildcard characters. (E.g. subdomain.*.trello.com)
        :param str prefspermission_level: Whether the team page is publicly visible. One of: private, public
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'display_name', 'desc', 'website', 'prefsassociated_domain', 'prefsexternal_members_disabled', 'prefsgoogle_apps_version', 'prefsboard_visibility_restrictorg', 'prefsboard_visibility_restrictprivate', 'prefsboard_visibility_restrictpublic', 'prefsorg_invite_restrict', 'prefspermission_level']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'display_name' in params:
            query_params.append(('displayName', params['display_name']))  # noqa: E501
        if 'desc' in params:
            query_params.append(('desc', params['desc']))  # noqa: E501
        if 'website' in params:
            query_params.append(('website', params['website']))  # noqa: E501
        if 'prefsassociated_domain' in params:
            query_params.append(('prefs/associatedDomain', params['prefsassociated_domain']))  # noqa: E501
        if 'prefsexternal_members_disabled' in params:
            query_params.append(('prefs/externalMembersDisabled', params['prefsexternal_members_disabled']))  # noqa: E501
        if 'prefsgoogle_apps_version' in params:
            query_params.append(('prefs/googleAppsVersion', params['prefsgoogle_apps_version']))  # noqa: E501
        if 'prefsboard_visibility_restrictorg' in params:
            query_params.append(('prefs/boardVisibilityRestrict/org', params['prefsboard_visibility_restrictorg']))  # noqa: E501
        if 'prefsboard_visibility_restrictprivate' in params:
            query_params.append(('prefs/boardVisibilityRestrict/private', params['prefsboard_visibility_restrictprivate']))  # noqa: E501
        if 'prefsboard_visibility_restrictpublic' in params:
            query_params.append(('prefs/boardVisibilityRestrict/public', params['prefsboard_visibility_restrictpublic']))  # noqa: E501
        if 'prefsorg_invite_restrict' in params:
            query_params.append(('prefs/orgInviteRestrict', params['prefsorg_invite_restrict']))  # noqa: E501
        if 'prefspermission_level' in params:
            query_params.append(('prefs/permissionLevel', params['prefspermission_level']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_tags_get(self, id, **kwargs):  # noqa: E501
        """List the organization&#39;s collections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_tags_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organizations_id_tags_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_tags_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def organizations_id_tags_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """List the organization&#39;s collections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_tags_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_tags_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_tags_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/tags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_tags_id_tag_delete(self, id, id_tag, **kwargs):  # noqa: E501
        """Delete an organization&#39;s tag  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_tags_id_tag_delete(id, id_tag, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :param str id_tag: The ID of the tag to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organizations_id_tags_id_tag_delete_with_http_info(id, id_tag, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_tags_id_tag_delete_with_http_info(id, id_tag, **kwargs)  # noqa: E501
            return data

    def organizations_id_tags_id_tag_delete_with_http_info(self, id, id_tag, **kwargs):  # noqa: E501
        """Delete an organization&#39;s tag  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_tags_id_tag_delete_with_http_info(id, id_tag, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the organization (required)
        :param str id_tag: The ID of the tag to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_tag']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_tags_id_tag_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_tags_id_tag_delete`")  # noqa: E501
        # verify the required parameter 'id_tag' is set
        if ('id_tag' not in params or
                params['id_tag'] is None):
            raise ValueError("Missing the required parameter `id_tag` when calling `organizations_id_tags_id_tag_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_tag' in params:
            path_params['idTag'] = params['id_tag']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/tags/{idTag}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_tags_post(self, id, name, **kwargs):  # noqa: E501
        """Create a new collection in a team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_tags_post(id, name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the team (required)
        :param str name: The name for the new collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organizations_id_tags_post_with_http_info(id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_tags_post_with_http_info(id, name, **kwargs)  # noqa: E501
            return data

    def organizations_id_tags_post_with_http_info(self, id, name, **kwargs):  # noqa: E501
        """Create a new collection in a team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_id_tags_post_with_http_info(id, name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID or name of the team (required)
        :param str name: The name for the new collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_tags_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_tags_post`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `organizations_id_tags_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/tags', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_post(self, display_name, **kwargs):  # noqa: E501
        """Create a new team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_post(display_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str display_name: (required)
        :param str desc: The description for the team
        :param str name: A string with a length of at least 3. Only lowercase letters, underscores, and numbers are allowed. Must be unique.
        :param str website: A URL starting with http:// or https://
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organizations_post_with_http_info(display_name, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_post_with_http_info(display_name, **kwargs)  # noqa: E501
            return data

    def organizations_post_with_http_info(self, display_name, **kwargs):  # noqa: E501
        """Create a new team  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_post_with_http_info(display_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str display_name: (required)
        :param str desc: The description for the team
        :param str name: A string with a length of at least 3. Only lowercase letters, underscores, and numbers are allowed. Must be unique.
        :param str website: A URL starting with http:// or https://
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['display_name', 'desc', 'name', 'website']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'display_name' is set
        if ('display_name' not in params or
                params['display_name'] is None):
            raise ValueError("Missing the required parameter `display_name` when calling `organizations_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'display_name' in params:
            query_params.append(('displayName', params['display_name']))  # noqa: E501
        if 'desc' in params:
            query_params.append(('desc', params['desc']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'website' in params:
            query_params.append(('website', params['website']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_get(self, query, **kwargs):  # noqa: E501
        """Find what you&#39;re looking for in Trello  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_get(query, async=True)
        >>> result = thread.get()

        :param async bool
        :param str query: The search query with a length of 1 to 16384 characters (required)
        :param str id_boards: mine or a comma-separated list of board ids
        :param str id_organizations: A comma-separated list of team ids
        :param str id_cards: A comma-separated list of card ids
        :param str model_types: What type or types of Trello objects you want to search. all or a comma-separated list of: actions, boards, cards, members, organizations
        :param str board_fields: all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed, url
        :param str boards_limit: The maximum number of boards returned. Maximum: 1000
        :param str card_fields: all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed, url
        :param str cards_limit: The maximum number of cards to return. Maximum: 1000
        :param str cards_page: The page of results for cards. Maximum: 100
        :param str card_board: Whether to include the parent board with card results
        :param str card_list: Whether to include the parent list with card results
        :param str card_members: Whether to include member objects with card results
        :param str card_stickers: Whether to include sticker objects with card results
        :param str card_attachments: Whether to include attachment objects with card results. A boolean value (true or false) or cover for only card cover attachments.
        :param str organization_fields: all or a comma-separated list of billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url, website
        :param str organizations_limit: The maximum number of teams to return. Maximum 1000
        :param str member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url, username
        :param str members_limit: The maximum number of members to return. Maximum 1000
        :param str partial: By default, Trello searches for each word in your query against exactly matching words within Member content. Specifying partial to be true means that we will look for content that starts with any of the words in your query.  If you are looking for a Card titled \"My Development Status Report\", by default you would need to search for \"Development\". If you have partial enabled, you will be able to search for \"dev\" but not \"velopment\".
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.search_get_with_http_info(query, **kwargs)  # noqa: E501
        else:
            (data) = self.search_get_with_http_info(query, **kwargs)  # noqa: E501
            return data

    def search_get_with_http_info(self, query, **kwargs):  # noqa: E501
        """Find what you&#39;re looking for in Trello  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_get_with_http_info(query, async=True)
        >>> result = thread.get()

        :param async bool
        :param str query: The search query with a length of 1 to 16384 characters (required)
        :param str id_boards: mine or a comma-separated list of board ids
        :param str id_organizations: A comma-separated list of team ids
        :param str id_cards: A comma-separated list of card ids
        :param str model_types: What type or types of Trello objects you want to search. all or a comma-separated list of: actions, boards, cards, members, organizations
        :param str board_fields: all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed, url
        :param str boards_limit: The maximum number of boards returned. Maximum: 1000
        :param str card_fields: all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed, url
        :param str cards_limit: The maximum number of cards to return. Maximum: 1000
        :param str cards_page: The page of results for cards. Maximum: 100
        :param str card_board: Whether to include the parent board with card results
        :param str card_list: Whether to include the parent list with card results
        :param str card_members: Whether to include member objects with card results
        :param str card_stickers: Whether to include sticker objects with card results
        :param str card_attachments: Whether to include attachment objects with card results. A boolean value (true or false) or cover for only card cover attachments.
        :param str organization_fields: all or a comma-separated list of billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url, website
        :param str organizations_limit: The maximum number of teams to return. Maximum 1000
        :param str member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url, username
        :param str members_limit: The maximum number of members to return. Maximum 1000
        :param str partial: By default, Trello searches for each word in your query against exactly matching words within Member content. Specifying partial to be true means that we will look for content that starts with any of the words in your query.  If you are looking for a Card titled \"My Development Status Report\", by default you would need to search for \"Development\". If you have partial enabled, you will be able to search for \"dev\" but not \"velopment\".
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', 'id_boards', 'id_organizations', 'id_cards', 'model_types', 'board_fields', 'boards_limit', 'card_fields', 'cards_limit', 'cards_page', 'card_board', 'card_list', 'card_members', 'card_stickers', 'card_attachments', 'organization_fields', 'organizations_limit', 'member_fields', 'members_limit', 'partial']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `search_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'id_boards' in params:
            query_params.append(('idBoards', params['id_boards']))  # noqa: E501
        if 'id_organizations' in params:
            query_params.append(('idOrganizations', params['id_organizations']))  # noqa: E501
        if 'id_cards' in params:
            query_params.append(('idCards', params['id_cards']))  # noqa: E501
        if 'model_types' in params:
            query_params.append(('modelTypes', params['model_types']))  # noqa: E501
        if 'board_fields' in params:
            query_params.append(('board_fields', params['board_fields']))  # noqa: E501
        if 'boards_limit' in params:
            query_params.append(('boards_limit', params['boards_limit']))  # noqa: E501
        if 'card_fields' in params:
            query_params.append(('card_fields', params['card_fields']))  # noqa: E501
        if 'cards_limit' in params:
            query_params.append(('cards_limit', params['cards_limit']))  # noqa: E501
        if 'cards_page' in params:
            query_params.append(('cards_page', params['cards_page']))  # noqa: E501
        if 'card_board' in params:
            query_params.append(('card_board', params['card_board']))  # noqa: E501
        if 'card_list' in params:
            query_params.append(('card_list', params['card_list']))  # noqa: E501
        if 'card_members' in params:
            query_params.append(('card_members', params['card_members']))  # noqa: E501
        if 'card_stickers' in params:
            query_params.append(('card_stickers', params['card_stickers']))  # noqa: E501
        if 'card_attachments' in params:
            query_params.append(('card_attachments', params['card_attachments']))  # noqa: E501
        if 'organization_fields' in params:
            query_params.append(('organization_fields', params['organization_fields']))  # noqa: E501
        if 'organizations_limit' in params:
            query_params.append(('organizations_limit', params['organizations_limit']))  # noqa: E501
        if 'member_fields' in params:
            query_params.append(('member_fields', params['member_fields']))  # noqa: E501
        if 'members_limit' in params:
            query_params.append(('members_limit', params['members_limit']))  # noqa: E501
        if 'partial' in params:
            query_params.append(('partial', params['partial']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_members_get(self, query, **kwargs):  # noqa: E501
        """Search for Trello members  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_members_get(query, async=True)
        >>> result = thread.get()

        :param async bool
        :param str query: Search query 1 to 16384 characters long (required)
        :param str limit: The maximum number of results to return. Maximum of 20.
        :param str id_board:
        :param str id_organization:
        :param str only_org_members:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.search_members_get_with_http_info(query, **kwargs)  # noqa: E501
        else:
            (data) = self.search_members_get_with_http_info(query, **kwargs)  # noqa: E501
            return data

    def search_members_get_with_http_info(self, query, **kwargs):  # noqa: E501
        """Search for Trello members  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_members_get_with_http_info(query, async=True)
        >>> result = thread.get()

        :param async bool
        :param str query: Search query 1 to 16384 characters long (required)
        :param str limit: The maximum number of results to return. Maximum of 20.
        :param str id_board:
        :param str id_organization:
        :param str only_org_members:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', 'limit', 'id_board', 'id_organization', 'only_org_members']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_members_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `search_members_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'id_board' in params:
            query_params.append(('idBoard', params['id_board']))  # noqa: E501
        if 'id_organization' in params:
            query_params.append(('idOrganization', params['id_organization']))  # noqa: E501
        if 'only_org_members' in params:
            query_params.append(('onlyOrgMembers', params['only_org_members']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/search/members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tokens_token_delete(self, token, **kwargs):  # noqa: E501
        """Delete a token.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.tokens_token_delete(token, async=True)
        >>> result = thread.get()

        :param async bool
        :param str token: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.tokens_token_delete_with_http_info(token, **kwargs)  # noqa: E501
        else:
            (data) = self.tokens_token_delete_with_http_info(token, **kwargs)  # noqa: E501
            return data

    def tokens_token_delete_with_http_info(self, token, **kwargs):  # noqa: E501
        """Delete a token.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.tokens_token_delete_with_http_info(token, async=True)
        >>> result = thread.get()

        :param async bool
        :param str token: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tokens_token_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `tokens_token_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/tokens/{token}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tokens_token_get(self, token, **kwargs):  # noqa: E501
        """Retrieve information about a token.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.tokens_token_get(token, async=True)
        >>> result = thread.get()

        :param async bool
        :param str token: (required)
        :param str fields: all or a comma-separated list of dateCreated, dateExpires, idMember, identifier, permissions
        :param str webhooks: Determines whether to include webhooks.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.tokens_token_get_with_http_info(token, **kwargs)  # noqa: E501
        else:
            (data) = self.tokens_token_get_with_http_info(token, **kwargs)  # noqa: E501
            return data

    def tokens_token_get_with_http_info(self, token, **kwargs):  # noqa: E501
        """Retrieve information about a token.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.tokens_token_get_with_http_info(token, async=True)
        >>> result = thread.get()

        :param async bool
        :param str token: (required)
        :param str fields: all or a comma-separated list of dateCreated, dateExpires, idMember, identifier, permissions
        :param str webhooks: Determines whether to include webhooks.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token', 'fields', 'webhooks']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tokens_token_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `tokens_token_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'webhooks' in params:
            query_params.append(('webhooks', params['webhooks']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/tokens/{token}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tokens_token_member_get(self, token, **kwargs):  # noqa: E501
        """Retrieve information about a token&#39;s owner by token.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.tokens_token_member_get(token, async=True)
        >>> result = thread.get()

        :param async bool
        :param str token: (required)
        :param str fields: all or a comma-separated list of valid fields for Member Object.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.tokens_token_member_get_with_http_info(token, **kwargs)  # noqa: E501
        else:
            (data) = self.tokens_token_member_get_with_http_info(token, **kwargs)  # noqa: E501
            return data

    def tokens_token_member_get_with_http_info(self, token, **kwargs):  # noqa: E501
        """Retrieve information about a token&#39;s owner by token.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.tokens_token_member_get_with_http_info(token, async=True)
        >>> result = thread.get()

        :param async bool
        :param str token: (required)
        :param str fields: all or a comma-separated list of valid fields for Member Object.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tokens_token_member_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `tokens_token_member_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/tokens/{token}/member', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tokens_token_webhooks_get(self, token, **kwargs):  # noqa: E501
        """Retrieve all webhooks created with a token.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.tokens_token_webhooks_get(token, async=True)
        >>> result = thread.get()

        :param async bool
        :param str token: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.tokens_token_webhooks_get_with_http_info(token, **kwargs)  # noqa: E501
        else:
            (data) = self.tokens_token_webhooks_get_with_http_info(token, **kwargs)  # noqa: E501
            return data

    def tokens_token_webhooks_get_with_http_info(self, token, **kwargs):  # noqa: E501
        """Retrieve all webhooks created with a token.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.tokens_token_webhooks_get_with_http_info(token, async=True)
        >>> result = thread.get()

        :param async bool
        :param str token: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tokens_token_webhooks_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `tokens_token_webhooks_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/tokens/{token}/webhooks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tokens_token_webhooks_id_webhook_delete(self, token, id_webhook, **kwargs):  # noqa: E501
        """Delete a webhook created with given token.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.tokens_token_webhooks_id_webhook_delete(token, id_webhook, async=True)
        >>> result = thread.get()

        :param async bool
        :param str token: (required)
        :param str id_webhook: ID of the webhook to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.tokens_token_webhooks_id_webhook_delete_with_http_info(token, id_webhook, **kwargs)  # noqa: E501
        else:
            (data) = self.tokens_token_webhooks_id_webhook_delete_with_http_info(token, id_webhook, **kwargs)  # noqa: E501
            return data

    def tokens_token_webhooks_id_webhook_delete_with_http_info(self, token, id_webhook, **kwargs):  # noqa: E501
        """Delete a webhook created with given token.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.tokens_token_webhooks_id_webhook_delete_with_http_info(token, id_webhook, async=True)
        >>> result = thread.get()

        :param async bool
        :param str token: (required)
        :param str id_webhook: ID of the webhook to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token', 'id_webhook']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tokens_token_webhooks_id_webhook_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `tokens_token_webhooks_id_webhook_delete`")  # noqa: E501
        # verify the required parameter 'id_webhook' is set
        if ('id_webhook' not in params or
                params['id_webhook'] is None):
            raise ValueError("Missing the required parameter `id_webhook` when calling `tokens_token_webhooks_id_webhook_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501
        if 'id_webhook' in params:
            path_params['idWebhook'] = params['id_webhook']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/tokens/{token}/webhooks/{idWebhook}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tokens_token_webhooks_id_webhook_get(self, token, id_webhook, **kwargs):  # noqa: E501
        """Retrieve a webhook created with a token.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.tokens_token_webhooks_id_webhook_get(token, id_webhook, async=True)
        >>> result = thread.get()

        :param async bool
        :param str token: (required)
        :param str id_webhook: ID of the Webhooks to retrieve. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.tokens_token_webhooks_id_webhook_get_with_http_info(token, id_webhook, **kwargs)  # noqa: E501
        else:
            (data) = self.tokens_token_webhooks_id_webhook_get_with_http_info(token, id_webhook, **kwargs)  # noqa: E501
            return data

    def tokens_token_webhooks_id_webhook_get_with_http_info(self, token, id_webhook, **kwargs):  # noqa: E501
        """Retrieve a webhook created with a token.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.tokens_token_webhooks_id_webhook_get_with_http_info(token, id_webhook, async=True)
        >>> result = thread.get()

        :param async bool
        :param str token: (required)
        :param str id_webhook: ID of the Webhooks to retrieve. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token', 'id_webhook']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tokens_token_webhooks_id_webhook_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `tokens_token_webhooks_id_webhook_get`")  # noqa: E501
        # verify the required parameter 'id_webhook' is set
        if ('id_webhook' not in params or
                params['id_webhook'] is None):
            raise ValueError("Missing the required parameter `id_webhook` when calling `tokens_token_webhooks_id_webhook_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501
        if 'id_webhook' in params:
            path_params['idWebhook'] = params['id_webhook']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/tokens/{token}/webhooks/{idWebhook}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tokens_token_webhooks_post(self, token, callback_url, id_model, **kwargs):  # noqa: E501
        """Create a new webhook for a token.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.tokens_token_webhooks_post(token, callback_url, id_model, async=True)
        >>> result = thread.get()

        :param async bool
        :param str token: (required)
        :param str callback_url: The URL that the webhook should POST information to. (required)
        :param str id_model: ID of the object to create a webhook on. (required)
        :param str description: A description to be displayed when retrieving information about the webhook.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.tokens_token_webhooks_post_with_http_info(token, callback_url, id_model, **kwargs)  # noqa: E501
        else:
            (data) = self.tokens_token_webhooks_post_with_http_info(token, callback_url, id_model, **kwargs)  # noqa: E501
            return data

    def tokens_token_webhooks_post_with_http_info(self, token, callback_url, id_model, **kwargs):  # noqa: E501
        """Create a new webhook for a token.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.tokens_token_webhooks_post_with_http_info(token, callback_url, id_model, async=True)
        >>> result = thread.get()

        :param async bool
        :param str token: (required)
        :param str callback_url: The URL that the webhook should POST information to. (required)
        :param str id_model: ID of the object to create a webhook on. (required)
        :param str description: A description to be displayed when retrieving information about the webhook.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token', 'callback_url', 'id_model', 'description']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tokens_token_webhooks_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `tokens_token_webhooks_post`")  # noqa: E501
        # verify the required parameter 'callback_url' is set
        if ('callback_url' not in params or
                params['callback_url'] is None):
            raise ValueError("Missing the required parameter `callback_url` when calling `tokens_token_webhooks_post`")  # noqa: E501
        # verify the required parameter 'id_model' is set
        if ('id_model' not in params or
                params['id_model'] is None):
            raise ValueError("Missing the required parameter `id_model` when calling `tokens_token_webhooks_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'callback_url' in params:
            query_params.append(('callbackURL', params['callback_url']))  # noqa: E501
        if 'id_model' in params:
            query_params.append(('idModel', params['id_model']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/tokens/{token}/webhooks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tokens_token_webhooks_webhook_id_put(self, token, webhook_id, callback_url, id_model, **kwargs):  # noqa: E501
        """Update an existing webhook.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.tokens_token_webhooks_webhook_id_put(token, webhook_id, callback_url, id_model, async=True)
        >>> result = thread.get()

        :param async bool
        :param str token: The token to which the webhook belongs (required)
        :param str webhook_id: ID of the webhook to update (required)
        :param str callback_url: The URL that the webhook should POST information to. (required)
        :param str id_model: ID of the object to create a webhook on. (required)
        :param str description: A description to be displayed when retrieving information about the webhook.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.tokens_token_webhooks_webhook_id_put_with_http_info(token, webhook_id, callback_url, id_model, **kwargs)  # noqa: E501
        else:
            (data) = self.tokens_token_webhooks_webhook_id_put_with_http_info(token, webhook_id, callback_url, id_model, **kwargs)  # noqa: E501
            return data

    def tokens_token_webhooks_webhook_id_put_with_http_info(self, token, webhook_id, callback_url, id_model, **kwargs):  # noqa: E501
        """Update an existing webhook.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.tokens_token_webhooks_webhook_id_put_with_http_info(token, webhook_id, callback_url, id_model, async=True)
        >>> result = thread.get()

        :param async bool
        :param str token: The token to which the webhook belongs (required)
        :param str webhook_id: ID of the webhook to update (required)
        :param str callback_url: The URL that the webhook should POST information to. (required)
        :param str id_model: ID of the object to create a webhook on. (required)
        :param str description: A description to be displayed when retrieving information about the webhook.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token', 'webhook_id', 'callback_url', 'id_model', 'description']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tokens_token_webhooks_webhook_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `tokens_token_webhooks_webhook_id_put`")  # noqa: E501
        # verify the required parameter 'webhook_id' is set
        if ('webhook_id' not in params or
                params['webhook_id'] is None):
            raise ValueError("Missing the required parameter `webhook_id` when calling `tokens_token_webhooks_webhook_id_put`")  # noqa: E501
        # verify the required parameter 'callback_url' is set
        if ('callback_url' not in params or
                params['callback_url'] is None):
            raise ValueError("Missing the required parameter `callback_url` when calling `tokens_token_webhooks_webhook_id_put`")  # noqa: E501
        # verify the required parameter 'id_model' is set
        if ('id_model' not in params or
                params['id_model'] is None):
            raise ValueError("Missing the required parameter `id_model` when calling `tokens_token_webhooks_webhook_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501
        if 'webhook_id' in params:
            path_params['webhookId'] = params['webhook_id']  # noqa: E501

        query_params = []
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'callback_url' in params:
            query_params.append(('callbackURL', params['callback_url']))  # noqa: E501
        if 'id_model' in params:
            query_params.append(('idModel', params['id_model']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/tokens/{token}/webhooks/{webhookId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webhooks_id_delete(self, id, **kwargs):  # noqa: E501
        """Delete a webhook by ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.webhooks_id_delete(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the webhook to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.webhooks_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.webhooks_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def webhooks_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a webhook by ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.webhooks_id_delete_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the webhook to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhooks_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `webhooks_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webhooks/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webhooks_id_field_get(self, id, field, **kwargs):  # noqa: E501
        """Get a webhook&#39;s field.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.webhooks_id_field_get(id, field, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the webhook. (required)
        :param str field: Field to retrieve. One of: active, callbackURL, description, idModel (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.webhooks_id_field_get_with_http_info(id, field, **kwargs)  # noqa: E501
        else:
            (data) = self.webhooks_id_field_get_with_http_info(id, field, **kwargs)  # noqa: E501
            return data

    def webhooks_id_field_get_with_http_info(self, id, field, **kwargs):  # noqa: E501
        """Get a webhook&#39;s field.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.webhooks_id_field_get_with_http_info(id, field, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the webhook. (required)
        :param str field: Field to retrieve. One of: active, callbackURL, description, idModel (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'field']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhooks_id_field_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `webhooks_id_field_get`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `webhooks_id_field_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'field' in params:
            path_params['field'] = params['field']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webhooks/{id}/{field}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webhooks_id_get(self, id, **kwargs):  # noqa: E501
        """Get a webhook by ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.webhooks_id_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the webhook to retrieve. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.webhooks_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.webhooks_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def webhooks_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a webhook by ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.webhooks_id_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the webhook to retrieve. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhooks_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `webhooks_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webhooks/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webhooks_id_put(self, id, **kwargs):  # noqa: E501
        """Update a webhook by ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.webhooks_id_put(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the webhook to update. (required)
        :param str description: A string with a length from 0 to 16384.
        :param str callback_url: A valid URL that is reachable with a HEAD and POST request.
        :param str id_model: ID of the model to be monitored
        :param str active: Determines whether the webhook is active and sending POST requests.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.webhooks_id_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.webhooks_id_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def webhooks_id_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update a webhook by ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.webhooks_id_put_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: ID of the webhook to update. (required)
        :param str description: A string with a length from 0 to 16384.
        :param str callback_url: A valid URL that is reachable with a HEAD and POST request.
        :param str id_model: ID of the model to be monitored
        :param str active: Determines whether the webhook is active and sending POST requests.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'description', 'callback_url', 'id_model', 'active']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhooks_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `webhooks_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'callback_url' in params:
            query_params.append(('callbackURL', params['callback_url']))  # noqa: E501
        if 'id_model' in params:
            query_params.append(('idModel', params['id_model']))  # noqa: E501
        if 'active' in params:
            query_params.append(('active', params['active']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webhooks/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webhooks_post(self, callback_url, id_model, **kwargs):  # noqa: E501
        """Create a new webhook.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.webhooks_post(callback_url, id_model, async=True)
        >>> result = thread.get()

        :param async bool
        :param str callback_url: A valid URL that is reachable with a HEAD and POST request. (required)
        :param str id_model: ID of the model to be monitored (required)
        :param str description: A string with a length from 0 to 16384.
        :param str active: Determines whether the webhook is active and sending POST requests.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.webhooks_post_with_http_info(callback_url, id_model, **kwargs)  # noqa: E501
        else:
            (data) = self.webhooks_post_with_http_info(callback_url, id_model, **kwargs)  # noqa: E501
            return data

    def webhooks_post_with_http_info(self, callback_url, id_model, **kwargs):  # noqa: E501
        """Create a new webhook.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.webhooks_post_with_http_info(callback_url, id_model, async=True)
        >>> result = thread.get()

        :param async bool
        :param str callback_url: A valid URL that is reachable with a HEAD and POST request. (required)
        :param str id_model: ID of the model to be monitored (required)
        :param str description: A string with a length from 0 to 16384.
        :param str active: Determines whether the webhook is active and sending POST requests.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['callback_url', 'id_model', 'description', 'active']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhooks_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'callback_url' is set
        if ('callback_url' not in params or
                params['callback_url'] is None):
            raise ValueError("Missing the required parameter `callback_url` when calling `webhooks_post`")  # noqa: E501
        # verify the required parameter 'id_model' is set
        if ('id_model' not in params or
                params['id_model'] is None):
            raise ValueError("Missing the required parameter `id_model` when calling `webhooks_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'callback_url' in params:
            query_params.append(('callbackURL', params['callback_url']))  # noqa: E501
        if 'id_model' in params:
            query_params.append(('idModel', params['id_model']))  # noqa: E501
        if 'active' in params:
            query_params.append(('active', params['active']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/webhooks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
