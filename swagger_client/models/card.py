# coding: utf-8

"""
    Trello Api

    Trello Api generated from the online documentation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Card(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'check_item_states': 'list[ERRORUNKNOWN]',
        'closed': 'bool',
        'desc': 'str',
        'due_complete': 'bool',
        'id': 'str',
        'id_attachment_cover': 'str',
        'id_board': 'str',
        'id_checklists': 'list[ERRORUNKNOWN]',
        'id_labels': 'list[ERRORUNKNOWN]',
        'id_list': 'str',
        'id_members': 'list[ERRORUNKNOWN]',
        'id_members_voted': 'list[ERRORUNKNOWN]',
        'id_short': 'int',
        'labels': 'list[ERRORUNKNOWN]',
        'manual_cover_attachment': 'bool',
        'name': 'str',
        'short_link': 'str',
        'short_url': 'str',
        'subscribed': 'bool',
        'url': 'str'
    }

    attribute_map = {
        'check_item_states': 'checkItemStates',
        'closed': 'closed',
        'desc': 'desc',
        'due_complete': 'dueComplete',
        'id': 'id',
        'id_attachment_cover': 'idAttachmentCover',
        'id_board': 'idBoard',
        'id_checklists': 'idChecklists',
        'id_labels': 'idLabels',
        'id_list': 'idList',
        'id_members': 'idMembers',
        'id_members_voted': 'idMembersVoted',
        'id_short': 'idShort',
        'labels': 'labels',
        'manual_cover_attachment': 'manualCoverAttachment',
        'name': 'name',
        'short_link': 'shortLink',
        'short_url': 'shortUrl',
        'subscribed': 'subscribed',
        'url': 'url'
    }

    def __init__(self, check_item_states=None, closed=None, desc=None, due_complete=None, id=None, id_attachment_cover=None, id_board=None, id_checklists=None, id_labels=None, id_list=None, id_members=None, id_members_voted=None, id_short=None, labels=None, manual_cover_attachment=None, name=None, short_link=None, short_url=None, subscribed=None, url=None):  # noqa: E501
        """Card - a model defined in Swagger"""  # noqa: E501

        self._check_item_states = None
        self._closed = None
        self._desc = None
        self._due_complete = None
        self._id = None
        self._id_attachment_cover = None
        self._id_board = None
        self._id_checklists = None
        self._id_labels = None
        self._id_list = None
        self._id_members = None
        self._id_members_voted = None
        self._id_short = None
        self._labels = None
        self._manual_cover_attachment = None
        self._name = None
        self._short_link = None
        self._short_url = None
        self._subscribed = None
        self._url = None
        self.discriminator = None

        if check_item_states is not None:
            self.check_item_states = check_item_states
        if closed is not None:
            self.closed = closed
        if desc is not None:
            self.desc = desc
        if due_complete is not None:
            self.due_complete = due_complete
        if id is not None:
            self.id = id
        if id_attachment_cover is not None:
            self.id_attachment_cover = id_attachment_cover
        if id_board is not None:
            self.id_board = id_board
        if id_checklists is not None:
            self.id_checklists = id_checklists
        if id_labels is not None:
            self.id_labels = id_labels
        if id_list is not None:
            self.id_list = id_list
        if id_members is not None:
            self.id_members = id_members
        if id_members_voted is not None:
            self.id_members_voted = id_members_voted
        if id_short is not None:
            self.id_short = id_short
        if labels is not None:
            self.labels = labels
        if manual_cover_attachment is not None:
            self.manual_cover_attachment = manual_cover_attachment
        if name is not None:
            self.name = name
        if short_link is not None:
            self.short_link = short_link
        if short_url is not None:
            self.short_url = short_url
        if subscribed is not None:
            self.subscribed = subscribed
        if url is not None:
            self.url = url

    @property
    def check_item_states(self):
        """Gets the check_item_states of this Card.  # noqa: E501

          # noqa: E501

        :return: The check_item_states of this Card.  # noqa: E501
        :rtype: list[ERRORUNKNOWN]
        """
        return self._check_item_states

    @check_item_states.setter
    def check_item_states(self, check_item_states):
        """Sets the check_item_states of this Card.

          # noqa: E501

        :param check_item_states: The check_item_states of this Card.  # noqa: E501
        :type: list[ERRORUNKNOWN]
        """

        self._check_item_states = check_item_states

    @property
    def closed(self):
        """Gets the closed of this Card.  # noqa: E501

        Whether the card is closed (archived). Note: Archived lists and boards do not cascade archives to cards. A card can have closed: false but be on an archived board.  # noqa: E501

        :return: The closed of this Card.  # noqa: E501
        :rtype: bool
        """
        return self._closed

    @closed.setter
    def closed(self, closed):
        """Sets the closed of this Card.

        Whether the card is closed (archived). Note: Archived lists and boards do not cascade archives to cards. A card can have closed: false but be on an archived board.  # noqa: E501

        :param closed: The closed of this Card.  # noqa: E501
        :type: bool
        """

        self._closed = closed

    @property
    def desc(self):
        """Gets the desc of this Card.  # noqa: E501

        The description for the card. Up to 16384 chars.  # noqa: E501

        :return: The desc of this Card.  # noqa: E501
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this Card.

        The description for the card. Up to 16384 chars.  # noqa: E501

        :param desc: The desc of this Card.  # noqa: E501
        :type: str
        """

        self._desc = desc

    @property
    def due_complete(self):
        """Gets the due_complete of this Card.  # noqa: E501

        Whether the due date has been marked complete  # noqa: E501

        :return: The due_complete of this Card.  # noqa: E501
        :rtype: bool
        """
        return self._due_complete

    @due_complete.setter
    def due_complete(self, due_complete):
        """Sets the due_complete of this Card.

        Whether the due date has been marked complete  # noqa: E501

        :param due_complete: The due_complete of this Card.  # noqa: E501
        :type: bool
        """

        self._due_complete = due_complete

    @property
    def id(self):
        """Gets the id of this Card.  # noqa: E501

        The ID of the card  # noqa: E501

        :return: The id of this Card.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Card.

        The ID of the card  # noqa: E501

        :param id: The id of this Card.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def id_attachment_cover(self):
        """Gets the id_attachment_cover of this Card.  # noqa: E501

        The id of the attachment selected as the cover image, if one exists  # noqa: E501

        :return: The id_attachment_cover of this Card.  # noqa: E501
        :rtype: str
        """
        return self._id_attachment_cover

    @id_attachment_cover.setter
    def id_attachment_cover(self, id_attachment_cover):
        """Sets the id_attachment_cover of this Card.

        The id of the attachment selected as the cover image, if one exists  # noqa: E501

        :param id_attachment_cover: The id_attachment_cover of this Card.  # noqa: E501
        :type: str
        """

        self._id_attachment_cover = id_attachment_cover

    @property
    def id_board(self):
        """Gets the id_board of this Card.  # noqa: E501

        The ID of the board the card is on  # noqa: E501

        :return: The id_board of this Card.  # noqa: E501
        :rtype: str
        """
        return self._id_board

    @id_board.setter
    def id_board(self, id_board):
        """Sets the id_board of this Card.

        The ID of the board the card is on  # noqa: E501

        :param id_board: The id_board of this Card.  # noqa: E501
        :type: str
        """

        self._id_board = id_board

    @property
    def id_checklists(self):
        """Gets the id_checklists of this Card.  # noqa: E501

        An array of checklist IDs that are on this card  # noqa: E501

        :return: The id_checklists of this Card.  # noqa: E501
        :rtype: list[ERRORUNKNOWN]
        """
        return self._id_checklists

    @id_checklists.setter
    def id_checklists(self, id_checklists):
        """Sets the id_checklists of this Card.

        An array of checklist IDs that are on this card  # noqa: E501

        :param id_checklists: The id_checklists of this Card.  # noqa: E501
        :type: list[ERRORUNKNOWN]
        """

        self._id_checklists = id_checklists

    @property
    def id_labels(self):
        """Gets the id_labels of this Card.  # noqa: E501

        An array of label IDs that are on this card  # noqa: E501

        :return: The id_labels of this Card.  # noqa: E501
        :rtype: list[ERRORUNKNOWN]
        """
        return self._id_labels

    @id_labels.setter
    def id_labels(self, id_labels):
        """Sets the id_labels of this Card.

        An array of label IDs that are on this card  # noqa: E501

        :param id_labels: The id_labels of this Card.  # noqa: E501
        :type: list[ERRORUNKNOWN]
        """

        self._id_labels = id_labels

    @property
    def id_list(self):
        """Gets the id_list of this Card.  # noqa: E501

        The ID of the list the card is in  # noqa: E501

        :return: The id_list of this Card.  # noqa: E501
        :rtype: str
        """
        return self._id_list

    @id_list.setter
    def id_list(self, id_list):
        """Sets the id_list of this Card.

        The ID of the list the card is in  # noqa: E501

        :param id_list: The id_list of this Card.  # noqa: E501
        :type: str
        """

        self._id_list = id_list

    @property
    def id_members(self):
        """Gets the id_members of this Card.  # noqa: E501

        An array of member IDs that are on this card  # noqa: E501

        :return: The id_members of this Card.  # noqa: E501
        :rtype: list[ERRORUNKNOWN]
        """
        return self._id_members

    @id_members.setter
    def id_members(self, id_members):
        """Sets the id_members of this Card.

        An array of member IDs that are on this card  # noqa: E501

        :param id_members: The id_members of this Card.  # noqa: E501
        :type: list[ERRORUNKNOWN]
        """

        self._id_members = id_members

    @property
    def id_members_voted(self):
        """Gets the id_members_voted of this Card.  # noqa: E501

        An array of member IDs who have voted on this card  # noqa: E501

        :return: The id_members_voted of this Card.  # noqa: E501
        :rtype: list[ERRORUNKNOWN]
        """
        return self._id_members_voted

    @id_members_voted.setter
    def id_members_voted(self, id_members_voted):
        """Sets the id_members_voted of this Card.

        An array of member IDs who have voted on this card  # noqa: E501

        :param id_members_voted: The id_members_voted of this Card.  # noqa: E501
        :type: list[ERRORUNKNOWN]
        """

        self._id_members_voted = id_members_voted

    @property
    def id_short(self):
        """Gets the id_short of this Card.  # noqa: E501

        Numeric ID for the card on this board. Only unique to the board, and subject to change as the card moves  # noqa: E501

        :return: The id_short of this Card.  # noqa: E501
        :rtype: int
        """
        return self._id_short

    @id_short.setter
    def id_short(self, id_short):
        """Sets the id_short of this Card.

        Numeric ID for the card on this board. Only unique to the board, and subject to change as the card moves  # noqa: E501

        :param id_short: The id_short of this Card.  # noqa: E501
        :type: int
        """

        self._id_short = id_short

    @property
    def labels(self):
        """Gets the labels of this Card.  # noqa: E501

        Array of label objects on this card  # noqa: E501

        :return: The labels of this Card.  # noqa: E501
        :rtype: list[ERRORUNKNOWN]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Card.

        Array of label objects on this card  # noqa: E501

        :param labels: The labels of this Card.  # noqa: E501
        :type: list[ERRORUNKNOWN]
        """

        self._labels = labels

    @property
    def manual_cover_attachment(self):
        """Gets the manual_cover_attachment of this Card.  # noqa: E501

        Whether the card cover image was selected automatically by Trello, or manually by the user  # noqa: E501

        :return: The manual_cover_attachment of this Card.  # noqa: E501
        :rtype: bool
        """
        return self._manual_cover_attachment

    @manual_cover_attachment.setter
    def manual_cover_attachment(self, manual_cover_attachment):
        """Sets the manual_cover_attachment of this Card.

        Whether the card cover image was selected automatically by Trello, or manually by the user  # noqa: E501

        :param manual_cover_attachment: The manual_cover_attachment of this Card.  # noqa: E501
        :type: bool
        """

        self._manual_cover_attachment = manual_cover_attachment

    @property
    def name(self):
        """Gets the name of this Card.  # noqa: E501

        Name of the card  # noqa: E501

        :return: The name of this Card.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Card.

        Name of the card  # noqa: E501

        :param name: The name of this Card.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def short_link(self):
        """Gets the short_link of this Card.  # noqa: E501

        The 8 character shortened ID for the card  # noqa: E501

        :return: The short_link of this Card.  # noqa: E501
        :rtype: str
        """
        return self._short_link

    @short_link.setter
    def short_link(self, short_link):
        """Sets the short_link of this Card.

        The 8 character shortened ID for the card  # noqa: E501

        :param short_link: The short_link of this Card.  # noqa: E501
        :type: str
        """

        self._short_link = short_link

    @property
    def short_url(self):
        """Gets the short_url of this Card.  # noqa: E501

        URL to the card without the name slug  # noqa: E501

        :return: The short_url of this Card.  # noqa: E501
        :rtype: str
        """
        return self._short_url

    @short_url.setter
    def short_url(self, short_url):
        """Sets the short_url of this Card.

        URL to the card without the name slug  # noqa: E501

        :param short_url: The short_url of this Card.  # noqa: E501
        :type: str
        """

        self._short_url = short_url

    @property
    def subscribed(self):
        """Gets the subscribed of this Card.  # noqa: E501

        Whether this member is subscribed to the card  # noqa: E501

        :return: The subscribed of this Card.  # noqa: E501
        :rtype: bool
        """
        return self._subscribed

    @subscribed.setter
    def subscribed(self, subscribed):
        """Sets the subscribed of this Card.

        Whether this member is subscribed to the card  # noqa: E501

        :param subscribed: The subscribed of this Card.  # noqa: E501
        :type: bool
        """

        self._subscribed = subscribed

    @property
    def url(self):
        """Gets the url of this Card.  # noqa: E501

        Full URL to the card, with the name slug  # noqa: E501

        :return: The url of this Card.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Card.

        Full URL to the card, with the name slug  # noqa: E501

        :param url: The url of this Card.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Card):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
