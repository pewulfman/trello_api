# coding: utf-8

"""
    Trello Api

    Trello Api generated from the online documentation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Custom(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display': 'object',
        'field_group': 'str',
        'id': 'str',
        'id_model': 'str',
        'model_type': 'str',
        'name': 'str',
        'options': 'list[ERRORUNKNOWN]',
        'pos': 'str',
        'type': 'str'
    }

    attribute_map = {
        'display': 'display',
        'field_group': 'fieldGroup',
        'id': 'id',
        'id_model': 'idModel',
        'model_type': 'modelType',
        'name': 'name',
        'options': 'options',
        'pos': 'pos',
        'type': 'type'
    }

    def __init__(self, display=None, field_group=None, id=None, id_model=None, model_type=None, name=None, options=None, pos=None, type=None):  # noqa: E501
        """Custom - a model defined in Swagger"""  # noqa: E501

        self._display = None
        self._field_group = None
        self._id = None
        self._id_model = None
        self._model_type = None
        self._name = None
        self._options = None
        self._pos = None
        self._type = None
        self.discriminator = None

        if display is not None:
            self.display = display
        if field_group is not None:
            self.field_group = field_group
        if id is not None:
            self.id = id
        if id_model is not None:
            self.id_model = id_model
        if model_type is not None:
            self.model_type = model_type
        if name is not None:
            self.name = name
        if options is not None:
            self.options = options
        if pos is not None:
            self.pos = pos
        if type is not None:
            self.type = type

    @property
    def display(self):
        """Gets the display of this Custom.  # noqa: E501

        An object that contains this custom fields display properties. { cardFront: true }  # noqa: E501

        :return: The display of this Custom.  # noqa: E501
        :rtype: object
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this Custom.

        An object that contains this custom fields display properties. { cardFront: true }  # noqa: E501

        :param display: The display of this Custom.  # noqa: E501
        :type: object
        """

        self._display = display

    @property
    def field_group(self):
        """Gets the field_group of this Custom.  # noqa: E501

        A hash created from the fields of a Custom Field used to manage Custom Fields and values between boards. For more on its use, check out the Grouping Custom Fields Across Boards section of the Custom Fields guide.  # noqa: E501

        :return: The field_group of this Custom.  # noqa: E501
        :rtype: str
        """
        return self._field_group

    @field_group.setter
    def field_group(self, field_group):
        """Sets the field_group of this Custom.

        A hash created from the fields of a Custom Field used to manage Custom Fields and values between boards. For more on its use, check out the Grouping Custom Fields Across Boards section of the Custom Fields guide.  # noqa: E501

        :param field_group: The field_group of this Custom.  # noqa: E501
        :type: str
        """

        self._field_group = field_group

    @property
    def id(self):
        """Gets the id of this Custom.  # noqa: E501

        The ID of the Custom Field definition.  # noqa: E501

        :return: The id of this Custom.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Custom.

        The ID of the Custom Field definition.  # noqa: E501

        :param id: The id of this Custom.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def id_model(self):
        """Gets the id_model of this Custom.  # noqa: E501

        The ID of the model that they Custom Field is defined on. This should always be an ID of a board.  # noqa: E501

        :return: The id_model of this Custom.  # noqa: E501
        :rtype: str
        """
        return self._id_model

    @id_model.setter
    def id_model(self, id_model):
        """Sets the id_model of this Custom.

        The ID of the model that they Custom Field is defined on. This should always be an ID of a board.  # noqa: E501

        :param id_model: The id_model of this Custom.  # noqa: E501
        :type: str
        """

        self._id_model = id_model

    @property
    def model_type(self):
        """Gets the model_type of this Custom.  # noqa: E501

        The type of model that the Custom Field is being defined for. This should always be board.  # noqa: E501

        :return: The model_type of this Custom.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this Custom.

        The type of model that the Custom Field is being defined for. This should always be board.  # noqa: E501

        :param model_type: The model_type of this Custom.  # noqa: E501
        :type: str
        """

        self._model_type = model_type

    @property
    def name(self):
        """Gets the name of this Custom.  # noqa: E501

        The name of the Custom Field. This is displayed to the user in the Trello clients.  # noqa: E501

        :return: The name of this Custom.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Custom.

        The name of the Custom Field. This is displayed to the user in the Trello clients.  # noqa: E501

        :param name: The name of this Custom.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def options(self):
        """Gets the options of this Custom.  # noqa: E501

        An array of objects used for Custom Fields of the list type. The objects contain data about the options available for the dropdown.  # noqa: E501

        :return: The options of this Custom.  # noqa: E501
        :rtype: list[ERRORUNKNOWN]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this Custom.

        An array of objects used for Custom Fields of the list type. The objects contain data about the options available for the dropdown.  # noqa: E501

        :param options: The options of this Custom.  # noqa: E501
        :type: list[ERRORUNKNOWN]
        """

        self._options = options

    @property
    def pos(self):
        """Gets the pos of this Custom.  # noqa: E501

        The position of the Custom Field. This will be used to determine the order that Custom Fields should be listed when being shown to the user.  # noqa: E501

        :return: The pos of this Custom.  # noqa: E501
        :rtype: str
        """
        return self._pos

    @pos.setter
    def pos(self, pos):
        """Sets the pos of this Custom.

        The position of the Custom Field. This will be used to determine the order that Custom Fields should be listed when being shown to the user.  # noqa: E501

        :param pos: The pos of this Custom.  # noqa: E501
        :type: str
        """

        self._pos = pos

    @property
    def type(self):
        """Gets the type of this Custom.  # noqa: E501

        Determines the type of values that can be used when setting values for Custom Fields on cards. Should be one of: number, date, text, checkbox, and list.  # noqa: E501

        :return: The type of this Custom.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Custom.

        Determines the type of values that can be used when setting values for Custom Fields on cards. Should be one of: number, date, text, checkbox, and list.  # noqa: E501

        :param type: The type of this Custom.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Custom):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
