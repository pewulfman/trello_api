# coding: utf-8

"""
    Trello Api

    Trello Api generated from the online documentation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Enterprise(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_name': 'str',
        'id': 'str',
        'id_admins': 'list[ERRORUNKNOWN]',
        'id_members': 'list[ERRORUNKNOWN]',
        'id_organizations': 'list[ERRORUNKNOWN]',
        'name': 'str',
        'prefs': 'object',
        'products': 'list[ERRORUNKNOWN]',
        'sso_activation_failed': 'bool',
        'user_types': 'object'
    }

    attribute_map = {
        'display_name': 'displayName',
        'id': 'id:',
        'id_admins': 'idAdmins',
        'id_members': 'idMembers',
        'id_organizations': 'idOrganizations',
        'name': 'name',
        'prefs': 'prefs',
        'products': 'products',
        'sso_activation_failed': 'ssoActivationFailed',
        'user_types': 'userTypes'
    }

    def __init__(self, display_name=None, id=None, id_admins=None, id_members=None, id_organizations=None, name=None, prefs=None, products=None, sso_activation_failed=None, user_types=None):  # noqa: E501
        """Enterprise - a model defined in Swagger"""  # noqa: E501

        self._display_name = None
        self._id = None
        self._id_admins = None
        self._id_members = None
        self._id_organizations = None
        self._name = None
        self._prefs = None
        self._products = None
        self._sso_activation_failed = None
        self._user_types = None
        self.discriminator = None

        if display_name is not None:
            self.display_name = display_name
        if id is not None:
            self.id = id
        if id_admins is not None:
            self.id_admins = id_admins
        if id_members is not None:
            self.id_members = id_members
        if id_organizations is not None:
            self.id_organizations = id_organizations
        if name is not None:
            self.name = name
        if prefs is not None:
            self.prefs = prefs
        if products is not None:
            self.products = products
        if sso_activation_failed is not None:
            self.sso_activation_failed = sso_activation_failed
        if user_types is not None:
            self.user_types = user_types

    @property
    def display_name(self):
        """Gets the display_name of this Enterprise.  # noqa: E501

        Long-form name of the enterprise used when displaying the full name of the enterprise. Example: Trello's Enterprise  # noqa: E501

        :return: The display_name of this Enterprise.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Enterprise.

        Long-form name of the enterprise used when displaying the full name of the enterprise. Example: Trello's Enterprise  # noqa: E501

        :param display_name: The display_name of this Enterprise.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this Enterprise.  # noqa: E501

        The ID of the enterprise.  # noqa: E501

        :return: The id of this Enterprise.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Enterprise.

        The ID of the enterprise.  # noqa: E501

        :param id: The id of this Enterprise.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def id_admins(self):
        """Gets the id_admins of this Enterprise.  # noqa: E501

        Array of Member IDs that are admins of the enterprise.  # noqa: E501

        :return: The id_admins of this Enterprise.  # noqa: E501
        :rtype: list[ERRORUNKNOWN]
        """
        return self._id_admins

    @id_admins.setter
    def id_admins(self, id_admins):
        """Sets the id_admins of this Enterprise.

        Array of Member IDs that are admins of the enterprise.  # noqa: E501

        :param id_admins: The id_admins of this Enterprise.  # noqa: E501
        :type: list[ERRORUNKNOWN]
        """

        self._id_admins = id_admins

    @property
    def id_members(self):
        """Gets the id_members of this Enterprise.  # noqa: E501

        Array of Member IDs that belong to the enterprise.  # noqa: E501

        :return: The id_members of this Enterprise.  # noqa: E501
        :rtype: list[ERRORUNKNOWN]
        """
        return self._id_members

    @id_members.setter
    def id_members(self, id_members):
        """Sets the id_members of this Enterprise.

        Array of Member IDs that belong to the enterprise.  # noqa: E501

        :param id_members: The id_members of this Enterprise.  # noqa: E501
        :type: list[ERRORUNKNOWN]
        """

        self._id_members = id_members

    @property
    def id_organizations(self):
        """Gets the id_organizations of this Enterprise.  # noqa: E501

        Array of Organization IDs that belong to the enterprise.  # noqa: E501

        :return: The id_organizations of this Enterprise.  # noqa: E501
        :rtype: list[ERRORUNKNOWN]
        """
        return self._id_organizations

    @id_organizations.setter
    def id_organizations(self, id_organizations):
        """Sets the id_organizations of this Enterprise.

        Array of Organization IDs that belong to the enterprise.  # noqa: E501

        :param id_organizations: The id_organizations of this Enterprise.  # noqa: E501
        :type: list[ERRORUNKNOWN]
        """

        self._id_organizations = id_organizations

    @property
    def name(self):
        """Gets the name of this Enterprise.  # noqa: E501

        Short-form name of the enterprise. Example: test_enterprise.  # noqa: E501

        :return: The name of this Enterprise.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Enterprise.

        Short-form name of the enterprise. Example: test_enterprise.  # noqa: E501

        :param name: The name of this Enterprise.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def prefs(self):
        """Gets the prefs of this Enterprise.  # noqa: E501

        JSON Object containing information about the preferences set within the enterprise. Example: {   \"ssoOnly\": false,   \"signup\": {     \"message\": \"游때 Howdy, friends.\",     \"confirmation\": \"We're confirming that you are a 游눪.\",     \"banner\": \"Banner Text!\",     \"bannerHtml\": \"<p>Banner Text!</p>\\n\",     \"confirmationHtml\": \"<p>We're confirming that you are a 游눪.</p>\\n\",     \"messageHtml\": \"<p>游때 Howdy, friends.</p>\\n\"   },   \"mandatoryTransferDate\": null,   \"maxMembers\": null }   # noqa: E501

        :return: The prefs of this Enterprise.  # noqa: E501
        :rtype: object
        """
        return self._prefs

    @prefs.setter
    def prefs(self, prefs):
        """Sets the prefs of this Enterprise.

        JSON Object containing information about the preferences set within the enterprise. Example: {   \"ssoOnly\": false,   \"signup\": {     \"message\": \"游때 Howdy, friends.\",     \"confirmation\": \"We're confirming that you are a 游눪.\",     \"banner\": \"Banner Text!\",     \"bannerHtml\": \"<p>Banner Text!</p>\\n\",     \"confirmationHtml\": \"<p>We're confirming that you are a 游눪.</p>\\n\",     \"messageHtml\": \"<p>游때 Howdy, friends.</p>\\n\"   },   \"mandatoryTransferDate\": null,   \"maxMembers\": null }   # noqa: E501

        :param prefs: The prefs of this Enterprise.  # noqa: E501
        :type: object
        """

        self._prefs = prefs

    @property
    def products(self):
        """Gets the products of this Enterprise.  # noqa: E501

        Array of products that the enterprise has enabled.  # noqa: E501

        :return: The products of this Enterprise.  # noqa: E501
        :rtype: list[ERRORUNKNOWN]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this Enterprise.

        Array of products that the enterprise has enabled.  # noqa: E501

        :param products: The products of this Enterprise.  # noqa: E501
        :type: list[ERRORUNKNOWN]
        """

        self._products = products

    @property
    def sso_activation_failed(self):
        """Gets the sso_activation_failed of this Enterprise.  # noqa: E501

        Determines whether SSO successfully activated.  # noqa: E501

        :return: The sso_activation_failed of this Enterprise.  # noqa: E501
        :rtype: bool
        """
        return self._sso_activation_failed

    @sso_activation_failed.setter
    def sso_activation_failed(self, sso_activation_failed):
        """Sets the sso_activation_failed of this Enterprise.

        Determines whether SSO successfully activated.  # noqa: E501

        :param sso_activation_failed: The sso_activation_failed of this Enterprise.  # noqa: E501
        :type: bool
        """

        self._sso_activation_failed = sso_activation_failed

    @property
    def user_types(self):
        """Gets the user_types of this Enterprise.  # noqa: E501

        Object containing keys for every member type (all, member, collaborator, saml, none) and values representing the count of each type of member. For example: {   \"all\": 6,   \"member\": 5,   \"collaborator\": 0,   \"saml\": 0,   \"none\": 1 }   # noqa: E501

        :return: The user_types of this Enterprise.  # noqa: E501
        :rtype: object
        """
        return self._user_types

    @user_types.setter
    def user_types(self, user_types):
        """Sets the user_types of this Enterprise.

        Object containing keys for every member type (all, member, collaborator, saml, none) and values representing the count of each type of member. For example: {   \"all\": 6,   \"member\": 5,   \"collaborator\": 0,   \"saml\": 0,   \"none\": 1 }   # noqa: E501

        :param user_types: The user_types of this Enterprise.  # noqa: E501
        :type: object
        """

        self._user_types = user_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Enterprise):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
