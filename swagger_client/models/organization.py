# coding: utf-8

"""
    Trello Api

    Trello Api generated from the online documentation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Organization(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'billable_member_count': 'int',
        'desc': 'str',
        'desc_data': 'object',
        'display_name': 'str',
        'id': 'str',
        'id_boards': 'list[ERRORUNKNOWN]',
        'logo_hash': 'str',
        'memberships': 'list[ERRORUNKNOWN]',
        'name': 'str',
        'prefs': 'object',
        'url': 'str',
        'website': 'str'
    }

    attribute_map = {
        'billable_member_count': 'billableMemberCount',
        'desc': 'desc',
        'desc_data': 'descData',
        'display_name': 'displayName',
        'id': 'id',
        'id_boards': 'idBoards',
        'logo_hash': 'logoHash',
        'memberships': 'memberships',
        'name': 'name',
        'prefs': 'prefs',
        'url': 'url',
        'website': 'website'
    }

    def __init__(self, billable_member_count=None, desc=None, desc_data=None, display_name=None, id=None, id_boards=None, logo_hash=None, memberships=None, name=None, prefs=None, url=None, website=None):  # noqa: E501
        """Organization - a model defined in Swagger"""  # noqa: E501

        self._billable_member_count = None
        self._desc = None
        self._desc_data = None
        self._display_name = None
        self._id = None
        self._id_boards = None
        self._logo_hash = None
        self._memberships = None
        self._name = None
        self._prefs = None
        self._url = None
        self._website = None
        self.discriminator = None

        if billable_member_count is not None:
            self.billable_member_count = billable_member_count
        if desc is not None:
            self.desc = desc
        if desc_data is not None:
            self.desc_data = desc_data
        if display_name is not None:
            self.display_name = display_name
        if id is not None:
            self.id = id
        if id_boards is not None:
            self.id_boards = id_boards
        if logo_hash is not None:
            self.logo_hash = logo_hash
        if memberships is not None:
            self.memberships = memberships
        if name is not None:
            self.name = name
        if prefs is not None:
            self.prefs = prefs
        if url is not None:
            self.url = url
        if website is not None:
            self.website = website

    @property
    def billable_member_count(self):
        """Gets the billable_member_count of this Organization.  # noqa: E501

          # noqa: E501

        :return: The billable_member_count of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._billable_member_count

    @billable_member_count.setter
    def billable_member_count(self, billable_member_count):
        """Sets the billable_member_count of this Organization.

          # noqa: E501

        :param billable_member_count: The billable_member_count of this Organization.  # noqa: E501
        :type: int
        """

        self._billable_member_count = billable_member_count

    @property
    def desc(self):
        """Gets the desc of this Organization.  # noqa: E501

        The description for the team  # noqa: E501

        :return: The desc of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this Organization.

        The description for the team  # noqa: E501

        :param desc: The desc of this Organization.  # noqa: E501
        :type: str
        """

        self._desc = desc

    @property
    def desc_data(self):
        """Gets the desc_data of this Organization.  # noqa: E501

        If there are custom emoji in the desc this will contain information about them.  # noqa: E501

        :return: The desc_data of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._desc_data

    @desc_data.setter
    def desc_data(self, desc_data):
        """Sets the desc_data of this Organization.

        If there are custom emoji in the desc this will contain information about them.  # noqa: E501

        :param desc_data: The desc_data of this Organization.  # noqa: E501
        :type: object
        """

        self._desc_data = desc_data

    @property
    def display_name(self):
        """Gets the display_name of this Organization.  # noqa: E501

        The name for the team. For example: Trello Inc  # noqa: E501

        :return: The display_name of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Organization.

        The name for the team. For example: Trello Inc  # noqa: E501

        :param display_name: The display_name of this Organization.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this Organization.  # noqa: E501

        The ID of the organization  # noqa: E501

        :return: The id of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Organization.

        The ID of the organization  # noqa: E501

        :param id: The id of this Organization.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def id_boards(self):
        """Gets the id_boards of this Organization.  # noqa: E501

        An array of board IDs that are in the team  # noqa: E501

        :return: The id_boards of this Organization.  # noqa: E501
        :rtype: list[ERRORUNKNOWN]
        """
        return self._id_boards

    @id_boards.setter
    def id_boards(self, id_boards):
        """Sets the id_boards of this Organization.

        An array of board IDs that are in the team  # noqa: E501

        :param id_boards: The id_boards of this Organization.  # noqa: E501
        :type: list[ERRORUNKNOWN]
        """

        self._id_boards = id_boards

    @property
    def logo_hash(self):
        """Gets the logo_hash of this Organization.  # noqa: E501

          # noqa: E501

        :return: The logo_hash of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._logo_hash

    @logo_hash.setter
    def logo_hash(self, logo_hash):
        """Sets the logo_hash of this Organization.

          # noqa: E501

        :param logo_hash: The logo_hash of this Organization.  # noqa: E501
        :type: str
        """

        self._logo_hash = logo_hash

    @property
    def memberships(self):
        """Gets the memberships of this Organization.  # noqa: E501

          # noqa: E501

        :return: The memberships of this Organization.  # noqa: E501
        :rtype: list[ERRORUNKNOWN]
        """
        return self._memberships

    @memberships.setter
    def memberships(self, memberships):
        """Sets the memberships of this Organization.

          # noqa: E501

        :param memberships: The memberships of this Organization.  # noqa: E501
        :type: list[ERRORUNKNOWN]
        """

        self._memberships = memberships

    @property
    def name(self):
        """Gets the name of this Organization.  # noqa: E501

        The programmatic name for the team. For example: trelloinc  # noqa: E501

        :return: The name of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Organization.

        The programmatic name for the team. For example: trelloinc  # noqa: E501

        :param name: The name of this Organization.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def prefs(self):
        """Gets the prefs of this Organization.  # noqa: E501

        The preferences (settings) for the team  # noqa: E501

        :return: The prefs of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._prefs

    @prefs.setter
    def prefs(self, prefs):
        """Sets the prefs of this Organization.

        The preferences (settings) for the team  # noqa: E501

        :param prefs: The prefs of this Organization.  # noqa: E501
        :type: object
        """

        self._prefs = prefs

    @property
    def url(self):
        """Gets the url of this Organization.  # noqa: E501

        The URL to the team page on Trello  # noqa: E501

        :return: The url of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Organization.

        The URL to the team page on Trello  # noqa: E501

        :param url: The url of this Organization.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def website(self):
        """Gets the website of this Organization.  # noqa: E501

          # noqa: E501

        :return: The website of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Organization.

          # noqa: E501

        :param website: The website of this Organization.  # noqa: E501
        :type: str
        """

        self._website = website

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Organization):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
