# coding: utf-8

"""
    Trello Api

    Trello Api generated from the online documentation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Webhook(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'callback_url': 'str',
        'description': 'str',
        'id': 'str',
        'id_model': 'str'
    }

    attribute_map = {
        'active': 'active',
        'callback_url': 'callbackURL',
        'description': 'description',
        'id': 'id',
        'id_model': 'idModel'
    }

    def __init__(self, active=None, callback_url=None, description=None, id=None, id_model=None):  # noqa: E501
        """Webhook - a model defined in Swagger"""  # noqa: E501

        self._active = None
        self._callback_url = None
        self._description = None
        self._id = None
        self._id_model = None
        self.discriminator = None

        if active is not None:
            self.active = active
        if callback_url is not None:
            self.callback_url = callback_url
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if id_model is not None:
            self.id_model = id_model

    @property
    def active(self):
        """Gets the active of this Webhook.  # noqa: E501

        Determines whether the webhook is active or not.  # noqa: E501

        :return: The active of this Webhook.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Webhook.

        Determines whether the webhook is active or not.  # noqa: E501

        :param active: The active of this Webhook.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def callback_url(self):
        """Gets the callback_url of this Webhook.  # noqa: E501

        The URL that the webhook will POST information to.  # noqa: E501

        :return: The callback_url of this Webhook.  # noqa: E501
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this Webhook.

        The URL that the webhook will POST information to.  # noqa: E501

        :param callback_url: The callback_url of this Webhook.  # noqa: E501
        :type: str
        """

        self._callback_url = callback_url

    @property
    def description(self):
        """Gets the description of this Webhook.  # noqa: E501

        Description provided when creating webhook.  # noqa: E501

        :return: The description of this Webhook.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Webhook.

        Description provided when creating webhook.  # noqa: E501

        :param description: The description of this Webhook.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Webhook.  # noqa: E501

        ID of the webhook.  # noqa: E501

        :return: The id of this Webhook.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Webhook.

        ID of the webhook.  # noqa: E501

        :param id: The id of this Webhook.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def id_model(self):
        """Gets the id_model of this Webhook.  # noqa: E501

        ID of the object the webhook is watching.  # noqa: E501

        :return: The id_model of this Webhook.  # noqa: E501
        :rtype: str
        """
        return self._id_model

    @id_model.setter
    def id_model(self, id_model):
        """Sets the id_model of this Webhook.

        ID of the object the webhook is watching.  # noqa: E501

        :param id_model: The id_model of this Webhook.  # noqa: E501
        :type: str
        """

        self._id_model = id_model

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Webhook):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
